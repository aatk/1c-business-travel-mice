
&НаСервере
Функция ПолучитьНовоеУсловие()
	
	//ДЗ = ДанныеФормыВЗначение(Список.Отбор, Тип("ОтборКомпоновкиДанных"));
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Список.Отбор);
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO);
		Стр = ЗаписьJSON.Закрыть(); 
	Исключение
		ЗаписьJSON = Новый ЗаписьXML;
		ЗаписьJSON.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьXML(ЗаписьJSON, ОбъектXDTO);
		Стр = ЗаписьJSON.Закрыть(); 
	КонецПопытки;
	
	Возврат Стр; 
КонецФункции

&НаСервере
Функция ПолучитьПредставление()
	Возврат Строка(Список.Отбор);
КонецФункции

&НаКлиенте
Процедура СоздатьПравилоИЗакрыть(Команда)
	
	Результат = Новый Структура("ДеревоПравил, Представление");
	Результат.ДеревоПравил = ПолучитьНовоеУсловие();
	Результат.Представление = ПолучитьПредставление();
	
	Закрыть(Результат);
КонецПроцедуры


Функция ПолучитьДеревоРекурсивно(ДЗ, ТекущиеЭлементы);
	
	Для Каждого ЭлементКомпоновки ИЗ ДЗ.Элементы Цикл 
		
		Если ТипЗнч(ЭлементКомпоновки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущиеЭлементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = ЭлементКомпоновки.Использование;
			ЭлементОтбора.ТипГруппы = ЭлементКомпоновки.ТипГруппы;
			ПолучитьДеревоРекурсивно(ЭлементКомпоновки, ЭлементОтбора.Элементы);				
		Иначе					
			ЭлементОтбора = ТекущиеЭлементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = ЭлементКомпоновки.ЛевоеЗначение;   
			ЭлементОтбора.ВидСравнения = ЭлементКомпоновки.ВидСравнения;
			ЭлементОтбора.Использование = ЭлементКомпоновки.Использование;
			ЭлементОтбора.ПравоеЗначение = ЭлементКомпоновки.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;		
	//Возврат Дерево;
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Параметры.Свойство("ОбъектУсловия") Тогда
		Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ОбъектУсловия) Тогда
			Список.ТекстЗапроса = УправлениеБТСервер.ПолучитьЗапросДляУсловий(ЭтаФорма.Параметры.ОбъектУсловия);
		Иначе
			Список.ТекстЗапроса = УправлениеБТСервер.ПолучитьЗапросДляУсловий();		
		КонецЕсли;
	Иначе	
		Список.ТекстЗапроса = УправлениеБТСервер.ПолучитьЗапросДляУсловий();		
	КонецЕсли;
	
	ТекстЗаглушки = УправлениеБТСервер.ПолучитьТекстЗаглушки();
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка) КАК Ссылка,
	               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
	               |	УслугаОписаниеУслуги.Значение КАК Значение
	               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
	               |ИЗ
	               |	Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
	               |ГДЕ
	               |	УслугаОписаниеУслуги.Ссылка = ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка) КАК Ссылка,
	               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
	               |	УслугаЭкстраПоля.Значение КАК Значение
	               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
	               |ИЗ
	               |	Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
	               |ГДЕ
	               |	УслугаЭкстраПоля.Ссылка = ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка)
				   |;";
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, ТекстЗаглушки, ТекстЗапроса);
	
	
	//Для Каждого ЭлементДПО ИЗ Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл
	//	ОписаниеТипов = ЭлементДПО.ТипЗначения;
	//	МассивТипов = Новый Массив;
	//	МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементОтбора"));
	//	НовоеОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, МассивТипов);
	//	ЭлементДПО.ТипЗначения = Новый ОписаниеТипов(ОписаниеТипов, МассивТипов);
	//	
	//	//Список.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы.
	//	//ЭлементДПО.ТипЗначения.ПривестиЗначение(Справочники.ЭлементОтбора.ПустаяСсылка());
	//КонецЦикла;
	
	//Для Каждого ЭлементДПО ИЗ Список.Отбор.ДоступныеПоляОтбора.Элементы Цикл
	//	ЭлементДПО.ТипЗначения.Типы().Добавить(Тип("СправочникСсылка.ЭлементОтбора"));
	//	//ЭлементДПО.ТипЗначения.ПривестиЗначение(Справочники.ЭлементОтбора.ПустаяСсылка());
	//КонецЦикла;
	
	ДеревоПравил = "";
	ЭтаФорма.Параметры.Свойство("ДеревоПравил", ДеревоПравил);
	
	Если ЗначениеЗаполнено(ДеревоПравил) Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ДеревоПравил);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		
		ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ТекущиеЭлементы = Список.Отбор.Элементы;     //ТекущиеЭлементы = Новый ОтборКомпоновкиДанных;
		ПолучитьДеревоРекурсивно(ДЗ, ТекущиеЭлементы);
					
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьДЗВОтбор(ДЗ, Отбор)
	
	Если ДЗ.Строки.Количество()>0 Тогда
		
		Для Каждого ДЗСтрока ИЗ ДЗ.Строки Цикл
			
			Если ЗначениеЗаполнено(ДЗСтрока.ПравоеЗначениеНоменклатур) Тогда
				//Отбор	
				ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ДЗСтрока.ЛевоеЗначение.ИмяПредопределенныхДанных+"Характеристика");
				НайденноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКомпоновкиДанных); //Элементы[19].Заголовок
				Если (НайденноеПоле <> Неопределено) Тогда
					//Отбор.Элементы.Добавить(НайденноеПоле);
					ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = НайденноеПоле.Поле;   
					ЭлементОтбора.ВидСравнения = ОтборКомпоновщика(ДЗСтрока.ВидСравнения);
					ЭлементОтбора.Использование = Истина;
					ЭлементОтбора.ПравоеЗначение = ДЗСтрока.ПравоеЗначениеНоменклатур;   
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтборКомпоновщика(ОтборВидСравнения)
        
	Если ОтборВидСравнения = ВидСравнения.Больше Тогда
	    ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.Больше; 
		
    ИначеЕсли ОтборВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
        ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
	ИначеЕсли ОтборВидСравнения = ВидСравнения.ВИерархии Тогда
        ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		
	ИначеЕсли ОтборВидСравнения = ВидСравнения.ВСписке Тогда
        ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		
	ИначеЕсли ОтборВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
        ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		
	ИначеЕсли ОтборВидСравнения = ВидСравнения.Меньше Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.НеВИерархии Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.НеВСписке Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.НеРавно Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.НеСодержит Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.Равно Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ОтборВидСравнения = ВидСравнения.Содержит Тогда
		ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	Иначе
        ОтборКомпоновщикаВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    КонецЕсли;
	
	Возврат ОтборКомпоновщикаВидСравнения
КонецФункции

