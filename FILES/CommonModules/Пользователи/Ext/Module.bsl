
// См. ПользователиКлиентСервер.АвторизованныйПользователь
Функция АвторизованныйПользователь() Экспорт
	
	Возврат ПользователиКлиентСервер.АвторизованныйПользователь();
	
КонецФункции

Функция СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	
	//Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	//	ВызватьИсключение НСтр("ru = 'Справочник Пользователи недоступен в неразделенном режиме.'");
	//КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		
		Если ПользователиИБ.Количество() = 0 Тогда
			//Если ОбщегоНазначения.РазделениеВключено() Тогда
			//	ВызватьИсключение
			//		НСтр("ru = 'Невозможно автоматически создать первого администратора области данных.'");
			//КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
			ПользовательИБ.Имя       = "Администратор";
			ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;
			ПользовательИБ.Роли.Очистить();
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
			Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
				ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			ПользовательИБ.Записать();
		Иначе
			// Если существует пользователь с правами администратора,
			// тогда первый администратор уже создан и его не требуется создавать.
			Для Каждого ТекущийПользовательИБ Из ПользователиИБ Цикл
				Если ПользователиСлужебный.РолиАдминистратораДоступны(ТекущийПользовательИБ) Тогда
					Возврат Неопределено; // Первый администратор уже создан.
				КонецЕсли;
			КонецЦикла;
			// Первый администратор создан некорректно.
			ТекстОшибки =
				НСтр("ru = 'Список пользователей информационной базы не пустой, однако не удалось
				           |найти ни одного пользователя с ролями Полные права и Администратор системы.
				           |
				           |Вероятно, пользователи создавались в конфигураторе.
				           |Требуется назначить роли Полные права и Администратор системы хотя бы одному пользователю.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		Если Не ПользователиСлужебный.РолиАдминистратораДоступны(ПользовательИБ) Тогда
			ТекстОшибки =
				НСтр("ru = 'Невозможно создать пользователя в справочнике для пользователя
				           |информационной базы ""%1"",
				           |так как у него нет ролей Полные права и Администратор системы.
				           |
				           |Вероятно, пользователь был создан в конфигураторе.
				           |Для автоматического создания пользователя в справочнике требуется
				           |назначить ему роли Полные права и Администратор системы.'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ПользовательИБ));
		КонецЕсли;
		
		НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(
	         ПользовательИБ.УникальныйИдентификатор) Тогда
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		
		// Если администратор сопоставлен с внешним пользователем - это ошибка,
		// требуется очистить сопоставление.
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			
			ВнешнийПользователь = Справочники.ВнешниеПользователи.НайтиПоРеквизиту(
				"ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
			
			ВнешнийПользовательОбъект = ВнешнийПользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ВнешнийПользовательОбъект.ОбменДанными.Загрузка = Истина;
			ВнешнийПользовательОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);
		
		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		         Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			
			Пользователь = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан = Истина;
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		ПользовательСоздан = Ложь;
	КонецЕсли;
	
	Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
	
	ОписаниеПользователяИБ = Новый Структура;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	ОписаниеПользователяИБ.Вставить(
		"УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	
	Пользователь.ДополнительныеСвойства.Вставить(
		"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	
	Пользователь.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
		?(ПользовательИБ = Неопределено,
		  НСтр("ru = 'Выполнено создание первого администратора.'"),
		  ?(ПользовательСоздан,
		    НСтр("ru = 'Администратор сопоставлен с новым пользователем справочника.'"),
		    НСтр("ru = 'Администратор сопоставлен с существующим пользователем справочника.'")) ) );
		
	Пользователь.Записать();
	
	Возврат Пользователь.Ссылка;
	
КонецФункции

// Выполняет поиск идентификаторов пользователей ИБ используемых более одного раза и
// либо вызывает исключение, либо возвращает найденных пользователей ИБ для дальнейшей
// обработки.
//
// Параметры:
//  Пользователь - Неопределено - проверка для всех пользователей и внешних пользователей.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - проверка
//                 только для указанной ссылки.
//
//  УникальныйИдентификатор - Неопределено - проверка всех заданных идентификаторов пользователей ИБ.
//                          - УникальныйИдентификатор - проверка только для заданного идентификатора.
//
//  НайденныеИдентификаторы - Неопределено - при нахождении ошибок вызывается исключение.
//                          - Соответствие - при нахождении ошибок исключение не вызывается,
//                              а вместо этого заполняется переданное соответствие:
//                              * Ключ     - неоднозначный идентификатор пользователя ИБ.
//                              * Значение - массив пользователей и внешних пользователей.
//
//  ИдентификаторПользователяСервиса - Булево - если Ложь, тогда проверять ИдентификаторПользователяИБ,
//                                              если Истина,тогда проверять ИдентификаторПользователяСервиса.
//
Процедура НайтиНеоднозначныхПользователейИБ(Знач Пользователь,
                                            Знач УникальныйИдентификатор = Неопределено,
                                            Знач НайденныеИдентификаторы = Неопределено,
                                            Знач ИдентификаторПользователяСервиса = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(УникальныйИдентификатор) <> Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор =
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ КАК НеоднозначныйИдентификатор,
	|	ИдентификаторыПользователей.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ИдентификаторПользователяИБ,
	|		Пользователи.Ссылка КАК Пользователь
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнешниеПользователи.ИдентификаторПользователяИБ,
	|		ВнешниеПользователи.Ссылка
	|	ИЗ
	|		Справочник.ВнешниеПользователи КАК ВнешниеПользователи) КАК ИдентификаторыПользователей
	|ГДЕ
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ В
	|			(ВЫБРАТЬ
	|				ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИЗ
	|				(ВЫБРАТЬ
	|					Пользователи.ИдентификаторПользователяИБ,
	|					Пользователи.Ссылка КАК Пользователь
	|				ИЗ
	|					Справочник.Пользователи КАК Пользователи
	|				ГДЕ
	|					Пользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И Пользователи.Ссылка <> &Пользователь)
	|					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	|							И Пользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)
	|		
	|				ОБЪЕДИНИТЬ ВСЕ
	|		
	|				ВЫБРАТЬ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ,
	|					ВнешниеПользователи.Ссылка
	|				ИЗ
	|					Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|				ГДЕ
	|					ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойУникальныйИдентификатор
	|					И НЕ(&Пользователь <> НЕОПРЕДЕЛЕНО
	|							И ВнешниеПользователи.Ссылка <> &Пользователь)
	|					И НЕ(&УникальныйИдентификатор <> &ПустойУникальныйИдентификатор
	|							И ВнешниеПользователи.ИдентификаторПользователяИБ <> &УникальныйИдентификатор)
	|				) КАК ИдентификаторыПользователей
	|			СГРУППИРОВАТЬ ПО
	|						ИдентификаторыПользователей.ИдентификаторПользователяИБ
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ИдентификаторыПользователей.Пользователь) > 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторыПользователей.ИдентификаторПользователяИБ";
	
	Если ИдентификаторПользователяСервиса Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ИдентификаторПользователяИБ",
			"ИдентификаторПользователяСервиса");
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Ошибка в базе данных:'") + Символы.ПС;
	ТекущийНеоднозначныйИдентификатор = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		
		НовыйУникальныйИдентификатор = Ложь;
		Если Строка.НеоднозначныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
			НовыйУникальныйИдентификатор = Истина;
			ТекущийНеоднозначныйИдентификатор = Строка.НеоднозначныйИдентификатор;
			Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
				ТекущиеПользователи = Новый Массив;
				НайденныеИдентификаторы.Вставить(ТекущийНеоднозначныйИдентификатор, ТекущиеПользователи);
			Иначе
				ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
				
				Если ТекущийПользовательИБ.УникальныйИдентификатор <> ТекущийНеоднозначныйИдентификатор Тогда
					ТекущийПользовательИБ =
						ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
							ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;
				
				Если ТекущийПользовательИБ = Неопределено Тогда
					ИмяДляВхода = НСтр("ru = '<не найден>'");
				Иначе
					ИмяДляВхода = ТекущийПользовательИБ.Имя;
				КонецЕсли;
				
				Если ИдентификаторПользователяСервиса Тогда
					ОписаниеОшибки = ОписаниеОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю сервиса с идентификатором ""%1""
						           |соответствует более одного элемента в справочнике Пользователи:'"),
						ТекущийНеоднозначныйИдентификатор);
				Иначе
					ОписаниеОшибки = ОписаниеОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пользователю ИБ ""%1"" с идентификатором ""%2""
						           |соответствует более одного элемента в справочнике Пользователи:'"),
						ИмяДляВхода,
						ТекущийНеоднозначныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(НайденныеИдентификаторы) = Тип("Соответствие") Тогда
			ТекущиеПользователи.Добавить(Строка.Пользователь);
		Иначе
			Если НЕ НовыйУникальныйИдентификатор Тогда
				ОписаниеОшибки = ОписаниеОшибки + ",";
			КонецЕсли;
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + "	"
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" с идентификатором ссылки %2'"),
					Строка.Пользователь,
					Строка.Пользователь.УникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(НайденныеИдентификаторы) <> Тип("Соответствие") Тогда
		ВызватьИсключение ОписаниеОшибки + "." + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли текущий или указанный пользователь полноправным.
// 
// Полноправным считается пользователь, который
// а) при не пустом списке пользователей информационной базы, 
//    имеет роль ПолныеПрава и роль для администрирования системы (если ПроверятьПраваАдминистрированияСистемы = Истина)
// б) при пустом списке пользователей информационной базы
//    основная роль конфигурации не задана или ПолныеПрава.
//
// Параметры:
//  Пользователь - Неопределено - проверяется текущий пользователь ИБ.
//               - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - осуществляется
//                    поиск пользователя ИБ по уникальному идентификатору, заданному в реквизите.
//                    ИдентификаторПользователяИБ. Если пользователь ИБ не найден, возвращается Ложь.
//               - ПользовательИнформационнойБазы - проверяется указанный пользователь ИБ.
//
//  ПроверятьПраваАдминистрированияСистемы - Булево - если задано Истина, тогда проверяется наличие
//                 роли для администрирования системы.
//
//  УчитыватьПривилегированныйРежим - Булево - если задано Истина, тогда для текущего пользователя
//                 функция возвращает Истина, когда установлен привилегированный режим.
//
// Возвращаемое значение:
//  Булево - если Истина, пользователь является полноправным.
//
Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	ПривилегированныйРежимУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользователяИБ = СвойстваПроверяемогоПользователяИБ(Пользователь);
	
	Если СвойстваПользователяИБ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверитьРольПолныеПрава = Не ПроверятьПраваАдминистрированияСистемы;
	ПроверитьРольАдминистратораСистемы = ПроверятьПраваАдминистрированияСистемы;
	
	Если Не СвойстваПользователяИБ.УказанТекущийПользовательИБ Тогда
		Роли = СвойстваПользователяИБ.ПользовательИБ.Роли;
		
		// Для не текущего пользователя ИБ проверяются роли в записанном пользователе ИБ.
		Если ПроверитьРольПолныеПрава
		   И Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПроверитьРольАдминистратораСистемы
		   И Не Роли.Содержит(Метаданные.Роли.АдминистраторСистемы) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Если УчитыватьПривилегированныйРежим И ПривилегированныйРежимУстановлен Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ПривилегированныйРежимУстановленПриЗапуске() Тогда
		// Когда клиентское приложение запущено с параметром UsePrivilegedMode, тогда
		// пользователь является полноправным, если привилегированный режим установлен.
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя) И Метаданные.ОсновныеРоли.Количество() = 0 Тогда
		// Когда основные роли не указаны, тогда у неуказанного пользователя
		// есть все права (как в привилегированном режиме).
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СвойстваПользователяИБ.Имя)
	   И ПривилегированныйРежимУстановлен
	   И СвойстваПользователяИБ.ПравоАдминистрирование Тогда
		// Когда у неуказанного пользователя есть право Администрирование,
		// тогда привилегированный режим учитывается всегда для поддержки
		// параметра запуска UsePrivilegedMode у не клиентских приложений.
		Возврат Истина;
	КонецЕсли;
	
	// Для текущего пользователя ИБ проверяются роли не в записанном пользователе ИБ,
	// а роли в текущем сеансе.
	Если ПроверитьРольПолныеПрава
	   И Не СвойстваПользователяИБ.РольДоступнаПолныеПрава Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьРольАдминистратораСистемы
	   И Не СвойстваПользователяИБ.РольДоступнаАдминистраторСистемы Тогда // Не заменять на РолиДоступны.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции



Функция СвойстваПроверяемогоПользователяИБ(Пользователь)
	
	СвойстваТекущегоПользовательИБ = ПользователиСлужебныйПовтИсп.СвойстваТекущегоПользователяИБ();
	ПользовательИБ = Неопределено;
	
	Если ТипЗнч(Пользователь) = Тип("ПользовательИнформационнойБазы") Тогда
		ПользовательИБ = Пользователь;
		
	ИначеЕсли Пользователь = Неопределено Или Пользователь = АвторизованныйПользователь() Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	Иначе
		// Задан не текущий пользователь.
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ");
			Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ИдентификаторПользователяИБ Тогда
				Возврат СвойстваТекущегоПользовательИБ;
			КонецЕсли;
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СвойстваТекущегоПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор Тогда
		Возврат СвойстваТекущегоПользовательИБ;
	КонецЕсли;
	
	Свойства = Новый Структура;
	Свойства.Вставить("УказанТекущийПользовательИБ", Ложь);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);
	
	Возврат Свойства;
	
КонецФункции


// Возвращает пустую структуру описания пользователя ИБ.
// Назначение свойств структуры соответствует свойствам объекта ПользовательИнформационнойБазы.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//   * УникальныйИдентификатор   - УникальныйИдентификатор - уникальный идентификатор пользователя информационной базы.
//   * Имя                       - Строка - имя пользователя информационной базы. Например, "Иванов".
//   * ПолноеИмя                 - Строка - полное имя пользователя информационной базы. 
//                                          Например, "Иванов Иван Иванович (менеджер по продажам)"
//   * АутентификацияOpenID      - Булево - разрешена ли пользователю аутентификация по протоколу OpenID.
//
//   * АутентификацияСтандартная - Булево - разрешена ли стандартная аутентификация (по пользователю и паролю).
//   * ПоказыватьВСпискеВыбора   - Булево - показывать ли полное имя пользователя в списке для выбора при запуске.
//   * Пароль                    - Строка, Неопределено - пароль, используемый при стандартной аутентификации.
//   * СохраняемоеЗначениеПароля - Строка, Неопределено - хранимые значения пароля (хеш).
//   * ПарольУстановлен          - Булево - установлен ли пароль у пользователя.
//   * ЗапрещеноИзменятьПароль   - Булево - определяет возможность пользователя изменять свой пароль.
//
//   * АутентификацияОС          - Булево - разрешена ли аутентификация средствами операционной системы.
//   * ПользовательОС            - Строка - имя соответствующей учетной записи пользователя операционной системы 
//                                          (не учитывается в учебной версии платформы).
//
//   * ОсновнойИнтерфейс         - Строка, Неопределено - имя основного интерфейса пользователя информационной базы
//                                         (из коллекции Метаданные.Интерфейсы).
//   * РежимЗапуска              - Строка, Неопределено - "Авто", "ОбычноеПриложение" или "УправляемоеПриложение".
//   * Язык                      - Строка, Неопределено - имя языка из коллекции Метаданные.Языки.
//   * Роли                      - Неопределено - роли не указаны.
//                               - Массив - коллекция имен ролей пользователя информационной базы.
//
Функция НовоеОписаниеПользователяИБ() Экспорт
	
	// Подготовка структур возвращаемых данных.
	Свойства = Новый Структура;
	
	Свойства.Вставить("УникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Свойства.Вставить("Имя",                       "");
	Свойства.Вставить("ПолноеИмя",                 "");
	Свойства.Вставить("АутентификацияOpenID",      Ложь);
	Свойства.Вставить("АутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("СтарыйПароль",              Неопределено);
	Свойства.Вставить("Пароль",                    Неопределено);
	Свойства.Вставить("СохраняемоеЗначениеПароля", Неопределено);
	Свойства.Вставить("ПарольУстановлен",          Ложь);
	Свойства.Вставить("ЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("АутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательОС",            "");
	
	Свойства.Вставить("ОсновнойИнтерфейс",
		?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	
	Свойства.Вставить("РежимЗапуска",              "Авто");
	
	Свойства.Вставить("Язык",
		?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Свойства.Вставить("Роли", Неопределено);
	
	Возврат Свойства;
	
КонецФункции

// Возвращает свойства пользователя информационной базы в виде структуры.
// Если пользователь с указанным идентификатором или именем не существует, то возвращается Неопределено.
//
// Параметры:
//  ИмяИлиИдентификатор  - Строка, УникальныйИдентификатор - имя или идентификатор пользователя ИБ.
//
// Возвращаемое значение:
//  Структура, Неопределено - свойства пользователя, см. Пользователи.НовоеОписаниеПользователяИБ.
//                            Неопределено, если пользователь с указанным идентификатором или именем не существует.
//
Функция СвойстваПользователяИБ(Знач ИмяИлиИдентификатор) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("Пользователи.СвойстваПользователяИБ", "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
		 
	Свойства = НовоеОписаниеПользователяИБ();
	Свойства.Роли = Новый Массив;
	
	Если ТипЗнч(ИмяИлиИдентификатор) = Тип("УникальныйИдентификатор") Тогда
		
		//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		//	МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		//	СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		//Иначе
			СеансЗапущенБезРазделителей = Истина;
		//КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено()
		   И СеансЗапущенБезРазделителей
		   И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()
		   И ИмяИлиИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
			
			ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		Иначе
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИмяИлиИдентификатор);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИмяИлиИдентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяИлиИдентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СкопироватьСвойстваПользователяИБ(Свойства, ПользовательИБ);
	Свойства.Вставить("ПользовательИБ", ПользовательИБ);
	Возврат Свойства;
	
КонецФункции


// Копирует значения свойств пользователя ИБ с преобразованием
// в/из строковых идентификаторов для основного интерфейса,
// языка, режима запуска и ролей.
//
//  Несуществующие свойства в источнике или приемнике не копируются.
//
//  Свойства Пароль и СохраняемоеЗначениеПароля не копируются, если
// значения в Источнике равно Неопределено.
//
//  Свойства АутентификацияОС, АутентификацияСтандартная,
// АутентификацияOpenID и ПользовательОС не переустанавливается,
// если совпадают, когда Приемник типа ПользовательИнформационнойБазы.
//
//  Свойства УникальныйИдентификатор, ПарольУстановлен, СтарыйПароль
// не копируются, если Приемник типа ПользовательИнформационнойБазы.
//
//  Преобразование выполняется только для типа Источника или Приемника.
// ПользовательИнформационнойБазы.
//
// Параметры:
//  Приемник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - подмножество
//                 свойств из НовоеОписаниеПользователяИБ().
//
//  Источник     - Структура, ПользовательИнформационнойБазы, ДанныеФормыКоллекция - как и приемник,
//                 но типы обратные, т.е. когда в Приемнике тип Структура, тогда в источнике НЕ Структура.
// 
//  КопируемыеСвойства  - Строка - список свойств через запятую, которые нужно скопировать (без префикса).
//  ИсключаемыеСвойства - Строка - список свойств через запятую, которые не нужно копировать (без префикса).
//  ПрефиксСвойств      - Строка - начальное имя для Источника или Приемника типа НЕ Структура.
//
Процедура СкопироватьСвойстваПользователяИБ(Приемник,
                                            Источник,
                                            КопируемыеСвойства = "",
                                            ИсключаемыеСвойства = "",
                                            ПрефиксСвойств = "") Экспорт
	
	ВсеСвойства = НовоеОписаниеПользователяИБ();
	
	Если ЗначениеЗаполнено(КопируемыеСвойства) Тогда
		СтруктураКопируемыхСвойств = Новый Структура(КопируемыеСвойства);
	Иначе
		СтруктураКопируемыхСвойств = ВсеСвойства;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеСвойства) Тогда
		СтруктураИсключаемыхСвойств = Новый Структура(ИсключаемыеСвойства);
	Иначе
		СтруктураИсключаемыхСвойств = Новый Структура;
	КонецЕсли;
	
	//Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
	//	СтруктураИсключаемыхСвойств.Вставить("АутентификацияОС");
	//	СтруктураИсключаемыхСвойств.Вставить("ПользовательОС");
	//КонецЕсли;
	
	ПарольУстановлен = Ложь;
	
	Для каждого КлючИЗначение Из ВсеСвойства Цикл
		Свойство = КлючИЗначение.Ключ;
		
		Если НЕ СтруктураКопируемыхСвойств.Свойство(Свойство)
		 ИЛИ СтруктураИсключаемыхСвойств.Свойство(Свойство) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ПользовательИнформационнойБазы") Тогда
			
			Если Свойство = "Пароль"
			 ИЛИ Свойство = "СтарыйПароль" Тогда
				
				ЗначениеСвойства = Неопределено;
				
			ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
				ЗначениеСвойства = ?(Источник.ОсновнойИнтерфейс = Неопределено,
				                     "",
				                     Источник.ОсновнойИнтерфейс.Имя);
			
			ИначеЕсли Свойство = "РежимЗапуска" Тогда
				ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(Источник.РежимЗапуска);
				ЗначениеСвойства = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
				
			ИначеЕсли Свойство = "Язык" Тогда
				ЗначениеСвойства = ?(Источник.Язык = Неопределено,
				                     "",
				                     Источник.Язык.Имя);
				
			ИначеЕсли Свойство = "Роли" Тогда
				
				ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
				Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
					Приемник.Роли = Новый Массив;
				Иначе
					Приемник.Роли.Очистить();
				КонецЕсли;
				
				Для каждого Роль Из Источник.Роли Цикл
					Приемник.Роли.Добавить(Роль.Имя);
				КонецЦикла;
				
				Продолжить;
			Иначе
				ЗначениеСвойства = Источник[Свойство];
			КонецЕсли;
			
			ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
			ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
			ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
		Иначе
			Если ТипЗнч(Источник) = Тип("Структура") Тогда
				Если Источник.Свойство(Свойство) Тогда
					ЗначениеСвойства = Источник[Свойство];
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, Новый ТаблицаЗначений);
				ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Источник);
				ЗначениеСвойства = ВременнаяСтруктура[ПолноеИмяСвойства];
				Если ТипЗнч(ЗначениеСвойства) = Тип("ТаблицаЗначений") Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
			
				Если Свойство = "УникальныйИдентификатор"
				 ИЛИ Свойство = "СтарыйПароль"
				 ИЛИ Свойство = "ПарольУстановлен" Тогда
					
					Продолжить;
					
				ИначеЕсли Свойство = "АутентификацияOpenID"
				      ИЛИ Свойство = "АутентификацияСтандартная"
				      ИЛИ Свойство = "АутентификацияОС"
				      ИЛИ Свойство = "ПользовательОС" Тогда
					
					Если Приемник[Свойство] <> ЗначениеСвойства Тогда
						Приемник[Свойство] = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Пароль" Тогда
					Если ЗначениеСвойства <> Неопределено Тогда
						Приемник.Пароль = ЗначениеСвойства;
						ПарольУстановлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Свойство = "СохраняемоеЗначениеПароля" Тогда
					Если ЗначениеСвойства <> Неопределено
					   И НЕ ПарольУстановлен Тогда
						Приемник.СохраняемоеЗначениеПароля = ЗначениеСвойства;
					КонецЕсли;
					
				ИначеЕсли Свойство = "ОсновнойИнтерфейс" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ЗначениеСвойства);
					Иначе
						Приемник.ОсновнойИнтерфейс = Неопределено;
					КонецЕсли;
				
				ИначеЕсли Свойство = "РежимЗапуска" Тогда
					Если ЗначениеСвойства = "Авто"
					 ИЛИ ЗначениеСвойства = "ОбычноеПриложение"
					 ИЛИ ЗначениеСвойства = "УправляемоеПриложение" Тогда
						
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ЗначениеСвойства];
					Иначе
						Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Язык" Тогда
					Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
						Приемник.Язык = Метаданные.Языки.Найти(ЗначениеСвойства);
					Иначе
						Приемник.Язык = Неопределено;
					КонецЕсли;
					
				ИначеЕсли Свойство = "Роли" Тогда
					Приемник.Роли.Очистить();
					Если ЗначениеСвойства <> Неопределено Тогда
						Для каждого ИмяРоли Из ЗначениеСвойства Цикл
							Роль = Метаданные.Роли.Найти(ИмяРоли);
							Если Роль <> Неопределено Тогда
								Приемник.Роли.Добавить(Роль);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если Свойство = "Имя"
					   И Приемник[Свойство] <> ЗначениеСвойства Тогда
					
						Если СтрДлина(ЗначениеСвойства) > 64 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |превышает длину 64 символа.'"),
								ЗначениеСвойства);
							
						ИначеЕсли СтрНайти(ЗначениеСвойства, ":") > 0 Тогда
							ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка записи пользователя информационной базы
								           |Имя (для входа): ""%1""
								           |содержит запрещенный символ "":"".'"),
								ЗначениеСвойства);
						КонецЕсли;
					КонецЕсли;
					Приемник[Свойство] = Источник[Свойство];
				КонецЕсли;
			Иначе
				Если Свойство = "Роли" Тогда
					
					ВременнаяСтруктура = Новый Структура("Роли", Новый ТаблицаЗначений);
					ЗаполнитьЗначенияСвойств(ВременнаяСтруктура, Приемник);
					Если ТипЗнч(ВременнаяСтруктура.Роли) = Тип("ТаблицаЗначений") Тогда
						Продолжить;
					ИначеЕсли ВременнаяСтруктура.Роли = Неопределено Тогда
						Приемник.Роли = Новый Массив;
					Иначе
						Приемник.Роли.Очистить();
					КонецЕсли;
					
					Если Источник.Роли <> Неопределено Тогда
						Для каждого Роль Из Источник.Роли Цикл
							Приемник.Роли.Добавить(Роль.Имя);
						КонецЦикла;
					КонецЕсли;
					Продолжить;
					
				ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
					ПолноеИмяСвойства = ПрефиксСвойств + Свойство;
				Иначе
					ПолноеИмяСвойства = Свойство;
				КонецЕсли;
				ВременнаяСтруктура = Новый Структура(ПолноеИмяСвойства, ЗначениеСвойства);
				ЗаполнитьЗначенияСвойств(Приемник, ВременнаяСтруктура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает назначение ролей, указанное разработчиками библиотек и прикладных решений.
// Область применения: только для автоматизированной проверки конфигурации.
//
// Возвращаемое значение:
//  Структура - смотри одноименный параметр в процедуре ПриОпределенииНазначенияРолей
//              общего модуля ПользователиПереопределяемый.
//
Функция НазначениеРолей() Экспорт
	
	НазначениеРолей = Новый Структура;
	НазначениеРолей.Вставить("ТолькоДляАдминистраторовСистемы",                Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляПользователейСистемы",                  Новый Массив);
	НазначениеРолей.Вставить("ТолькоДляВнешнихПользователей",                  Новый Массив);
	НазначениеРолей.Вставить("СовместноДляПользователейИВнешнихПользователей", Новый Массив);
	
	//ПользователиПереопределяемый.ПриОпределенииНазначенияРолей(НазначениеРолей);
	//ИнтеграцияСтандартныхПодсистем.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	Возврат НазначениеРолей;
	
КонецФункции

// Проверяет наличие хотя бы одного вида аутентификации у пользователя ИБ.
//
// Параметры:
//  ОписаниеПользователяИБ - УникальныйИдентификатор - идентификатор пользователя ИБ.
//                         - Структура - содержит 3 свойства аутентификации:
//                             * АутентификацияСтандартная - Булево - аутентификация 1С:Предприятия.
//                             * АутентификацияОС          - Булево - аутентификация операционной системы.
//                             * АутентификацияOpenID      - Булево - аутентификация OpenID.
//                         - ПользовательИнформационнойБазы       - пользователь ИБ.
//                         - СправочникСсылка.Пользователи        - пользователь.
//                         - СправочникСсылка.ВнешниеПользователи - внешний пользователь.
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одно свойство аутентификации равно Истина.
//
Функция ВходВПрограммуРазрешен(ОписаниеПользователяИБ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УникальныйИдентификатор = Неопределено;
	
	Если ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.Пользователи")
	 //Или ТипЗнч(ОписаниеПользователяИБ) = Тип("СправочникСсылка.ВнешниеПользователи") 
	 Тогда
		
		УникальныйИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОписаниеПользователяИБ, "ИдентификаторПользователяИБ");
		
		Если ТипЗнч(ОписаниеПользователяИБ) <> Тип("УникальныйИдентификатор") Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОписаниеПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
		УникальныйИдентификатор = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(УникальныйИдентификатор);
		
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ОписаниеПользователяИБ;
	КонецЕсли;
	
	Возврат ПользовательИБ.АутентификацияСтандартная
		ИЛИ ПользовательИБ.АутентификацияОС
		ИЛИ ПользовательИБ.АутентификацияOpenID;
	
КонецФункции

// Формирует краткое описание ошибки, которое увидит пользователь,
// а также может записать подробное описание ошибки в журнал регистрации.
//
// Параметры:
//  ШаблонОшибки       - Шаблон, содержащий параметр "%1" для представления пользователя ИБ и
//                       параметр %2 для описания ошибки.
//
//  ИмяДляВхода        - имя пользователя информационной базы, используемое для входа.
//
//  ИдентификаторПользователяИБ - Неопределено, УникальныйИдентификатор.
//
//  ИнформацияОбОшибке - ИнформацияОбОшибке.
//
//  ЗаписатьВЖурнал    - Булево. Если Истина, то выполняется запись подробного описания ошибки
//                       в журнал регистрации.
//
// Возвращаемое значение:
//  Строка - описание ошибки для просмотра пользователю.
//
Функция ОписаниеОшибкиПриЗаписиПользователяИБ(ШаблонОшибки,
                                              ИмяДляВхода,
                                              ИдентификаторПользователяИБ,
                                              ИнформацияОбОшибке = Неопределено,
                                              ЗаписатьВЖурнал = Истина)
	
	Если ЗаписатьВЖурнал Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Пользователи.Ошибка записи пользователя ИБ'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
				"""" + ИмяДляВхода + """ (" + ?(ЗначениеЗаполнено(ИдентификаторПользователяИБ),
					НСтр("ru = 'Новый'"), Строка(ИдентификаторПользователяИБ)) + ")",
				?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке))));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, """" + ИмяДляВхода + """",
		?(ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке), Строка(ИнформацияОбОшибке)));
	
КонецФункции

// Записывает новые значения свойств указанного пользователя ИБ, либо создает нового пользователя ИБ.
// Если пользователь не существует, а также при попытке создания существующего пользователя будет вызвано исключение.
//
// Параметры:
//  ИмяИлиИдентификатор - Строка, УникальныйИдентификатор - имя или уникальный идентификатор пользователя ИБ, свойства 
//                                                          которого нужно установить. Либо имя нового пользователя ИБ.
//  ОбновляемыеСвойства - Структура - см. Пользователи.НовоеОписаниеПользователяИБ.
//    Если какое-либо свойство в структуре не задано, то используется прочитанное или начальное значение.
//    Следующие свойства структуры имеют особенности:
//      * ПользовательИБ          - ПользовательИнформационнойБазы - возвращаемый параметр: пользователь ИБ, свойства 
//                                  которого были записаны. 
//      * УникальныйИдентификатор - УникальныйИдентификатор - возвращаемый параметр: уникальный идентификатор 
//                                  записанного пользователя ИБ.
//      * СтарыйПароль            - Неопределено, Строка - если заданный пароль
//                                  не совпадет с существующим, то будет вызвано исключение.
//
//  СоздатьНового - Булево - указать Истина, чтобы создать нового пользователя ИБ с именем ИмяИлиИдентификатор.
//
//  ЭтоВнешнийПользователь - Булево - указать Истина, если пользователь ИБ соответствует внешнему пользователю
//                                    (элементу справочника ВнешниеПользователи).
//
Процедура УстановитьСвойстваПользователяИБ(Знач ИмяИлиИдентификатор, Знач ОбновляемыеСвойства,
	Знач СоздатьНового = Ложь, Знач ЭтоВнешнийПользователь = Ложь) Экспорт
	
	ИмяПроцедуры = "Пользователи.УстановитьСвойстваПользователяИБ";
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ИмяИлиИдентификатор",
		ИмяИлиИдентификатор, Новый ОписаниеТипов("Строка, УникальныйИдентификатор"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ОбновляемыеСвойства", ОбновляемыеСвойства, Тип("Структура"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "СоздатьНового", СоздатьНового, Тип("Булево"));
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(ИмяПроцедуры, "ЭтоВнешнийПользователь", ЭтоВнешнийПользователь, Тип("Булево"));
		 
	СтарыеСвойства = СвойстваПользователяИБ(ИмяИлиИдентификатор);
	ПользовательСуществует = СтарыеСвойства <> Неопределено;
	Если ПользовательСуществует Тогда
		ПользовательИБ = СтарыеСвойства.ПользовательИБ;
	Иначе	
		ПользовательИБ = Неопределено;
		СтарыеСвойства = НовоеОписаниеПользователяИБ();
	КонецЕсли;	
		
	Если Не ПользовательСуществует Тогда
		
		Если Не СоздатьНового Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пользователь информационной базы ""%1"" не существует.'"),
				ИмяИлиИдентификатор);
		КонецЕсли;
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		
	Иначе
		
		Если СоздатьНового Тогда
			ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
				НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1"", так как он уже существует.'"),
				СтарыеСвойства.Имя,
				СтарыеСвойства.УникальныйИдентификатор);
		КонецЕсли;
		Если ОбновляемыеСвойства.Свойство("СтарыйПароль")
		   И ТипЗнч(ОбновляемыеСвойства.СтарыйПароль) = Тип("Строка") Тогда
			
			СтарыйПарольСовпадает = Ложь;
			
			ПользователиСлужебный.СохраняемоеЗначениеСтрокиПароля(
				ОбновляемыеСвойства.СтарыйПароль,
				СтарыеСвойства.УникальныйИдентификатор,
				СтарыйПарольСовпадает);
			
			Если Не СтарыйПарольСовпадает Тогда
				ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
					НСтр("ru = 'При записи пользователя информационной базы ""%1"" старый пароль указан не верно.'"),
					СтарыеСвойства.Имя,
					СтарыеСвойства.УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовка новых значений свойств.
	НовыеСвойства = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтарыеСвойства);
	Для каждого КлючИЗначение Из НовыеСвойства Цикл
		Если ОбновляемыеСвойства.Свойство(КлючИЗначение.Ключ)
		   И ОбновляемыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			НовыеСвойства[КлючИЗначение.Ключ] = ОбновляемыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	СкопироватьСвойстваПользователяИБ(ПользовательИБ, НовыеСвойства);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	КонецЕсли;
	
	// Попытка записи нового или изменение существующего пользователя ИБ.
	Попытка
		ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, ЭтоВнешнийПользователь);
	Исключение
		ВызватьИсключение ОписаниеОшибкиПриЗаписиПользователяИБ(
			НСтр("ru = 'Не удалось записать свойства пользователя информационной базы ""%1"" по причине:
			           |%2.'"),
			ПользовательИБ.Имя,
			?(ПользовательСуществует, СтарыеСвойства.УникальныйИдентификатор, Неопределено),
			ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(СтарыеСвойства.Имя) И СтарыеСвойства.Имя <> НовыеСвойства.Имя Тогда
		// Перемещение настроек пользователя
		ПользователиСлужебный.СкопироватьНастройкиПользователя(СтарыеСвойства.Имя, НовыеСвойства.Имя, Истина);
	КонецЕсли;
	
	Если СоздатьНового Тогда
		ПользователиСлужебный.УстановитьНачальныеНастройки(ПользовательИБ.Имя, ЭтоВнешнийПользователь);
	КонецЕсли;
	
	//ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, НовыеСвойства);
	ОбновляемыеСвойства.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
	ОбновляемыеСвойства.Вставить("ПользовательИБ", ПользовательИБ);
	
КонецПроцедуры
