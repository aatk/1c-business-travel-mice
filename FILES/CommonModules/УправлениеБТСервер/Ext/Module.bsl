

Функция ПолучитьГУИД() Экспорт
	Возврат Строка(Новый УникальныйИдентификатор()); 
КонецФункции

Функция ПолучитьГУИДПоСсылке(Ссылка) Экспорт
	
	GUID = Ссылка.УникальныйИдентификатор();
	Возврат GUID; 
	
КонецФункции

Функция СоздатьКлюч(Наименование) Экспорт
	//Первым символом ключа должна быть буква или символ подчеркивания (_). 
	//Каждый из последующих символов может быть буквой, цифрой или символом подчеркивания (_).
	НовоеИмя = "_";
	Индекс = 0;
	Пока Индекс < СтрДлина(Наименование) Цикл
		Индекс = Индекс +1;
		Символ = НРег(Сред(Наименование, Индекс, 1));
		Если (Символ >= "а" И Символ <= "я") ИЛИ 
			(Символ >= "a" И Символ <= "z") ИЛИ 
			(Символ >= "0" И Символ <= "9") Тогда 
			НовоеИмя = НовоеИмя + Символ;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат НовоеИмя;
КонецФункции

Функция ПолучитьОтборОбъекта(ЭлементОтбора)
	
	ОтборJSON = ЭлементОтбора.Условие;
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ОтборJSON);
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
	ОбъектXDTO.Проверить();
	
	ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	
	Возврат ДЗ; 
	
КонецФункции





Функция ПолучитьШаблонНоменклатуры(Период, Номенклатура, Партнер, Контрагент, Договор, УслугаСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("НоменклатураБТ", Номенклатура);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеНоменклатурыСрезПоследних.Период КАК Период,
	               |	ОписаниеНоменклатурыСрезПоследних.НоменклатураБТ КАК НоменклатураБТ,
	               |	ОписаниеНоменклатурыСрезПоследних.Партнер КАК Партнер,
	               |	ОписаниеНоменклатурыСрезПоследних.Контрагент КАК Контрагент,
	               |	ОписаниеНоменклатурыСрезПоследних.Договор КАК Договор,
	               |	ОписаниеНоменклатурыСрезПоследних.ШаблонОписания КАК ШаблонОписания,
	               |	1 КАК Приоритет,
	               |	ОписаниеНоменклатурыСрезПоследних.РасширенныйОтбор КАК РасширенныйОтбор
	               |ПОМЕСТИТЬ ВсеЗаписи
	               |ИЗ
	               |	РегистрСведений.ОписаниеНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			НоменклатураБТ = &НоменклатураБТ
	               |				И Партнер = &Партнер
	               |				И Контрагент = &Контрагент
	               |				И Договор = &Договор) КАК ОписаниеНоменклатурыСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОписаниеНоменклатурыСрезПоследних.Период,
	               |	ОписаниеНоменклатурыСрезПоследних.НоменклатураБТ,
	               |	ОписаниеНоменклатурыСрезПоследних.Партнер,
	               |	ОписаниеНоменклатурыСрезПоследних.Контрагент,
	               |	ОписаниеНоменклатурыСрезПоследних.Договор,
	               |	ОписаниеНоменклатурыСрезПоследних.ШаблонОписания,
	               |	2,
	               |	ОписаниеНоменклатурыСрезПоследних.РасширенныйОтбор
	               |ИЗ
	               |	РегистрСведений.ОписаниеНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			НоменклатураБТ = &НоменклатураБТ
	               |				И Партнер = &Партнер
	               |				И Контрагент = &Контрагент
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)) КАК ОписаниеНоменклатурыСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОписаниеНоменклатурыСрезПоследних.Период,
	               |	ОписаниеНоменклатурыСрезПоследних.НоменклатураБТ,
	               |	ОписаниеНоменклатурыСрезПоследних.Партнер,
	               |	ОписаниеНоменклатурыСрезПоследних.Контрагент,
	               |	ОписаниеНоменклатурыСрезПоследних.Договор,
	               |	ОписаниеНоменклатурыСрезПоследних.ШаблонОписания,
	               |	3,
	               |	ОписаниеНоменклатурыСрезПоследних.РасширенныйОтбор
	               |ИЗ
	               |	РегистрСведений.ОписаниеНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			НоменклатураБТ = &НоменклатураБТ
	               |				И Партнер = &Партнер
	               |				И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)) КАК ОписаниеНоменклатурыСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОписаниеНоменклатурыСрезПоследних.Период,
	               |	ОписаниеНоменклатурыСрезПоследних.НоменклатураБТ,
	               |	ОписаниеНоменклатурыСрезПоследних.Партнер,
	               |	ОписаниеНоменклатурыСрезПоследних.Контрагент,
	               |	ОписаниеНоменклатурыСрезПоследних.Договор,
	               |	ОписаниеНоменклатурыСрезПоследних.ШаблонОписания,
	               |	4,
	               |	ОписаниеНоменклатурыСрезПоследних.РасширенныйОтбор
	               |ИЗ
	               |	РегистрСведений.ОписаниеНоменклатуры.СрезПоследних(
	               |			&Период,
	               |			НоменклатураБТ = &НоменклатураБТ
	               |				И Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |				И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)) КАК ОписаниеНоменклатурыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВсеЗаписи.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ПриоритетМинимум
	               |ИЗ
	               |	ВсеЗаписи КАК ВсеЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеЗаписи.Период КАК Период,
	               |	ВсеЗаписи.НоменклатураБТ КАК НоменклатураБТ,
	               |	ВсеЗаписи.Партнер КАК Партнер,
	               |	ВсеЗаписи.Контрагент КАК Контрагент,
	               |	ВсеЗаписи.Договор КАК Договор,
	               |	ВсеЗаписи.ШаблонОписания КАК ШаблонОписания,
	               |	ВсеЗаписи.Приоритет КАК Приоритет,
	               |	ВсеЗаписи.РасширенныйОтбор КАК РасширенныйОтбор
	               |ИЗ
	               |	ВсеЗаписи КАК ВсеЗаписи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПриоритетМинимум КАК ПриоритетМинимум
	               |		ПО ВсеЗаписи.Приоритет = ПриоритетМинимум.Приоритет
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ШаблонТекста = "";
	Если Выгрузка.Количество() = 1 Тогда
		ШаблонТекста = Выгрузка[0].ШаблонОписания;
	ИначеЕсли Выгрузка.Количество() > 1 Тогда
		//
		Для Каждого СтрокаСОписанием ИЗ Выгрузка Цикл
			
			Если ЗначениеЗаполнено(СтрокаСОписанием.РасширенныйОтбор) Тогда
				Если УслугаСсылка <> Неопределено Тогда
					Условие = "";
					Расшифровка = Неопределено;
					ДЗ = ПолучитьОтборОбъекта(СтрокаСОписанием.РасширенныйОтбор);
					Результат = ПодходящееУсловие(УслугаСсылка, "", ДЗ, Условие, Расшифровка);
					Если НЕ Результат Тогда
						//Подходит условие
						ШаблонТекста = СтрокаСОписанием.ШаблонОписания;
						Прервать;
					КонецЕсли;
				КонецЕсли;				
			Иначе
				ШаблонТекста = СтрокаСОписанием.ШаблонОписания;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШаблонТекста;	
	
КонецФункции

Функция ПолучитьОписание(Объект, ВхНоменклатураИлиПолитика, Характеристики, ЭкстраПоля, ДляНоменклатуры = Истина) Экспорт
	
	Услуга = Документы.Услуга.ПустаяСсылка(); 
	Если ТипЗнч(ВхНоменклатураИлиПолитика) = Тип("ДокументСсылка.Услуга") Тогда  
		НоменклатураИлиПолитика = ВхНоменклатураИлиПолитика.НоменклатураБТ;
		Услуга = ВхНоменклатураИлиПолитика; 
	Иначе
		НоменклатураИлиПолитика = ВхНоменклатураИлиПолитика;
		Услуга = Объект.Ссылка;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура("Дата, Партнер, Контрагент, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыОписания,Объект);
	                      
	Если ДляНоменклатуры Тогда 
		ШаблонТекста = ПолучитьШаблонНоменклатуры(ПараметрыОписания.Дата, НоменклатураИлиПолитика, ПараметрыОписания.Партнер, ПараметрыОписания.Контрагент, ПараметрыОписания.Договор, Услуга); //"[Парамерт1] или f[ИмяФункции(Параметры)] или f[ИмяФункции]";
	Иначе
		ШаблонТекста = НоменклатураИлиПолитика.ШаблонОписания; //ПолучитьШаблонПолитики(ПараметрыОписания.Дата, НоменклатураИлиПолитика, ПараметрыОписания.Партнер, ПараметрыОписания.Контрагент, ПараметрыОписания.Договор);		
	КонецЕсли;
	КоличествоФункций = СтрЧислоВхождений(ШаблонТекста,"f[");
	
	МассивФункций = Новый Структура; 
	ШаблонТекста2 = ШаблонТекста;
	ШаблонПоиска = ШаблонТекста;
	Для Индекс = 1 ПО КоличествоФункций Цикл
		ИндексНачалаФункции = СтрНайти(ШаблонТекста,"f[",,,Индекс);
		ШаблонПоиска = Сред(ШаблонТекста, ИндексНачалаФункции+2, СтрДлина(ШаблонТекста));
		ИндексКонцаФункции = СтрНайти(ШаблонПоиска,"]");
		ВызовФункции = Сред(ШаблонТекста, ИндексНачалаФункции+2, ИндексКонцаФункции-1);
		//
		Если СтрЧислоВхождений(ВызовФункции,"(")>0 Тогда
			ИмяФункции = Лев(ВызовФункции,СтрНайти(ВызовФункции,"(")-1);
		Иначе
			ИмяФункции = ВызовФункции;
		КонецЕсли;
		
		Если МассивФункций.Свойство(ИмяФункции) Тогда
			ИндексИмени = 1;
			Пока МассивФункций.Свойство(ИмяФункции+Строка(ИндексИмени)) Цикл
				ИндексИмени = ИндексИмени + 1;
			КонецЦикла;
			ИмяФункции = ИмяФункции+Строка(ИндексИмени);
		КонецЕсли;
		
		МассивФункций.Вставить(ИмяФункции, ВызовФункции);		
		ШаблонТекста2 = СтрЗаменить(ШаблонТекста2, "f["+ВызовФункции+"]", "["+ИмяФункции+"]"); 
	КонецЦикла;
	
	ТабДок = Новый ТекстовыйДокумент;//ТабличныйДокумент;	
	ТабДок.УстановитьТекст(ШаблонТекста2);
	
	СписокХарактеристик = Новый Структура();
	Для Каждого СтрокаХар ИЗ Характеристики Цикл
		СписокХарактеристик.Вставить(СтрокаХар.Характеристика.КлючПоиска,СтрокаХар.Значение);
	КонецЦикла;
	Для Каждого СтрокаХар ИЗ ЭкстраПоля Цикл
		СписокХарактеристик.Вставить(СтрокаХар.Характеристика.КлючПоиска,СтрокаХар.Значение);
	КонецЦикла;
	
	СписокРезультатовФунк = Новый Структура();
	Для Каждого ВнешняяФункция ИЗ МассивФункций Цикл
		Результат = ВыполнитьФункцию(ВнешняяФункция.Ключ, Объект, Услуга, НоменклатураИлиПолитика, СписокХарактеристик);
		СписокРезультатовФунк.Вставить(ВнешняяФункция.Ключ, Результат);
	КонецЦикла;
	
	ТабДок.Параметры.Заполнить(СписокХарактеристик);	
	ТабДок.Параметры.Заполнить(СписокРезультатовФунк);	
	Результат = ТабДок.ПолучитьТекст();
	
	Для Каждого ПараметрДок ИЗ СписокХарактеристик Цикл
		Результат = СтрЗаменить(Результат, "["+ПараметрДок.Ключ+"]", ПараметрДок.Значение); 
	КонецЦикла;
	Для Каждого ПараметрДок ИЗ СписокРезультатовФунк Цикл
		Результат = СтрЗаменить(Результат, "["+ПараметрДок.Ключ+"]", ПараметрДок.Значение); 
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ЭтоИмя(Шаблон, Индекс, СпередиСзади)
	Если СпередиСзади = 0 Тогда
		СледующийСимвол = Сред(Шаблон, Индекс+1, 1);
	Иначе
		СледующийСимвол = Сред(Шаблон, Индекс-2, 1);
	КонецЕсли;
	
	Если СледующийСимвол = "_" ИЛИ 
		(СледующийСимвол > "a" И СледующийСимвол < "z") ИЛИ 
		(СледующийСимвол > "A" И СледующийСимвол < "Z") ИЛИ 
		(СледующийСимвол > "А" И СледующийСимвол < "Я") ИЛИ 
		(СледующийСимвол > "а" И СледующийСимвол < "я") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;		
КонецФункции

Функция СтрЗаменитьСУмом(Знач Текст, Что, НаЧто, СпередиСзади = 0)
	
	Выполнять = Истина;
	ТекущееПоложение = 1;
	Количество = СтрЧислоВхождений(Текст, Что);
	Пока Количество>0 И Выполнять Цикл
		НайденныйЭлемент = СтрНайти(Текст, Что, НаправлениеПоиска.СНачала, ТекущееПоложение); 
		Количество = Количество -1;
		Если НайденныйЭлемент = 0 Тогда
			Выполнять = Ложь;
		Иначе
			Если ЭтоИмя(Текст, НайденныйЭлемент, СпередиСзади) Тогда
				Текст = Сред(Текст, 0, НайденныйЭлемент-1) + НаЧто + Сред(Текст, НайденныйЭлемент+СтрДлина(Что));
			КонецЕсли;
		КонецЕсли;
		ТекущееПоложение = ?( НайденныйЭлемент+1 > СтрДлина(Текст),  СтрДлина(Текст), НайденныйЭлемент+1);
	КонецЦикла;
	
	Возврат Текст;
КонецФункции

Функция ПолучитьМассивПеременныхВШаблоне(ШаблонТекста) Экспорт
	
	МассивФункций = Новый Структура;
	МассивНастроек = Новый Структура;
	КоличествоФункций = СтрЧислоВхождений(ШаблонТекста,"f[");	
	КоличествоНастроек = СтрЧислоВхождений(ШаблонТекста,"n[");	
	ШаблонТекста2 = ШаблонТекста;
	ШаблонПоиска = ШаблонТекста;
	Для Индекс = 1 ПО КоличествоФункций Цикл
		ИндексНачалаФункции = СтрНайти(ШаблонТекста,"f[",,,Индекс);
		ШаблонПоиска = Сред(ШаблонТекста, ИндексНачалаФункции+2, СтрДлина(ШаблонТекста));
		ИндексКонцаФункции = СтрНайти(ШаблонПоиска,"]");
		ВызовФункции = Сред(ШаблонТекста, ИндексНачалаФункции+2, ИндексКонцаФункции-1);
		//
		Если СтрЧислоВхождений(ВызовФункции,"(")>0 Тогда
			ИмяФункции = Лев(ВызовФункции, СтрНайти(ВызовФункции,"(")-1);
			//Статические параметры
			НС = СтрНайти(ВызовФункции,"(");
			КС = СтрНайти(ВызовФункции,")");
			ПараметрыСтрокой = Сред(ВызовФункции, НС+1, КС-НС-1);
			//СтатическиеПараметры = 
			//ПараметрыСтрокой = Лев(СтатическиеПараметры, СтрНайти(СтатическиеПараметры,")")-1); 
			
			ПараметрыФункции = СтрРазделить(ПараметрыСтрокой, ",", Истина);
			
			ВызовФункцииСтрокой = ВызовФункции;
			ВызовФункции = Новый Структура("ИмяФункции, ПараметрыФункции", ИмяФункции, ПараметрыФункции);
		Иначе
			ВызовФункцииСтрокой = ВызовФункции;
			ИмяФункции = ВызовФункции;
			ВызовФункции = Новый Структура("ИмяФункции, ПараметрыФункции", ИмяФункции, Новый Массив);
		КонецЕсли;
		
		Если МассивФункций.Свойство(ИмяФункции) Тогда
			ИндексИмени = 1;
			Пока МассивФункций.Свойство(ИмяФункции+Строка(ИндексИмени)) Цикл
				ИндексИмени = ИндексИмени + 1;
			КонецЦикла;
			ИмяФункции = ИмяФункции+Строка(ИндексИмени);
		КонецЕсли;
		
		МассивФункций.Вставить(ИмяФункции, ВызовФункции);		
		ШаблонТекста2 = СтрЗаменить(ШаблонТекста2, "f["+ВызовФункцииСтрокой+"]", "{"+ИмяФункции+"}"); 
	КонецЦикла;
	
	Для Индекс = 1 ПО КоличествоНастроек Цикл
		ИндексНачалаФункции = СтрНайти(ШаблонТекста,"n[",,,Индекс);
		ШаблонПоиска = Сред(ШаблонТекста, ИндексНачалаФункции+2, СтрДлина(ШаблонТекста));
		ИндексКонцаФункции = СтрНайти(ШаблонПоиска,"]");
		ВызовФункции = Сред(ШаблонТекста, ИндексНачалаФункции+2, ИндексКонцаФункции-1);
		//
		Если СтрЧислоВхождений(ВызовФункции,"(")>0 Тогда
			ИмяФункции = Лев(ВызовФункции, СтрНайти(ВызовФункции,"(")-1);
			//Статические параметры
			СтатическиеПараметры = Прав(ВызовФункции, СтрНайти(ВызовФункции,"(")-1);
			ПараметрыСтрокой = Лев(СтатическиеПараметры, СтрНайти(СтатическиеПараметры,")")-1); 
			
			ПараметрыФункции = СтрРазделить(ПараметрыСтрокой, ",", Истина);
			
			ВызовФункцииСтрокой = ВызовФункции;
			ВызовФункции = Новый Структура("ИмяФункции, ПараметрыФункции", ИмяФункции, ПараметрыФункции);
		Иначе
			ВызовФункцииСтрокой = ВызовФункции;
			ИмяФункции = ВызовФункции;
			ВызовФункции = Новый Структура("ИмяФункции, ПараметрыФункции", ИмяФункции, Новый Массив);
		КонецЕсли;
		
		Если МассивНастроек.Свойство(ИмяФункции) Тогда
			ИндексИмени = 1;
			Пока МассивНастроек.Свойство(ИмяФункции+Строка(ИндексИмени)) Цикл
				ИндексИмени = ИндексИмени + 1;
			КонецЦикла;
			ИмяФункции = ИмяФункции+Строка(ИндексИмени);
		КонецЕсли;
		
		МассивНастроек.Вставить(ИмяФункции, ВызовФункции);		
		ШаблонТекста2 = СтрЗаменить(ШаблонТекста2, "n["+ВызовФункцииСтрокой+"]", "{"+ИмяФункции+"}"); 
	КонецЦикла;
	
	ШаблонТекста = ШаблонТекста2;
	МассивРеквизитов = Новый Структура; 
	КоличествоРеквизитов = СтрЧислоВхождений(ШаблонТекста,"[");	
	ШаблонПоиска = ШаблонТекста2;
	Для Индекс = 1 ПО КоличествоРеквизитов Цикл
		ИндексНачалаФункции = СтрНайти(ШаблонТекста,"[",,,Индекс);
		ШаблонПоиска = Сред(ШаблонТекста, ИндексНачалаФункции+1, СтрДлина(ШаблонТекста));
		ИндексКонцаФункции = СтрНайти(ШаблонПоиска,"]");
		ВызовФункции = Сред(ШаблонТекста, ИндексНачалаФункции+1, ИндексКонцаФункции-1);
		//
		Если ЭтоИмя(СокрЛП(ВызовФункции), 0, 0) Тогда
			ИмяФункции = ВызовФункции;
			
			Если МассивРеквизитов.Свойство(ИмяФункции) Тогда
				ИндексИмени = 1;
				Пока МассивРеквизитов.Свойство(ИмяФункции+Строка(ИндексИмени)) Цикл
					ИндексИмени = ИндексИмени + 1;
				КонецЦикла;
				ИмяФункции = ИмяФункции+Строка(ИндексИмени);
			КонецЕсли;
			
			МассивРеквизитов.Вставить(ИмяФункции, ВызовФункции);		
			ШаблонТекста2 = СтрЗаменить(ШаблонТекста2, "["+ВызовФункции+"]", "{"+ИмяФункции+"}"); 
		КонецЕсли;
	КонецЦикла;
	
	ШаблонТекста2 = СтрЗаменитьСУмом(ШаблонТекста2, "{", "[", 0); 
	ШаблонТекста2 = СтрЗаменитьСУмом(ШаблонТекста2, "}", "]", 1); 
	
	Возврат Новый Структура("ШаблонТекста, Реквизиты, Функции, Настройки", ШаблонТекста2, МассивРеквизитов, МассивФункций, МассивНастроек)
КонецФункции

Функция ВыполнитьФункцию(Знач ИмяФункции, Знач Объект, Знач Услуга, Знач НоменклатураИлиПолитика, Знач Характеристики);
	
	Результат = Неопределено;
	Элемент = Справочники.ФункцииОписания.НайтиПоНаименованию(ИмяФункции,Истина);
	Если ЗначениеЗаполнено(Элемент) Тогда
		Выполнить(Элемент.КодФункции);
	Иначе
		
		Элемент = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", ИмяФункции);
		Если ЗначениеЗаполнено(Элемент) Тогда
			Выполнить(Элемент.КодФункции);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции


Функция ВыполнитьПростуюФункцию(Знач СсылкаФункции, Параметры) Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(СсылкаФункции) = Тип("Строка") ТОгда
		СсылкаФункции = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", СсылкаФункции);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СсылкаФункции) Тогда
		Выполнить(СсылкаФункции.КодФункции);
	Конецесли;
	Возврат Результат;
	
КонецФункции


Функция ПолучитьТаблицуЭкстраПолейПоОтбору(ДанныеОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДанныеОтбора.Дата);
	Запрос.УстановитьПараметр("Партнер", ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор", ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Командируемый", ДанныеОтбора.Командируемый);
	
	Запрос.УстановитьПараметр("ПустойПартнер", Справочники.Партнеры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтношениеЭкстраПолейСрезПоследних.Период,
	               |	ОтношениеЭкстраПолейСрезПоследних.Партнер,
	               |	ОтношениеЭкстраПолейСрезПоследних.Контрагент,
	               |	ОтношениеЭкстраПолейСрезПоследних.Договор,
	               |	ОтношениеЭкстраПолейСрезПоследних.Командируемый,
	               |	ОтношениеЭкстраПолейСрезПоследних.Характеристика,
	               |	ОтношениеЭкстраПолейСрезПоследних.ЗначениеПоУмолчанию,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ВсеВозможныеХарактеристики
	               |ИЗ
	               |	РегистрСведений.ОтношениеЭкстраПолей.СрезПоследних(
	               |			&Дата,
	               |			(Партнер = &Партнер
	               |				ИЛИ Партнер = &ПустойПартнер)
	               |				И (Контрагент = &Контрагент
	               |					ИЛИ Контрагент = &ПустойКонтрагент)
	               |				И (Договор = &Договор
	               |					ИЛИ Договор = &ПустойДоговор)
	               |				И Командируемый = &Командируемый) КАК ОтношениеЭкстраПолейСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтношениеЭкстраПолейСрезПоследних.Период,
	               |	ОтношениеЭкстраПолейСрезПоследних.Партнер,
	               |	ОтношениеЭкстраПолейСрезПоследних.Контрагент,
	               |	ОтношениеЭкстраПолейСрезПоследних.Договор,
	               |	ОтношениеЭкстраПолейСрезПоследних.Командируемый,
	               |	ОтношениеЭкстраПолейСрезПоследних.Характеристика,
	               |	ОтношениеЭкстраПолейСрезПоследних.ЗначениеПоУмолчанию,
	               |	5
	               |ИЗ
	               |	РегистрСведений.ОтношениеЭкстраПолей.СрезПоследних(
	               |			&Дата,
	               |			(Партнер = &Партнер
	               |				ИЛИ Партнер = &ПустойПартнер)
	               |				И (Контрагент = &Контрагент
	               |					ИЛИ Контрагент = &ПустойКонтрагент)
	               |				И Договор = &Договор
	               |				И Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)) КАК ОтношениеЭкстраПолейСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтношениеЭкстраПолейСрезПоследних.Период,
	               |	ОтношениеЭкстраПолейСрезПоследних.Партнер,
	               |	ОтношениеЭкстраПолейСрезПоследних.Контрагент,
	               |	ОтношениеЭкстраПолейСрезПоследних.Договор,
	               |	ОтношениеЭкстраПолейСрезПоследних.Командируемый,
	               |	ОтношениеЭкстраПолейСрезПоследних.Характеристика,
	               |	ОтношениеЭкстраПолейСрезПоследних.ЗначениеПоУмолчанию,
	               |	10
	               |ИЗ
	               |	РегистрСведений.ОтношениеЭкстраПолей.СрезПоследних(
	               |			&Дата,
	               |			(Партнер = &Партнер
	               |				ИЛИ Партнер = &ПустойПартнер)
	               |				И Контрагент = &Контрагент
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)
	               |				И Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)) КАК ОтношениеЭкстраПолейСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтношениеЭкстраПолейСрезПоследних.Период,
	               |	ОтношениеЭкстраПолейСрезПоследних.Партнер,
	               |	ОтношениеЭкстраПолейСрезПоследних.Контрагент,
	               |	ОтношениеЭкстраПолейСрезПоследних.Договор,
	               |	ОтношениеЭкстраПолейСрезПоследних.Командируемый,
	               |	ОтношениеЭкстраПолейСрезПоследних.Характеристика,
	               |	ОтношениеЭкстраПолейСрезПоследних.ЗначениеПоУмолчанию,
	               |	15
	               |ИЗ
	               |	РегистрСведений.ОтношениеЭкстраПолей.СрезПоследних(
	               |			&Дата,
	               |			Партнер = &Партнер
	               |				И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)
	               |				И Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)) КАК ОтношениеЭкстраПолейСрезПоследних
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтношениеЭкстраПолейСрезПоследних.Период,
	               |	ОтношениеЭкстраПолейСрезПоследних.Партнер,
	               |	ОтношениеЭкстраПолейСрезПоследних.Контрагент,
	               |	ОтношениеЭкстраПолейСрезПоследних.Договор,
	               |	ОтношениеЭкстраПолейСрезПоследних.Командируемый,
	               |	ОтношениеЭкстраПолейСрезПоследних.Характеристика,
	               |	ОтношениеЭкстраПолейСрезПоследних.ЗначениеПоУмолчанию,
	               |	20
	               |ИЗ
	               |	РегистрСведений.ОтношениеЭкстраПолей.СрезПоследних(
	               |			&Дата,
	               |			Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |				И Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |				И Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяССылка)
	               |				И Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)) КАК ОтношениеЭкстраПолейСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеВозможныеХарактеристики.Партнер,
	               |	ВсеВозможныеХарактеристики.Контрагент,
	               |	ВсеВозможныеХарактеристики.Договор,
	               |	ВсеВозможныеХарактеристики.Командируемый,
	               |	ВсеВозможныеХарактеристики.Характеристика,
	               |	МИНИМУМ(ВсеВозможныеХарактеристики.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ СрезПоследнихХарактеристик
	               |ИЗ
	               |	ВсеВозможныеХарактеристики КАК ВсеВозможныеХарактеристики
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВсеВозможныеХарактеристики.Партнер,
	               |	ВсеВозможныеХарактеристики.Характеристика,
	               |	ВсеВозможныеХарактеристики.Командируемый,
	               |	ВсеВозможныеХарактеристики.Контрагент,
	               |	ВсеВозможныеХарактеристики.Договор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СрезПоследнихХарактеристик.Партнер,
	               |	СрезПоследнихХарактеристик.Контрагент,
	               |	СрезПоследнихХарактеристик.Договор,
	               |	СрезПоследнихХарактеристик.Командируемый,
	               |	СрезПоследнихХарактеристик.Характеристика,
	               |	СрезПоследнихХарактеристик.Приоритет,
	               |	ВсеВозможныеХарактеристики.ЗначениеПоУмолчанию
	               |ПОМЕСТИТЬ ПакетХарактеристик
	               |ИЗ
	               |	СрезПоследнихХарактеристик КАК СрезПоследнихХарактеристик
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВсеВозможныеХарактеристики КАК ВсеВозможныеХарактеристики
	               |		ПО СрезПоследнихХарактеристик.Партнер = ВсеВозможныеХарактеристики.Партнер
	               |			И СрезПоследнихХарактеристик.Контрагент = ВсеВозможныеХарактеристики.Контрагент
	               |			И СрезПоследнихХарактеристик.Договор = ВсеВозможныеХарактеристики.Договор
	               |			И СрезПоследнихХарактеристик.Командируемый = ВсеВозможныеХарактеристики.Командируемый
	               |			И СрезПоследнихХарактеристик.Характеристика = ВсеВозможныеХарактеристики.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПакетХарактеристик.Характеристика,
	               |	ПакетХарактеристик.ЗначениеПоУмолчанию КАК Значение
	               |ИЗ
	               |	ПакетХарактеристик КАК ПакетХарактеристик";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
	
КонецФункции

Функция ПолучитьТаблицуЭкстраПолей(Дата, Партнер = Неопределено, Контрагент = Неопределено, Договор = Неопределено, Командируемый = Неопределено) Экспорт
	
	Если Партнер = Неопределено Тогда
		Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагент.ПустаяСсылка();
	КонецЕсли; 
	Если Договор = Неопределено Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	Если  Командируемый = Неопределено Тогда
		Командируемый = Справочники.Командированные.ПустаяСсылка();
	КонецЕсли;  
	
	
	ДанныеОтбора = Новый Структура("Дата, Партнер, Контрагент, Договор, Командируемый", Дата, Партнер, Контрагент, Договор, Командируемый);
	
	Возврат ПолучитьТаблицуЭкстраПолейПоОтбору(ДанныеОтбора);
	
КонецФункции

Функция ЗаполнитьЭкстраПоляАвтоматически(УслугаОбъектСсылка, ТаблицаЭкстраПолей) Экспорт
	//
	
	//ТаблицаЭкстраПолей = Новый ТаблицаЗначений;	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер"		,УслугаОбъектСсылка.Партнер);
	Запрос.УстановитьПараметр("Контрагент"	,УслугаОбъектСсылка.Контрагент);
	Запрос.УстановитьПараметр("Договор"		,УслугаОбъектСсылка.Договор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтозаполнениеЭкстраПолейХранение.ЭкстраПоле,
	               |	АвтозаполнениеЭкстраПолейХранение.Отбор,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеПроверки,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеУстановки,
	               |	100 КАК Приоритет
	               |ПОМЕСТИТЬ ВсеУсловия
	               |ИЗ
	               |	РегистрСведений.АвтозаполнениеЭкстраПолейХранение КАК АвтозаполнениеЭкстраПолейХранение
	               |ГДЕ
	               |	АвтозаполнениеЭкстраПолейХранение.Партнер = &Партнер
	               |	И АвтозаполнениеЭкстраПолейХранение.Контрагент = &Контрагент
	               |	И АвтозаполнениеЭкстраПолейХранение.Договор = &Договор
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвтозаполнениеЭкстраПолейХранение.ЭкстраПоле,
	               |	АвтозаполнениеЭкстраПолейХранение.Отбор,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеПроверки,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеУстановки,
	               |	90
	               |ИЗ
	               |	РегистрСведений.АвтозаполнениеЭкстраПолейХранение КАК АвтозаполнениеЭкстраПолейХранение
	               |ГДЕ
	               |	АвтозаполнениеЭкстраПолейХранение.Партнер = &Партнер
	               |	И АвтозаполнениеЭкстраПолейХранение.Контрагент = &Контрагент
	               |	И АвтозаполнениеЭкстраПолейХранение.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АвтозаполнениеЭкстраПолейХранение.ЭкстраПоле,
	               |	АвтозаполнениеЭкстраПолейХранение.Отбор,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеПроверки,
	               |	АвтозаполнениеЭкстраПолейХранение.ЗначениеУстановки,
	               |	80
	               |ИЗ
	               |	РегистрСведений.АвтозаполнениеЭкстраПолейХранение КАК АвтозаполнениеЭкстраПолейХранение
	               |ГДЕ
	               |	АвтозаполнениеЭкстраПолейХранение.Партнер = &Партнер
	               |	И АвтозаполнениеЭкстраПолейХранение.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И АвтозаполнениеЭкстраПолейХранение.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВсеУсловия.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ МаксимальныйПриоритет
	               |ИЗ
	               |	ВсеУсловия КАК ВсеУсловия
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеУсловия.ЭкстраПоле,
	               |	ВсеУсловия.Отбор,
	               |	ВсеУсловия.ЗначениеПроверки,
	               |	ВсеУсловия.ЗначениеУстановки,
	               |	ВсеУсловия.Приоритет
	               |ИЗ
	               |	ВсеУсловия КАК ВсеУсловия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныйПриоритет КАК МаксимальныйПриоритет
	               |		ПО ВсеУсловия.Приоритет = МаксимальныйПриоритет.Приоритет";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЭП = ТаблицаЭкстраПолей.Найти(Выборка.ЭкстраПоле, "Характеристика");
		Если СтрокаЭП <> Неопределено Тогда
			//
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(Выборка.Отбор.Условие);
			ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
			ОбъектXDTO.Проверить();
			
			ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO); 
			Если ДЗ.Элементы.Количество() = 1 Тогда
				ДЗ.Элементы[0].ПравоеЗначение = Выборка.ЗначениеПроверки;
			КонецЕсли;
			
			Условие = "";
			Расшифровка = Неопределено;
			Состояние = ПодходящееУсловие(УслугаОбъектСсылка, "", ДЗ, Условие, Расшифровка);
			Если НЕ Состояние Тогда
				СтрокаЭП.Значение = Выборка.ЗначениеУстановки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции




#Область ТревелПолитики

Функция РекурсивныйОбход(Элемент, ВхТипГруппы = " И ") Экспорт
		
	ОписаниеRLS = "";
	Префикс = " ";
	Постфикс = " ";
	
	Если ТипЗнч(Элемент) = Тип("ДеревоЗначений") Тогда
		ЭтоГруппа = Истина;
		Префикс = " ( ";
		Постфикс = " ) ";
		ТипГруппы = ВхТипГруппы;
				
		Для Каждого ЭлементГруппы ИЗ Элемент.Строки Цикл
			ОписаниеЭлементаRLS = РекурсивныйОбход(ЭлементГруппы);
			Если Элемент.Строки.Количество()>1 И Элемент.Строки.Индекс(ЭлементГруппы) < Элемент.Строки.Количество()-1 Тогда
				ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS + ТипГруппы;
			Иначе
				ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Элемент.Строки.Количество() > 0 Тогда
			ЭтоГруппа = Истина;
			Префикс = " ( ";
			Постфикс = " ) ";
			Если Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				ТипГруппы = " И "
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				ТипГруппы = " ИЛИ "
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				ТипГруппы = " НЕ "
			КонецЕсли;
			
			Для Каждого ЭлементГруппы ИЗ Элемент.Строки Цикл
				ОписаниеЭлементаRLS = РекурсивныйОбход(ЭлементГруппы);
				Если Элемент.Строки.Количество()>1 И Элемент.Строки.Индекс(ЭлементГруппы) < Элемент.Строки.Количество()-1 Тогда
					ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS + ТипГруппы;
				Иначе
					ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS;
				КонецЕсли;
			КонецЦикла;
		Иначе
			//ЭтоЭлемент
			ВСЭлемента = Элемент.ВидСравнения;
			ВС = " = ";
			Если ВСЭлемента = ВидСравнения.Больше Тогда
				ВС = " > ";
			ИначеЕсли ВСЭлемента = ВидСравнения.БольшеИлиРавно Тогда
				ВС = " >= ";
			ИначеЕсли ВСЭлемента = ВидСравнения.Меньше Тогда
				ВС = " < ";
			ИначеЕсли ВСЭлемента = ВидСравнения.МеньшеИлиРавно Тогда
				ВС = " <= ";
			ИначеЕсли ВСЭлемента = ВидСравнения.НеРавно Тогда
				ВС = " <> ";
			КонецЕсли;
				
			Если ТипЗнч(Элемент.ЛевоеЗначение) = Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляНоменклатуры") Тогда
				ПравоеЗначение = Элемент.ПравоеЗначениеНоменклатур;
				ТипПоля = "[ВТ].Характеристика";
				ТипПоляЗначение = "[ВТ].Значение";
			Иначе
				ПравоеЗначение = Элемент.ПравоеЗначениеЭкстаПолей;
				ТипПоля = "[ВТ].ЭкстраПоле";
				ТипПоляЗначение = "[ВТ].ЗначениеЭкстраПоле";
			КонецЕсли;
			
			ОписаниеRLS = "( "+ТипПоля+".Код = """ + Элемент.ЛевоеЗначение.Код + """ И ";
			
			Если ТипЗнч(ПравоеЗначение) = Тип("Число") Тогда 
				ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+" " + ВС + ПравоеЗначение;			
			ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Булево") Тогда
				ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+" " + ВС + Формат(ПравоеЗначение,"БЛ=Ложь; БИ=Истина");
			ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Строка") Тогда
				//ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+" " + ВС + """"+ПравоеЗначение+"""";
				ОписаниеRLS = ОписаниеRLS + " "+
				"ВЫБОР
				|	КОГДА """+ПравоеЗначение+""" = """"
				|		ТОГДА "+ТипПоляЗначение+" " + ВС + " НЕОПРЕДЕЛЕНО 
				|	ИНАЧЕ "+ТипПоляЗначение+" " + ВС + """"+ПравоеЗначение+"""
				|КОНЕЦ";
			ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Дата") Тогда
				Шаблон = "ДАТАВРЕМЯ(<Год>,<Месяц>,<День>,<Час>,<Минута>,<Секунда>)";
				Шаблон = СтрЗаменить(Шаблон, "<Год>", 		ГОД(ПравоеЗначение));
				Шаблон = СтрЗаменить(Шаблон, "<Месяц>", 	Месяц(ПравоеЗначение));
				Шаблон = СтрЗаменить(Шаблон, "<День>", 		День(ПравоеЗначение));
				Шаблон = СтрЗаменить(Шаблон, "<Час>", 		Час(ПравоеЗначение));
				Шаблон = СтрЗаменить(Шаблон, "<Минута>", 	Минута(ПравоеЗначение));
				Шаблон = СтрЗаменить(Шаблон, "<Секунда>", 	Секунда(ПравоеЗначение));
				
				ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+" " + ВС + Шаблон;
			Иначе 
				//ССылочный тип
				Если ЗначениеЗаполнено(ПравоеЗначение.Код) Тогда 
					ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+".Код " + ВС + """"+ПравоеЗначение.Код+"""";
				Иначе
					ОписаниеRLS = ОписаниеRLS + " "+ТипПоляЗначение+".Наименование " + ВС + """"+ПравоеЗначение.Наименование +"""";
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеRLS = ОписаниеRLS + ") "; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс + ОписаниеRLS + Постфикс;
КонецФункции	

Функция РекурсивныйОбходПредставления(Элемент) Экспорт
		
	ОписаниеRLS = "";
	Префикс = " ";
	Постфикс = " ";
	
	Если ТипЗнч(Элемент) = Тип("ДеревоЗначений") Тогда
		ЭтоГруппа = Истина;
		Префикс = " ( ";
		Постфикс = " ) ";
		ТипГруппы = " И ";
				
		Для Каждого ЭлементГруппы ИЗ Элемент.Строки Цикл
			ОписаниеЭлементаRLS = РекурсивныйОбходПредставления(ЭлементГруппы);
			Если Элемент.Строки.Количество()>1 И Элемент.Строки.Индекс(ЭлементГруппы) < Элемент.Строки.Количество()-1 Тогда
				ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS + ТипГруппы;
			Иначе
				ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Если Элемент.Строки.Количество() > 0 Тогда
			ЭтоГруппа = Истина;
			Префикс = " ( ";
			Постфикс = " ) ";
			Если Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
				ТипГруппы = " И "
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
				ТипГруппы = " ИЛИ "
			ИначеЕсли Элемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
				ТипГруппы = " НЕ "
			КонецЕсли;
			
			Для Каждого ЭлементГруппы ИЗ Элемент.Строки Цикл
				ОписаниеЭлементаRLS = РекурсивныйОбходПредставления(ЭлементГруппы);
				Если Элемент.Строки.Количество()>1 И Элемент.Строки.Индекс(ЭлементГруппы) < Элемент.Строки.Количество()-1 Тогда
					ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS + ТипГруппы;
				Иначе
					ОписаниеRLS = ОписаниеRLS + ОписаниеЭлементаRLS;
				КонецЕсли;
			КонецЦикла;
		Иначе
			//ЭтоЭлемент
			ВСЭлемента = Элемент.ВидСравнения;
			ВС = " = ";
			Если ВСЭлемента = ВидСравнения.Больше Тогда
				ВС = " > ";
			ИначеЕсли ВСЭлемента = ВидСравнения.БольшеИлиРавно Тогда
				ВС = " >= ";
			ИначеЕсли ВСЭлемента = ВидСравнения.Меньше Тогда
				ВС = " < ";
			ИначеЕсли ВСЭлемента = ВидСравнения.МеньшеИлиРавно Тогда
				ВС = " <= ";
			ИначеЕсли ВСЭлемента = ВидСравнения.НеРавно Тогда
				ВС = " <> ";
			КонецЕсли;
				
			Если ТипЗнч(Элемент.ЛевоеЗначение) = Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляНоменклатуры") Тогда
				ПравоеЗначение = Элемент.ПравоеЗначениеНоменклатур;
			Иначе
				ПравоеЗначение = Элемент.ПравоеЗначениеЭкстаПолей;
			КонецЕсли;
			
			ОписаниеRLS = Строка(Элемент.ЛевоеЗначение) + ВС + Строка(ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс + ОписаниеRLS + Постфикс;
КонецФункции	




Функция ПолучитьПравилаТП(Период, Партнер, Контрагент, Договор)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("Договор",Договор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТревелПолитикаСрезПоследних.Партнер,
	               |	ТревелПолитикаСрезПоследних.Контрагент,
	               |	ТревелПолитикаСрезПоследних.Договор,
	               |	ТревелПолитикаСрезПоследних.Политика КАК Наименование,
	               |	ТревелПолитикаСрезПоследних.РазрешеноЗапрещено,
	               |	ТревелПолитикаСрезПоследних.Политика КАК Условия,
	               |	ТревелПолитикаСрезПоследних.Приоритет,
	               |	ТревелПолитикаСрезПоследних.ШаблонОписания
	               |ИЗ
	               |	РегистрСведений.ТревелПолитика.СрезПоследних(
	               |			&Период,
	               |			Партнер = &Партнер
	               |				И Контрагент = &Контрагент
	               |				И Договор = &Договор) КАК ТревелПолитикаСрезПоследних";
				   
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
КонецФункции

Функция СостояниеЗаказаПоТП(Заказ, RLS, ДЗ, Условие)
	
	Расшифровка = Неопределено;
	Результат = ПодходящееУсловие(Заказ, "", ДЗ, Условие, Расшифровка);
	ПройденоТП = Результат;
			
	Возврат ПройденоТП;
КонецФункции

Функция ПроверитьЗаказНаСоответствиеТревелПолитики(ЗаказКомандированного) Экспорт
	
	Период = ?(ЗначениеЗаполнено(ЗаказКомандированного.Дата), ЗаказКомандированного.Дата, ТекущаяДата());
	ВсеПравила = ПолучитьПравилаТП(Период, ЗаказКомандированного.Партнер, ЗаказКомандированного.Контрагент, ЗаказКомандированного.Договор);

	Ошибки = Новый Массив;
	ОшибкиПользователя = Новый Массив;
	Для Каждого Правило ИЗ ВсеПравила Цикл
		
		ДЗ = ПолучитьОтборОбъекта(Правило.Условия);
		RLS = ""; //РекурсивныйОбход(ДЗ);
		Условие = ?(Правило.РазрешеноЗапрещено, " НЕ ", "");
		
		ПройденоТП = СостояниеЗаказаПоТП(ЗаказКомандированного, RLS, ДЗ, Условие);
		Если НЕ ПройденоТП Тогда
			Характеристики = Новый ТаблицаЗначений;
			ЭкстраПоля = ЗаказКомандированного.ЭкстраПоля.Выгрузить();			
			ОписаниеОшибки = ПолучитьОписание(ЗаказКомандированного, Правило, Характеристики, ЭкстраПоля, Ложь);
			ОшибкиПользователя.Добавить(ОписаниеОшибки); //Сформировать представление ошибки пользователю
			
			Ошибки.Добавить(Новый Структура("ИмяПравила, ОписаниеОшибки", Строка(Правило.Наименование), ОписаниеОшибки ));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ПройденКонтроль, Ошибки, ОшибкиПользователя", Ошибки.Количество() = 0 ,Ошибки, ОшибкиПользователя);	
КонецФункции

#КонецОбласти







Функция ПостроитьМаршрут(ЗаказКомандируемого, МинДата = Неопределено, МаксДата = Неопределено) Экспорт
	//
	Услуги = ЗаказКомандируемого.УслугиДляКлиента.Выгрузить();	 
	//ОписаниеНоменклатуры = ЗаказКомандируемого.ОписаниеНоменклатуры.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуги", Услуги);
	Запрос.УстановитьПараметр("МинДата", МинДата);
	Запрос.УстановитьПараметр("НеОграничиватьПоМинДата", ?(МинДата = Неопределено, Истина, Ложь));
	Запрос.УстановитьПараметр("МаксДата", МаксДата);
	Запрос.УстановитьПараметр("НеОграничиватьПоМаксДата", ?(МаксДата = Неопределено, Истина, Ложь));
	//Запрос.УстановитьПараметр("ОписаниеНоменклатуры", ОписаниеНоменклатуры);
	
	//СписокХарактеристик = Новый Массив;
	//СписокХарактеристик.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги);
	//СписокХарактеристик.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги);
	//СписокХарактеристик.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородОтправления);
	//СписокХарактеристик.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородПрибытия);
	
	//Запрос.УстановитьПараметр("Характеристика", СписокХарактеристик);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Услуги.Услуга,
	               |	Услуги.Номенклатура
	               |ПОМЕСТИТЬ ВТ_Услуги
	               |ИЗ
	               |	&Услуги КАК Услуги
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Услуги.Услуга,
	               |	ВТ_Услуги.Номенклатура
	               |ПОМЕСТИТЬ ВТ_Услуги_ИспользуетсяВМаршруте
	               |ИЗ
	               |	ВТ_Услуги КАК ВТ_Услуги
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураБТ КАК НоменклатураБТ
	               |		ПО ВТ_Услуги.Номенклатура = НоменклатураБТ.Ссылка
	               |ГДЕ
	               |	НоменклатураБТ.ИспользуетсяВМаршруте
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Услуги_ИспользуетсяВМаршруте.Услуга,
	               |	ВТ_Услуги_ИспользуетсяВМаршруте.Номенклатура,
	               |	УслугаОписаниеУслуги_ДатаНачала.Значение КАК ДатаВремяНачалаМаршрута,
	               |	УслугаОписаниеУслуги_ДатаОкончания.Значение КАК ДатаВремяОкончанияМаршрута,
	               |	УслугаОписаниеУслуги_Куда.Значение КАК Откуда,
	               |	УслугаОписаниеУслуги_Откуда.Значение КАК Куда
	               |ИЗ
	               |	ВТ_Услуги_ИспользуетсяВМаршруте КАК ВТ_Услуги_ИспользуетсяВМаршруте
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги_ДатаНачала
	               |		ПО ВТ_Услуги_ИспользуетсяВМаршруте.Услуга = УслугаОписаниеУслуги_ДатаНачала.Ссылка
	               |			И (УслугаОписаниеУслуги_ДатаНачала.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги_ДатаОкончания
	               |		ПО ВТ_Услуги_ИспользуетсяВМаршруте.Услуга = УслугаОписаниеУслуги_ДатаОкончания.Ссылка
	               |			И (УслугаОписаниеУслуги_ДатаОкончания.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги_Откуда
	               |		ПО ВТ_Услуги_ИспользуетсяВМаршруте.Услуга = УслугаОписаниеУслуги_Откуда.Ссылка
	               |			И (УслугаОписаниеУслуги_Откуда.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородОтправления))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги_Куда
	               |		ПО ВТ_Услуги_ИспользуетсяВМаршруте.Услуга = УслугаОписаниеУслуги_Куда.Ссылка
	               |			И (УслугаОписаниеУслуги_Куда.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородПрибытия))
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &НеОграничиватьПоМинДата
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УслугаОписаниеУслуги_ДатаНачала.Значение >= &МинДата
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &НеОграничиватьПоМаксДата
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ УслугаОписаниеУслуги_ДатаОкончания.Значение <= &МаксДата
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Услуги_ИспользуетсяВМаршруте.Услуга,
	               |	УслугаОписаниеУслуги_ДатаНачала.Значение,
	               |	УслугаОписаниеУслуги_ДатаОкончания.Значение,
	               |	ВТ_Услуги_ИспользуетсяВМаршруте.Номенклатура,
	               |	УслугаОписаниеУслуги_Куда.Значение,
	               |	УслугаОписаниеУслуги_Откуда.Значение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаВремяНачалаМаршрута,
	               |	ДатаВремяОкончанияМаршрута
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	 //Запрос.Текст = "ВЫБРАТЬ
	//               |	ЗаказКомандированногоБТУслуги.ГУИД,
	//               |	ВЫРАЗИТЬ(ЗаказКомандированногоБТУслуги.Номенклатура КАК Справочник.НоменклатураБТ) КАК Номенклатура
	//               |ПОМЕСТИТЬ Услуги
	//               |ИЗ
	//               |	&Услуги КАК ЗаказКомандированногоБТУслуги
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ЗаказКомандированногоБТОписаниеНоменклатуры.ГУИД,
	//               |	ВЫРАЗИТЬ(ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика КАК ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры) КАК Характеристика,
	//               |	ЗаказКомандированногоБТОписаниеНоменклатуры.Значение
	//               |ПОМЕСТИТЬ ОписаниеНоменклатуры
	//               |ИЗ
	//               |	&ОписаниеНоменклатуры КАК ЗаказКомандированногоБТОписаниеНоменклатуры
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	Услуги.ГУИД,
	//               |	Услуги.Номенклатура,
	//               |	ОписаниеНоменклатуры.Характеристика,
	//               |	ОписаниеНоменклатуры.Значение
	//               |ПОМЕСТИТЬ УслугиМаршрута
	//               |ИЗ
	//               |	Услуги КАК Услуги
	//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОписаниеНоменклатуры КАК ОписаниеНоменклатуры
	//               |		ПО Услуги.ГУИД = ОписаниеНоменклатуры.ГУИД
	//               |ГДЕ
	//               |	Услуги.Номенклатура.ИспользуетсяВМаршруте = ИСТИНА
	//               |	И ОписаниеНоменклатуры.Характеристика В(&Характеристика)
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	УслугиМаршрута.Номенклатура,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА УслугиМаршрута.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги)
	//               |				ТОГДА УслугиМаршрута.Значение
	//               |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//               |		КОНЕЦ) КАК ДатаВремяНачалаМаршрута,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА УслугиМаршрута.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги)
	//               |				ТОГДА УслугиМаршрута.Значение
	//               |			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//               |		КОНЕЦ) КАК ДатаВремяОкончанияМаршрута,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА УслугиМаршрута.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородОтправления)
	//               |				ТОГДА УслугиМаршрута.Значение
	//               |			ИНАЧЕ """"
	//               |		КОНЕЦ) КАК Откуда,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА УслугиМаршрута.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ГородПрибытия)
	//               |				ТОГДА УслугиМаршрута.Значение
	//               |			ИНАЧЕ """"
	//               |		КОНЕЦ) КАК Куда,
	//               |	"""" КАК Информация
	//               |ПОМЕСТИТЬ ПочтиМаршрут
	//               |ИЗ
	//               |	УслугиМаршрута КАК УслугиМаршрута
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	УслугиМаршрута.Номенклатура
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	ПочтиМаршрут.Номенклатура,
	//               |	ПочтиМаршрут.ДатаВремяНачалаМаршрута КАК ДатаВремяНачалаМаршрута,
	//               |	ПочтиМаршрут.ДатаВремяОкончанияМаршрута,
	//               |	ПочтиМаршрут.Откуда,
	//               |	ПочтиМаршрут.Куда,
	//               |	ПочтиМаршрут.Информация
	//               |ИЗ
	//               |	ПочтиМаршрут КАК ПочтиМаршрут
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ДатаВремяНачалаМаршрута";
	Выгрузка = Запрос.Выполнить().Выгрузить();	
	Возврат Выгрузка;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////
//								HTTP service
//////////////////////////////////////////////////////////////////////////

#Область HTTPСервисы

Функция КарточкаПользователя(ПользовательОБТ) Экспорт
	
	Зарпос = Новый Запрос;
	Зарпос.УстановитьПараметр("ПользовательОБТ", ПользовательОБТ);
	Зарпос.Текст = "ВЫБРАТЬ
	               |	КонтрагентыПользователяОБТ.ПользовательОБТ КАК ПользовательОБТ,
	               |	КонтрагентыПользователяОБТ.Контрагент КАК Контрагент,
	               |	КонтрагентыПользователяОБТ.Контрагент.Партнер КАК Партнер
	               |ИЗ
	               |	РегистрСведений.КонтрагентыПользователяОБТ КАК КонтрагентыПользователяОБТ
	               |ГДЕ
	               |	КонтрагентыПользователяОБТ.ПользовательОБТ = &ПользовательОБТ";
	Выгрузка = Зарпос.Выполнить().Выгрузить();
	
	СписокКонтрагентов = Выгрузка.ВыгрузитьКолонку("Контрагент");
	
	ТаблицаПартнеры = Выгрузка.Скопировать( ,"Партнер");
	ТаблицаПартнеры.Свернуть("Партнер");
	СписокПартнеров = ТаблицаПартнеры.ВыгрузитьКолонку("Партнер");
	
	ЗначенияПоКарточке = Новый Структура("ПользовательОБТ, Контрагенты, Партнеры", ПользовательОБТ, СписокКонтрагентов, СписокПартнеров);
	
	Возврат ЗначенияПоКарточке;
КонецФункции

Функция ПолучитьДанныеПоПользователю(ВходящаяСтруктура) Экспорт
	
	Результат = Неопределено;
	Если ТипЗнч(ВходящаяСтруктура) = Тип("Структура") Тогда
		Если ВходящаяСтруктура.Свойство("userguid") Тогда
			userguid = ВходящаяСтруктура.userguid;
			СсылкаНаПользователя = Справочники.ПользователиОБТ.ПолучитьСсылку(Новый УникальныйИдентификатор(userguid));
			Если СсылкаНаПользователя.Ссылка.ПолучитьОбъект() <> Неопределено Тогда
				//Такой пользователь есть
				//Сформируем карточку
				Результат = КарточкаПользователя(СсылкаНаПользователя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция haveuser(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	ЖСОН = Новый Структура("acess", false);
	
	ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ПараметрыЗапроса);
	ПараметрыСтруктурой = ПрочитатьJSON(ЧтениеJSON);
	
	login = Неопределено;
	password = Неопределено;
	Если ПараметрыСтруктурой.Свойство("login",login) И ПараметрыСтруктурой.Свойство("password", password) Тогда
		Если ЗначениеЗаполнено(login) И ЗначениеЗаполнено(password) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Логин",login);
			Запрос.УстановитьПараметр("Пароль",password);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ПользователиОБТ.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.ПользователиОБТ КАК ПользователиОБТ
			               |ГДЕ
			               |	ПользователиОБТ.Логин = &Логин
			               |	И ПользователиОБТ.Пароль = &Пароль";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Ответ.КодСостояния = 200;
				ЖСОН = Новый Структура("acess, guid", true, Строка(Выборка.Ссылка.УникальныйИдентификатор()));
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ЖСОН); // сериализует ОтветМассив в формат JSON
	ЭЭ = ЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(ЭЭ);
	
	Возврат Ответ;
КонецФункции

Функция mytravelsGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
			
	userguid = Запрос.ПараметрыURL["userguid1"];
	
	ГУИД = Новый УникальныйИдентификатор(userguid);
	Командируемый  = Справочники.Командированные.ПолучитьСсылку(ГУИД);
	
	Если ЗначениеЗаполнено(Командируемый) Тогда 
		Элементы = Новый Массив();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Командированный",Командируемый);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТ.GUID КАК guid,
		               |	ЗаказКомандированногоБТ.СуммаДокумента КАК summ,
		               |	ВЫБОР
		               |		КОГДА ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.ПустаяССылка)
		               |				ИЛИ ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.Ожидает)
		               |			ТОГДА 0
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.Утвержден)
		               |					ТОГДА 1
		               |				ИНАЧЕ 2
		               |			КОНЕЦ
		               |	КОНЕЦ КАК status,
		               |	ЗаказКомандированногоБТ.Номер КАК number,
		               |	ЗаказКомандированногоБТ.Дата КАК date,
		               |	ЗаказКомандированногоБТ.СуммаДокумента КАК summtext,
		               |	ЗаказКомандированногоБТ.Представление КАК description
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Документ.ЗаказКомандированногоБТ КАК ЗаказКомандированногоБТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПройденТревелПолитикой.СрезПоследних(, ) КАК ПройденТревелПолитикойСрезПоследних
		               |		ПО (ПройденТревелПолитикойСрезПоследних.ЗаказКомандированного = ЗаказКомандированногоБТ.Ссылка)
		               |ГДЕ
		               |	ЗаказКомандированногоБТ.Командированный = &Командированный
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ ПЕРВЫЕ 10
		               |	ВТ.guid,
		               |	ВТ.summ,
		               |	ВТ.status,
		               |	ВТ.number,
		               |	ВТ.date,
		               |	ВТ.summtext,
		               |	ВТ.description
		               |ИЗ
		               |	ВТ КАК ВТ";
		Пакет = Запрос.ВыполнитьПакет();
		
		Всего =   Пакет.Получить(Пакет.Количество()-2);
		Таблица = Пакет.Получить(Пакет.Количество()-1);
		
		count = Всего.Выгрузить()[0].Количество; 
		
		Выборка = Таблица.Выбрать();
		Количество = 0;
		Пока Выборка.Следующий() Цикл 
			Количество = Количество +1;
			Элемент = Новый Структура("guid, status, number, date, summ, summtext, description");
			ЗаполнитьЗначенияСвойств(Элемент, Выборка);
			Элемент.guid = Строка(Элемент.guid);
			Элемент.date = Формат(Элемент.date, "ДФ=dd.MM.yyyy");
			Элементы.Добавить(Элемент);
		КонецЦикла;	
		
		ЖСОН = Новый Структура("count, list, onlist, elems", count, 1, Количество, Элементы);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
		ЭЭ = ЗаписьJSON.Закрыть();
		
		Ответ.УстановитьТелоИзСтроки(ЭЭ);
		Ответ.КодСостояния = 200;
	Иначе
		Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя");
	КонецЕсли;
	
	//Ответ.ПолучитьТелоКакСтроку()
	Возврат Ответ;
КонецФункции

Функция mytravelGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	userguid = Запрос.ПараметрыURL["userguid"];
	travelguid = Запрос.ПараметрыURL["travelguid"];
	
	ГУИД = Новый УникальныйИдентификатор(userguid);
	Командируемый  = Справочники.Командированные.ПолучитьСсылку(ГУИД);
	
	ГУИДРегистратор = Новый УникальныйИдентификатор(travelguid);
	Регистратор  = Документы.ЗаказКомандированногоБТ.ПолучитьСсылку(ГУИДРегистратор);
	
	Если ЗначениеЗаполнено(Командируемый) Тогда 
		Элементы = Новый Массив();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Командированный",Командируемый);
		Запрос.УстановитьПараметр("Регистратор",Регистратор);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТУслуги.Номенклатура.Наименование КАК description,
		               |	ЗаказКомандированногоБТУслуги.ГУИД КАК guid,
		               |	ЗаказКомандированногоБТУслуги.НоменклатураУТ.НаименованиеПолное КАК typename,
		               |	ЗаказКомандированногоБТУслуги.НоменклатураУТ.Артикул КАК type,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги)
		               |				ТОГДА ЗаказКомандированногоБТОписаниеНоменклатуры.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) КАК datefrom,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги)
		               |				ТОГДА ЗаказКомандированногоБТОписаниеНоменклатуры.Значение
		               |			ИНАЧЕ NULL
		               |		КОНЕЦ) КАК dateto
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Документ.ЗаказКомандированногоБТ.Услуги КАК ЗаказКомандированногоБТУслуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКомандированногоБТ.ОписаниеНоменклатуры КАК ЗаказКомандированногоБТОписаниеНоменклатуры
		               |		ПО ЗаказКомандированногоБТУслуги.ГУИД = ЗаказКомандированногоБТОписаниеНоменклатуры.ГУИД
		               |			И (ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги)
		               |				ИЛИ ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги))
		               |ГДЕ
		               |	ЗаказКомандированногоБТУслуги.Ссылка = &Регистратор
		               |	И ЗаказКомандированногоБТУслуги.Ссылка.Командированный = &Командированный
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаказКомандированногоБТУслуги.ГУИД,
		               |	ЗаказКомандированногоБТУслуги.НоменклатураУТ.Артикул,
		               |	ЗаказКомандированногоБТУслуги.Номенклатура.Наименование,
		               |	ЗаказКомандированногоБТУслуги.НоменклатураУТ.НаименованиеПолное
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ.description,
		               |	ВТ.guid,
		               |	ВТ.typename,
		               |	ВТ.type,
		               |	ВТ.datefrom,
		               |	ВТ.dateto,
		               |	ВТ.datefrom КАК timefrom,
		               |	ВТ.dateto КАК timeto
		               |ИЗ
		               |	ВТ КАК ВТ";
					   
					   
		Пакет = Запрос.ВыполнитьПакет();
		
		Всего =   Пакет.Получить(Пакет.Количество()-2);
		Таблица = Пакет.Получить(Пакет.Количество()-1);
		
		count = Всего.Выгрузить()[0].Количество; 
		
		Выборка = Таблица.Выбрать();
		Количество = 0;
		Пока Выборка.Следующий() Цикл 
			Количество = Количество +1;
			Элемент = Новый Структура("guid, datefrom, timefrom, dateto, timeto, type, typename, description");
			ЗаполнитьЗначенияСвойств(Элемент, Выборка);
			Элемент.guid = Строка(Элемент.guid);
			Элемент.datefrom = Формат(Элемент.datefrom, "ДФ=dd.MM.yyyy");
			Элемент.dateto = Формат(Элемент.dateto, "ДФ=dd.MM.yyyy");
			Элемент.timefrom = Формат(Элемент.timefrom, "ДФ=HH:mm; ДЛФ=T");
			Элемент.timeto = Формат(Элемент.timeto, "ДФ=HH:mm; ДЛФ=T");
			Элементы.Добавить(Элемент);
		КонецЦикла;	
		
		
		status = 0;
		ОтборСтатуса = Новый Структура("ЗаказКомандированного",Регистратор);
		СрезП = РегистрыСведений.ПройденТревелПолитикой.СрезПоследних(ТекущаяДата(),ОтборСтатуса);
		Для Каждого СтрокаСреза ИЗ СрезП Цикл
			Если СтрокаСреза.ПройденоСогласование = Перечисления.СтатусыСогласования.Отклонен Тогда
				status = 2;
			ИначеЕсли  СтрокаСреза.ПройденоСогласование = Перечисления.СтатусыСогласования.Утвержден Тогда
				status = 1;
			КонецЕсли;
		КонецЦикла;
					   
		ЖСОН = Новый Структура("count, status, description, elems", count, status, Регистратор.ПредставлениеЗаказа, Элементы);		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
		ЭЭ = ЗаписьJSON.Закрыть();
					   
		Ответ.УстановитьТелоИзСтроки(ЭЭ);
		Ответ.КодСостояния = 200;		
	Иначе
		Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя или командировки");
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция getdocGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция myautorizationsGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
			
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		Командируемый = КарточкаПользователя.ПользовательОБТ;
		Элементы = Новый Массив();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Исполнитель", Командируемый);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 10
		               |	ЗаказКомандированногоБТ.GUID КАК guid,
		               |	ЗаказКомандированногоБТ.Дата КАК date,
		               |	ЗаказКомандированногоБТ.СуммаДокумента КАК summ,
		               |	ЗаказКомандированногоБТ.ПредставлениеЗаказа КАК description,
		               |	ВЫБОР
		               |		КОГДА ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.ПустаяССылка)
		               |				ИЛИ ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.Ожидает)
		               |			ТОГДА 0
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ПройденТревелПолитикойСрезПоследних.ПройденоСогласование = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласования.Утвержден)
		               |					ТОГДА 1
		               |				ИНАЧЕ 2
		               |			КОНЕЦ
		               |	КОНЕЦ КАК status
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	Задача.ЗадачаКлиента.ЗадачиПоИсполнителю КАК ЗадачаКлиентаЗадачиПоИсполнителю
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКомандированногоБТ КАК ЗаказКомандированногоБТ
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПройденТревелПолитикой.СрезПоследних КАК ПройденТревелПолитикойСрезПоследних
		               |			ПО ЗаказКомандированногоБТ.Ссылка = ПройденТревелПолитикойСрезПоследних.ЗаказКомандированного
		               |		ПО ЗадачаКлиентаЗадачиПоИсполнителю.БизнесПроцесс.ЗаказКомандированного = ЗаказКомандированногоБТ.Ссылка
		               |ГДЕ
		               |	ЗадачаКлиентаЗадачиПоИсполнителю.Исполнитель = &Исполнитель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ.guid,
		               |	ВТ.date,
		               |	ВТ.summ,
		               |	ВТ.description,
		               |	ВТ.status
		               |ИЗ
		               |	ВТ КАК ВТ";
		
		Пакет = Запрос.ВыполнитьПакет();
		
		Всего =   Пакет.Получить(Пакет.Количество()-2);
		Таблица = Пакет.Получить(Пакет.Количество()-1);
		
		count = Всего.Выгрузить()[0].Количество; 
		
		Выборка = Таблица.Выбрать();
		Количество = 0;
		Пока Выборка.Следующий() Цикл 
			Количество = Количество +1;
			Элемент = Новый Структура("guid, status, date, summ, description");
			ЗаполнитьЗначенияСвойств(Элемент, Выборка);
			Элемент.guid = Строка(Элемент.guid);
			Элемент.date = Формат(Элемент.date, "ДФ=dd.MM.yyyy");
			Элементы.Добавить(Элемент);
		КонецЦикла;	
		
		ЖСОН = Новый Структура("count, list, onlist, elems", count, 1, Количество, Элементы);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
		ЭЭ = ЗаписьJSON.Закрыть();
		
		Ответ.УстановитьТелоИзСтроки(ЭЭ);
		Ответ.КодСостояния = 200;
	Иначе
		Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя");
	КонецЕсли;
	
	//Ответ.ПолучитьТелоКакСтроку()
	Возврат Ответ;
КонецФункции

Функция myautorizationGET(Запрос) Экспорт
	
	Результат = Ложь;
	Ответ = Новый HTTPСервисОтвет(500);	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		ПользовательОБТ = КарточкаПользователя.ПользовательОБТ;
		ГУИДЗадачи = Запрос.ПараметрыURL["autoguid"];
		
		Задача = Задачи.ЗадачаКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДЗадачи));
		ОбъектЗадачи = Задача.ПолучитьОбъект();
		Если ОбъектЗадачи.Ссылка = Задача Тогда
			//Есть такая задача
			Если НЕ Задача.Выполнена И Задача.Исполнитель = ПользовательОБТ Тогда
				ОбъектЗадачи.ВыполнитьЗадачу();
				Сообщение = "Ок";
				Результат = Истина;
				Ответ = Новый HTTPСервисОтвет(200);
			Иначе
				Сообщение = "Ошибка установки статуса Задачи";
			КонецЕсли;
			
		Иначе
			Сообщение = "Нет указанной задачи";
		КонецЕсли;
	Иначе
		Сообщение = "Ошибка установки пользователя";
	КонецЕсли;
	
	ОтветСервисаСтруктура = Новый Структура("result", "message", Результат, Сообщение);
	Ответ.УстановитьТелоИзСтроки(УправлениеБТВызовСервера.ВJSON(ОтветСервисаСтруктура));
	Возврат Ответ;
	
КонецФункции


Функция ПолучитьДокументы(ТипДокумента, Партнер, Контрагент) Экспорт
	//
	ОбъектМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", ТипДокумента);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектМетаданных",ОбъектМетаданных);
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПечатныеФормыКлиентаСписокОбъектов.Ссылка КАК Ссылка,
	               |	ПечатныеФормыКлиентаСписокОбъектов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	0 КАК Приоритет
	               |ПОМЕСТИТЬ ВсеФормы
	               |ИЗ
	               |	Справочник.ПечатныеФормыКлиента.СписокОбъектов КАК ПечатныеФормыКлиентаСписокОбъектов
	               |ГДЕ
	               |	ПечатныеФормыКлиентаСписокОбъектов.ОбъектМетаданных = &ОбъектМетаданных
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПечатныеФормыКлиентаСписокОбъектов.Ссылка,
	               |	ПечатныеФормыКлиентаСписокОбъектов.ИдентификаторСтроки,
	               |	1
	               |ИЗ
	               |	Справочник.ПечатныеФормыКлиента.СписокОбъектов КАК ПечатныеФормыКлиентаСписокОбъектов
	               |ГДЕ
	               |	ПечатныеФормыКлиентаСписокОбъектов.ОбъектМетаданных = &ОбъектМетаданных
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Партнер = &Партнер
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПечатныеФормыКлиентаСписокОбъектов.Ссылка,
	               |	ПечатныеФормыКлиентаСписокОбъектов.ИдентификаторСтроки,
	               |	2
	               |ИЗ
	               |	Справочник.ПечатныеФормыКлиента.СписокОбъектов КАК ПечатныеФормыКлиентаСписокОбъектов
	               |ГДЕ
	               |	ПечатныеФормыКлиентаСписокОбъектов.ОбъектМетаданных = &ОбъектМетаданных
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Партнер = &Партнер
	               |	И ПечатныеФормыКлиентаСписокОбъектов.Ссылка.Контрагент = &Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВсеФормы.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ МаксисумПриоритета
	               |ИЗ
	               |	ВсеФормы КАК ВсеФормы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеФормы.Ссылка КАК Ссылка,
	               |	ВсеФормы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	ВсеФормы.Приоритет КАК Приоритет
	               |ПОМЕСТИТЬ НужныйСправочник
	               |ИЗ
	               |	ВсеФормы КАК ВсеФормы,
	               |	МаксисумПриоритета КАК МаксисумПриоритета
	               |ГДЕ
	               |	ВсеФормы.Приоритет = МаксисумПриоритета.Приоритет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПечатныеФормыКлиентаСписокКоманд.Ссылка КАК Ссылка,
	               |	ПечатныеФормыКлиентаСписокКоманд.НомерСтроки КАК НомерСтроки,
	               |	ПечатныеФормыКлиентаСписокКоманд.ИдентификаторНаСтрокуОбъекта КАК ИдентификаторНаСтрокуОбъекта,
	               |	ПечатныеФормыКлиентаСписокКоманд.ИмяКомандыURL КАК ИмяКоманды,
	               |	ПечатныеФормыКлиентаСписокКоманд.ПредставлениеКоманды КАК ПредставлениеКоманды,
	               |	ПечатныеФормыКлиентаСписокКоманд.Использовать КАК Использовать,
	               |	ПечатныеФормыКлиентаСписокКоманд.ФорматВывода КАК ФорматВывода,
	               |	ПечатныеФормыКлиентаСписокКоманд.СсылкаНаПечатнуюФорму КАК СсылкаНаПечатнуюФорму
	               |ИЗ
	               |	Справочник.ПечатныеФормыКлиента.СписокКоманд КАК ПечатныеФормыКлиентаСписокКоманд,
	               |	НужныйСправочник КАК НужныйСправочник
	               |ГДЕ
	               |	ПечатныеФормыКлиентаСписокКоманд.Ссылка = НужныйСправочник.Ссылка
	               |	И ПечатныеФормыКлиентаСписокКоманд.ИдентификаторНаСтрокуОбъекта = НужныйСправочник.ИдентификаторСтроки
	               |	И ПечатныеФормыКлиентаСписокКоманд.Использовать = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокКоманд = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяКоманда = Новый Структура("commandname, info, type, guid", Выборка.ИмяКоманды, Выборка.ПредставлениеКоманды, Выборка.ФорматВывода, Строка(Выборка.СсылкаНаПечатнуюФорму.УникальныйИдентификатор()) ); 
		СписокКоманд.Добавить(НоваяКоманда);	
	КонецЦикла;
	
	Возврат СписокКоманд;
	
КонецФункции

Функция ПолучитьОписаниеДокумента(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипВложения", Перечисления.ТипыВложенныхФайлов.Прочее);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКлиентаБТТовары.Услуга КАК Услуга,
	               |	ЗаказКлиентаБТТовары.СуммаСНДС КАК СуммаСНДС,
	               |	ЗаказКлиентаБТТовары.СуммаНДС КАК СуммаНДС,
	               |	ЗаказКлиентаБТТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКлиентаБТТовары.Ссылка КАК Ссылка,
	               |	ФайлыДляОтправкиВОблако.ИмяФайла КАК ИмяФайла,
	               |	ФайлыДляОтправкиВОблако.Отправлено КАК Отправлено,
	               |	ФайлыДляОтправкиВОблако.md5 КАК md5
	               |ИЗ
	               |	Документ.ЗаказКлиентаБТ.Товары КАК ЗаказКлиентаБТТовары
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыДляОтправкиВОблако КАК ФайлыДляОтправкиВОблако
	               |		ПО ЗаказКлиентаБТТовары.Услуга = ФайлыДляОтправкиВОблако.Объект
	               |ГДЕ
	               |	ЗаказКлиентаБТТовары.Ссылка = &Ссылка
	               |	И ФайлыДляОтправкиВОблако.ТипВложения = &ТипВложения";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокДокументов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Новый Структура("service, summ, VAT", Строка(Выборка.Услуга.УникальныйИдентификатор())));
	КонецЦикла;	
	
	Возврат СписокДокументов;
	
КонецФункции

Функция findocsGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		Период = Запрос.ПараметрыURL["num"];

		Если ЗначениеЗаполнено(Период) Тогда
			Период = Период -1;
			
			Если ТипЗнч(Запрос) = Тип("Структура") Тогда
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку;			
			Иначе
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку();
			КонецЕсли;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПараметрыЗапроса);
			ПараметрыСтруктурой = ПрочитатьJSON(ЧтениеJSON);
			
			Если ПараметрыСтруктурой.Свойство("fromdate") Тогда 
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate) Тогда
					ПараметрыСтруктурой.fromdate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.fromdate);  
					ПараметрыСтруктурой.fromdate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate), НачалоДня(ПараметрыСтруктурой.fromdate), ПараметрыСтруктурой.fromdate);
				Иначе
					ПараметрыСтруктурой.fromdate = Дата(1,1,1,0,0,0);				
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("fromdate",Дата(1,1,1,0,0,0));
			КонецЕсли;
			
			Если ПараметрыСтруктурой.Свойство("todate") Тогда
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.todate) Тогда
					ПараметрыСтруктурой.todate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.todate);
					ПараметрыСтруктурой.todate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.todate), КонецДня(ПараметрыСтруктурой.todate), ПараметрыСтруктурой.todate);
				Иначе
					ПараметрыСтруктурой.todate = ТекущаяДата();
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("todate",ТекущаяДата());
			КонецЕсли;
			
			Если НЕ ПараметрыСтруктурой.Свойство("info") Тогда
				ПараметрыСтруктурой.Вставить("info","");
			КонецЕсли;
			
			Если НЕ ПараметрыСтруктурой.Свойство("partner") Тогда
				ПараметрыСтруктурой.Вставить("partner", Справочники.Партнеры.ПустаяСсылка());
			Иначе
				СсылкаНаПартнера = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыСтруктурой.partner));
				ПараметрыСтруктурой.Вставить("partner", СсылкаНаПартнера.Ссылка);			
			КонецЕсли;
			
							
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаНачала",ПараметрыСтруктурой.fromdate);
			Запрос.УстановитьПараметр("ДатаКонца",ПараметрыСтруктурой.todate);
			Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ПараметрыСтруктурой.info+"%");
			Запрос.УстановитьПараметр("ИспользоватьПоиск", ЗначениеЗаполнено(ПараметрыСтруктурой.info));
			
			Запрос.УстановитьПараметр("Партнер", КарточкаПользователя.Партнеры);
			Запрос.УстановитьПараметр("Контрагент", КарточкаПользователя.Контрагенты);
			Запрос.УстановитьПараметр("ИспользоватьПартнера", КарточкаПользователя.Партнеры.Количество() > 0);
			Запрос.УстановитьПараметр("ИспользоватьКонтрагента", КарточкаПользователя.Контрагенты.Количество() > 0);
			
			//"+20*Период+"
			//"+20*(Период+1)+"
			Текст = "ВЫБРАТЬ
			               |	ЗаказКлиентаБТ.Ссылка КАК guid,
			               |	ЗаказКлиентаБТ.Номер КАК number,
			               |	ЗаказКлиентаБТ.Дата КАК date,
			               |	""0"" КАК type,
			               |	ЗаказКлиентаБТ.СуммаДокумента КАК summ,
			               |	ВЫРАЗИТЬ(ЗаказКлиентаБТ.Комментарий КАК СТРОКА(1000)) КАК description,
			               |	""Заказ"" КАК typename,
			               |	ЗаказКлиентаБТ.Организация КАК organization,
			               |	ЗаказКлиентаБТ.Контрагент КАК kontragent
			               |ПОМЕСТИТЬ ВТ
			               |ИЗ
			               |	Документ.ЗаказКлиентаБТ КАК ЗаказКлиентаБТ
			               |ГДЕ
			               |	ЗаказКлиентаБТ.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьКонтрагента
			               |				ТОГДА ЗаказКлиентаБТ.Контрагент В (&Контрагент)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьПартнера
			               |				ТОГДА ЗаказКлиентаБТ.Партнер В (&Партнер)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |	И ЗаказКлиентаБТ.ПометкаУдаления = ЛОЖЬ
			               |	И ЗаказКлиентаБТ.Проведен = ИСТИНА
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ ВТ2
			               |ИЗ
			               |	ВТ КАК ВТ
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиентаБТ.Товары КАК ЗаказКлиентаБТТовары
			               |		ПО ВТ.guid = ЗаказКлиентаБТТовары.Ссылка
			               |ГДЕ
			               |	ВЫБОР
			               |			КОГДА &ИспользоватьПоиск
			               |				ТОГДА ВТ.description ПОДОБНО &СтрокаПоиска
			               |						ИЛИ ЗаказКлиентаБТТовары.Содержание ПОДОБНО &СтрокаПоиска
			               |						ИЛИ ВТ.number ПОДОБНО &СтрокаПоиска
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ 0
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ Исключаем
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ 20
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent,
			               |	Исключаем.guid КАК Исключаемguid
			               |ПОМЕСТИТЬ ВТИтого
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Исключаем КАК Исключаем
			               |		ПО ВТ.guid = Исключаем.guid
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТИтого.guid КАК guid,
			               |	ВТИтого.number КАК number,
			               |	ВТИтого.date КАК date,
			               |	ВТИтого.type КАК type,
			               |	ВТИтого.summ КАК summ,
			               |	ВТИтого.description КАК description,
			               |	ВТИтого.typename КАК typename,
			               |	ВТИтого.organization КАК organization,
			               |	ВТИтого.kontragent КАК kontragent
			               |ИЗ
			               |	ВТИтого КАК ВТИтого
			               |ГДЕ
			               |	ВТИтого.Исключаемguid ЕСТЬ NULL
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ";
			Текст = СтрЗаменить(Текст, "ВЫБРАТЬ ПЕРВЫЕ 0", "ВЫБРАТЬ ПЕРВЫЕ "+Строка(20*Период)+Символы.ПС);
			Текст = СтрЗаменить(Текст, "ВЫБРАТЬ ПЕРВЫЕ 20", "ВЫБРАТЬ ПЕРВЫЕ "+Строка(20*(Период+1))+Символы.ПС);
			Запрос.Текст = Текст; 
			Пакет = Запрос.ВыполнитьПакет();
			
			Всего =   Пакет.Получить(1);
			Таблица = Пакет.Получить(Пакет.Количество()-1);
			
			count = Всего.Выгрузить()[0].Количество; 
					
			Элементы = Новый Массив();
			Выборка = Таблица.Выбрать();
			
			Количество = 0;
			Пока Выборка.Следующий() Цикл 
				Количество = Количество +1;
				Элемент = Новый Структура("guid, info, number, date, type, summ, summtext, typename, description, typename, organization, kontragent, docs");
				ЗаполнитьЗначенияСвойств(Элемент, Выборка);
				Элемент.guid = Строка(Элемент.guid.УникальныйИдентификатор());
				Элемент.organization = Строка(Элемент.organization.УникальныйИдентификатор());
				Элемент.kontragent = Строка(Элемент.kontragent.УникальныйИдентификатор());
				Элемент.date = Формат(Элемент.date, "ДФ=dd.MM.yyyy");
				Элемент.summtext = Элемент.summ;
				Элемент.info = Элемент.typename + " №" + Элемент.number + " от " + Элемент.date;
				
				Элемент.docs = ПолучитьДокументы( Выборка.guid.Метаданные().ПолноеИмя(), Выборка.kontragent.Партнер, Выборка.kontragent ); 
				//Элемент.etiket = ПолучитьОписаниеДокумента(Элемент.guid);
				
				Элементы.Добавить(Элемент);
			КонецЦикла;	
			
			ЖСОН = Новый Структура("ver, count, list, onlist, elems", "3.0", count, Период+1, 20, Элементы);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
			ЭЭ = ЗаписьJSON.Закрыть();
			
			Ответ.УстановитьТелоИзСтроки(ЭЭ);
			Ответ.КодСостояния = 200;
		
		Иначе
			Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя");
		КонецЕсли;
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция findocGET(Запрос) Экспорт	
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		
		typedoc = Запрос.ПараметрыURL["typedoc"];
		Если typedoc = "pdf" Тогда
			guid = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["guid"]);
			
			Ссылка = Документы.ЗаказКлиентаБТ.ПолучитьСсылку(guid);
			
			Контрагенты = КарточкаПользователя.Контрагенты;
			Партнеры = КарточкаПользователя.Партнеры;
			Если Контрагенты.Найти(Ссылка.Контрагент) <> Неопределено И Партнеры.Найти(Ссылка.Партнер) <> Неопределено Тогда
				Идентификатор = "Заказ";
				МетаданныеСсылки = Ссылка.Метаданные();
				
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(Ссылка);
				ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);		
				КоллекцияПечатныхФорм = Неопределено;
				ОбъектыПечати = Новый СписокЗначений;
				ПараметрыВывода = Новый Структура("ДоступнаПечатьПоКомплектно, ПараметрыОтправки", Ложь, Новый Структура("Получатель, Тема, Текст"));
				
				Если Идентификатор = "Заказ" Тогда
					
					type = УправлениеБТВызовСервера.ТранслитерацияENRU(Запрос.ПараметрыURL["type"]);
					ГУИДОбработки = Запрос.ПараметрыURL["guidtype"];
					КомандаСервера = Новый Структура;
					КомандаСервера.Вставить("Имя", "БТ_"+ГУИДОбработки+"_"+type);
					
					ОбъектыДляПечати = Новый Массив;
					ОбъектыДляПечати.Добавить(Ссылка);
					
					РезультатВыполнения = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВыполнитьКоманду(КомандаСервера, ОбъектыДляПечати);
					Если РезультатВыполнения.Результат Тогда
						КоллекцияПечатныхФорм = РезультатВыполнения.КоллекцияПечатныхФорм;
					КонецЕсли;			
				КонецЕсли;
				
				
				ПФ = Новый ТабличныйДокумент;
				Для Каждого СтрокаПФ ИЗ КоллекцияПечатныхФорм Цикл
					ПФ.Вывести(СтрокаПФ.ТабличныйДокумент);
					ПФ.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЦикла;
				
				ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
				ПФ.АвтоМасштаб = Истина;
				ПФ.Записать(ИмяФайла, ТипФайлаТабличногоДокумента[typedoc]);
				ДД = Новый ДвоичныеДанные(ИмяФайла);					
				Ответ.КодСостояния = 200;
				Ответ.УстановитьТелоИзДвоичныхДанных(ДД);
				УдалитьФайлы(ИмяФайла);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция etiketsGET__old(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
			
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		
		Период = Запрос.ПараметрыURL["nom"];
		Если ЗначениеЗаполнено(Период) Тогда
			Период = Период -1;
			
			Если ТипЗнч(Запрос) = Тип("Структура") Тогда
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку;			
			Иначе
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку();
			КонецЕсли;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПараметрыЗапроса);
			ПараметрыСтруктурой = ПрочитатьJSON(ЧтениеJSON);
			
			Если ПараметрыСтруктурой.Свойство("fromdate") Тогда 
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate) Тогда
					ПараметрыСтруктурой.fromdate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.fromdate);  
					ПараметрыСтруктурой.fromdate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate), НачалоДня(ПараметрыСтруктурой.fromdate), ПараметрыСтруктурой.fromdate);
				Иначе
					ПараметрыСтруктурой.fromdate = Дата(1,1,1,0,0,0);				
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("fromdate",Дата(1,1,1,0,0,0));
			КонецЕсли;
			
			Если ПараметрыСтруктурой.Свойство("todate") Тогда
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.todate) Тогда
					ПараметрыСтруктурой.todate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.todate);
					ПараметрыСтруктурой.todate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.todate), КонецДня(ПараметрыСтруктурой.todate), ПараметрыСтруктурой.todate);
				Иначе
					ПараметрыСтруктурой.todate = ТекущаяДата();
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("todate",ТекущаяДата());
			КонецЕсли;
			
			Если НЕ ПараметрыСтруктурой.Свойство("info") Тогда
				ПараметрыСтруктурой.Вставить("info","");
			КонецЕсли;
			
			//"+20*Период+"
			//"+20*(Период+1)+"

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаНачала",ПараметрыСтруктурой.fromdate);
			Запрос.УстановитьПараметр("ДатаКонца",ПараметрыСтруктурой.todate);
			Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ПараметрыСтруктурой.info+"%");
			Запрос.УстановитьПараметр("ИспользоватьПоиск", ЗначениеЗаполнено(ПараметрыСтруктурой.info));
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказКлиентаБТТовары.Услуга КАК guid,
			               |	ЗаказКлиентаБТТовары.Услуга.Номер КАК number,
			               |	ЗаказКлиентаБТТовары.Услуга.Дата КАК date,
			               |	""0"" КАК type,
			               |	ЗаказКлиентаБТТовары.СуммаСНДС КАК summ,
			               |	ЗаказКлиентаБТТовары.Содержание КАК description,
			               |	""Заказ"" КАК typename,
			               |	ЗаказКлиентаБТТовары.Ссылка.Организация КАК organization,
			               |	ЗаказКлиентаБТТовары.Ссылка.Контрагент КАК kontragent
			               |ПОМЕСТИТЬ ВТ
			               |ИЗ
			               |	Документ.ЗаказКлиентаБТ.Товары КАК ЗаказКлиентаБТТовары
			               |ГДЕ
			               |	ЗаказКлиентаБТТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьКонтрагента
			               |				ТОГДА ЗаказКлиентаБТТовары.Ссылка.Контрагент В (&Контрагент)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьПартнера
			               |				ТОГДА ЗаказКлиентаБТТовары.Ссылка.Партнер В (&Партнер)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ ВТ2
			               |ИЗ
			               |	ВТ КАК ВТ
			               |ГДЕ
			               |	ВЫБОР
			               |			КОГДА &ИспользоватьПоиск
			               |				ТОГДА ВТ.description ПОДОБНО &СтрокаПоиска
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ 20
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ Исключаем
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ 20
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Исключаем КАК Исключаем
			               |		ПО ВТ.guid = Исключаем.guid
			               |ГДЕ
			               |	Исключаем.guid ЕСТЬ NULL";
			
			Пакет = Запрос.ВыполнитьПакет();
			
			Всего =   Пакет.Получить(Пакет.Количество()-3);
			Таблица = Пакет.Получить(Пакет.Количество()-1);
			
			count = Всего.Выгрузить()[0].Количество; 
			
			Элементы = Новый Массив();
			Выборка = Таблица.Выбрать();
			Количество = 0;
			Пока Выборка.Следующий() Цикл 
				Количество = Количество +1;
				Элемент = Новый Структура("guid, number, date, type, typename, sent, summ, summtext, ext, description");
				ЗаполнитьЗначенияСвойств(Элемент, Выборка);
				Элемент.guid = Строка(Элемент.guid.УникальныйИдентификатор());
				Элемент.sent = Строка(Элемент.sent);
				Элемент.date = Формат(Элемент.date, "ДФ=dd.MM.yyyy");
				Элементы.Добавить(Элемент);
			КонецЦикла;	
			
			ЖСОН = Новый Структура("count, list, onlist, elems", count, Период+1, 20, Элементы);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
			ЭЭ = ЗаписьJSON.Закрыть();
			
			Ответ.УстановитьТелоИзСтроки(ЭЭ);
			Ответ.КодСостояния = 200;
		Иначе
			Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя");
		КонецЕсли;
	КонецЕсли;

	Возврат Ответ;
КонецФункции


Функция ПолучитьЭлектронныеДокументы(СсылкаНаУслугу) Экспорт
	//
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаУслугу", СсылкаНаУслугу);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыДляОтправкиВОблако.Период КАК Период,
	               |	ФайлыДляОтправкиВОблако.GUID КАК GUID,
	               |	ФайлыДляОтправкиВОблако.Объект КАК Объект,
	               |	ФайлыДляОтправкиВОблако.ИмяФайла КАК ИмяФайла,
	               |	ФайлыДляОтправкиВОблако.Отправлено КАК Отправлено,
	               |	ФайлыДляОтправкиВОблако.ДД КАК ДД,
	               |	ФайлыДляОтправкиВОблако.md5 КАК md5,
	               |	ФайлыДляОтправкиВОблако.ТипВложения КАК ТипВложения
	               |ИЗ
	               |	РегистрСведений.ФайлыДляОтправкиВОблако КАК ФайлыДляОтправкиВОблако
	               |ГДЕ
	               |	ФайлыДляОтправкиВОблако.Объект = &СсылкаНаУслугу
	               |	И ФайлыДляОтправкиВОблако.ТипВложения = ЗНАЧЕНИЕ(Перечисление.ТипыВложенныхФайлов.ЭлектронныйДокумент)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокКоманд = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НоваяКоманда = Новый Структура("commandname, info, guid", Выборка.GUID, Выборка.ИмяФайла, Выборка.md5 ); 
		СписокКоманд.Добавить(НоваяКоманда);	
	КонецЦикла;
	
	Возврат СписокКоманд;
	
КонецФункции

Функция etiketsGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	КонецЕсли;
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		Период = Запрос.ПараметрыURL["num"];

		Если ЗначениеЗаполнено(Период) Тогда
			Период = Период -1;
			
			Если ТипЗнч(Запрос) = Тип("Структура") Тогда
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку;			
			Иначе
				ПараметрыЗапроса = Запрос.ПолучитьТелоКакСтроку();
			КонецЕсли;
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПараметрыЗапроса);
			ПараметрыСтруктурой = ПрочитатьJSON(ЧтениеJSON);
			
			Если ПараметрыСтруктурой.Свойство("fromdate") Тогда 
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate) Тогда
					ПараметрыСтруктурой.fromdate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.fromdate);  
					ПараметрыСтруктурой.fromdate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.fromdate), НачалоДня(ПараметрыСтруктурой.fromdate), ПараметрыСтруктурой.fromdate);
				Иначе
					ПараметрыСтруктурой.fromdate = Дата(1,1,1,0,0,0);				
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("fromdate",Дата(1,1,1,0,0,0));
			КонецЕсли;
			
			Если ПараметрыСтруктурой.Свойство("todate") Тогда
				Если ЗначениеЗаполнено(ПараметрыСтруктурой.todate) Тогда
					ПараметрыСтруктурой.todate = XMLЗначение(Тип("Дата"), ПараметрыСтруктурой.todate);
					ПараметрыСтруктурой.todate = ?(ЗначениеЗаполнено(ПараметрыСтруктурой.todate), КонецДня(ПараметрыСтруктурой.todate), ПараметрыСтруктурой.todate);
				Иначе
					ПараметрыСтруктурой.todate = ТекущаяДата();
				КонецЕсли;
			Иначе
				ПараметрыСтруктурой.Вставить("todate",ТекущаяДата());
			КонецЕсли;
			
			Если НЕ ПараметрыСтруктурой.Свойство("info") Тогда
				ПараметрыСтруктурой.Вставить("info","");
			КонецЕсли;
			
			//Если НЕ ПараметрыСтруктурой.Свойство("partner") Тогда
			//	ПараметрыСтруктурой.Вставить("partner", Справочники.Партнеры.ПустаяСсылка());
			//Иначе
			//	СсылкаНаПартнера = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(ПараметрыСтруктурой.partner));
			//	ПараметрыСтруктурой.Вставить("partner", СсылкаНаПартнера.Ссылка);			
			//КонецЕсли;
			
							
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДатаНачала",ПараметрыСтруктурой.fromdate);
			Запрос.УстановитьПараметр("ДатаКонца",ПараметрыСтруктурой.todate);
			Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ПараметрыСтруктурой.info+"%");
			Запрос.УстановитьПараметр("ИспользоватьПоиск", ЗначениеЗаполнено(ПараметрыСтруктурой.info));
			
			Запрос.УстановитьПараметр("Партнер", КарточкаПользователя.Партнеры);
			Запрос.УстановитьПараметр("Контрагент", КарточкаПользователя.Контрагенты);
			Запрос.УстановитьПараметр("ИспользоватьПартнера", КарточкаПользователя.Партнеры.Количество() > 0);
			Запрос.УстановитьПараметр("ИспользоватьКонтрагента", КарточкаПользователя.Контрагенты.Количество() > 0);
			
			//"+20*Период+"
			//"+20*(Период+1)+"
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗаказКлиентаБТТовары.Услуга КАК guid,
			               |	ЗаказКлиентаБТТовары.Услуга.Номер КАК number,
			               |	ЗаказКлиентаБТТовары.Услуга.Дата КАК date,
			               |	""0"" КАК type,
			               |	ЗаказКлиентаБТТовары.СуммаСНДС КАК summ,
			               |	ЗаказКлиентаБТТовары.Содержание КАК description,
			               |	""Заказ"" КАК typename,
			               |	ЗаказКлиентаБТТовары.Ссылка.Организация КАК organization,
			               |	ЗаказКлиентаБТТовары.Ссылка.Контрагент КАК kontragent,
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФайлыДляОтправкиВОблако.md5) КАК md5
			               |ПОМЕСТИТЬ ВТ
			               |ИЗ
			               |	Документ.ЗаказКлиентаБТ.Товары КАК ЗаказКлиентаБТТовары
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыДляОтправкиВОблако КАК ФайлыДляОтправкиВОблако
			               |		ПО ЗаказКлиентаБТТовары.Услуга = ФайлыДляОтправкиВОблако.Объект
			               |			И (ФайлыДляОтправкиВОблако.ТипВложения = ЗНАЧЕНИЕ(Перечисление.ТипыВложенныхФайлов.ЭлектронныйДокумент))
			               |ГДЕ
			               |	ЗаказКлиентаБТТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьКонтрагента
			               |				ТОГДА ЗаказКлиентаБТТовары.Ссылка.Контрагент В (&Контрагент)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |	И ВЫБОР
			               |			КОГДА &ИспользоватьПартнера
			               |				ТОГДА ЗаказКлиентаБТТовары.Ссылка.Партнер В (&Партнер)
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |	И ЗаказКлиентаБТТовары.Ссылка.Проведен = ИСТИНА
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ЗаказКлиентаБТТовары.Услуга,
			               |	ЗаказКлиентаБТТовары.Содержание,
			               |	ЗаказКлиентаБТТовары.Ссылка.Контрагент,
			               |	ЗаказКлиентаБТТовары.Ссылка.Организация,
			               |	ЗаказКлиентаБТТовары.Услуга.Номер,
			               |	ЗаказКлиентаБТТовары.Услуга.Дата,
			               |	ЗаказКлиентаБТТовары.СуммаСНДС
			               |
			               |ИМЕЮЩИЕ
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФайлыДляОтправкиВОблако.md5) > 0
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ ВТ2
			               |ИЗ
			               |	ВТ КАК ВТ
			               |ГДЕ
			               |	ВЫБОР
			               |			КОГДА &ИспользоватьПоиск
			               |				ТОГДА ВТ.description ПОДОБНО &СтрокаПоиска
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ "+20*(Период)+"
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent
			               |ПОМЕСТИТЬ Исключаем
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ "+20*(Период+1)+"
			               |	ВТ.guid КАК guid,
			               |	ВТ.number КАК number,
			               |	ВТ.date КАК date,
			               |	ВТ.type КАК type,
			               |	ВТ.summ КАК summ,
			               |	ВТ.description КАК description,
			               |	ВТ.typename КАК typename,
			               |	ВТ.organization КАК organization,
			               |	ВТ.kontragent КАК kontragent,
			               |	Исключаем.guid КАК Исключаемguid
			               |ПОМЕСТИТЬ ВТИтог
			               |ИЗ
			               |	ВТ2 КАК ВТ
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Исключаем КАК Исключаем
			               |		ПО ВТ.guid = Исключаем.guid
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТИтог.guid КАК guid,
			               |	ВТИтог.number КАК number,
			               |	ВТИтог.date КАК date,
			               |	ВТИтог.type КАК type,
			               |	ВТИтог.summ КАК summ,
			               |	ВТИтог.description КАК description,
			               |	ВТИтог.typename КАК typename,
			               |	ВТИтог.organization КАК organization,
			               |	ВТИтог.kontragent КАК kontragent
			               |ИЗ
			               |	ВТИтог КАК ВТИтог
			               |ГДЕ
			               |	ВТИтог.Исключаемguid ЕСТЬ NULL
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	number УБЫВ";
			
			Пакет = Запрос.ВыполнитьПакет();
			
			Всего =   Пакет.Получить(1);
			Таблица = Пакет.Получить(Пакет.Количество()-1);
			
			count = Всего.Выгрузить()[0].Количество; 
					
			Элементы = Новый Массив();
			Выборка = Таблица.Выбрать();
			
			Количество = 0;
			Пока Выборка.Следующий() Цикл 
				Количество = Количество +1;
				Элемент = Новый Структура("guid, info, number, date, type, summ, summtext, typename, description, typename, organization, kontragent, docs");
				ЗаполнитьЗначенияСвойств(Элемент, Выборка);
				Элемент.guid = Строка(Элемент.guid.УникальныйИдентификатор());
				Элемент.organization = Строка(Элемент.organization.УникальныйИдентификатор());
				Элемент.kontragent = Строка(Элемент.kontragent.УникальныйИдентификатор());
				Элемент.date = Формат(Элемент.date, "ДФ=dd.MM.yyyy");
				Элемент.summtext = Элемент.summ;
				Элемент.info = Элемент.description;
				
				Элемент.docs = ПолучитьЭлектронныеДокументы( Выборка.guid ); 
				
				Если Элемент.docs.Количество() > 0 Тогда
					Элементы.Добавить(Элемент);
				КонецЕсли;
				
			КонецЦикла;	
			
			ЖСОН = Новый Структура("ver, count, list, onlist, elems", "3.0", count, Период+1, 20, Элементы);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
			ЭЭ = ЗаписьJSON.Закрыть();
			
			Ответ.УстановитьТелоИзСтроки(ЭЭ);
			Ответ.КодСостояния = 200;
		
		Иначе
			Ответ.УстановитьТелоИзСтроки("Ошибка установки пользователя");
		КонецЕсли;
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция etiketGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 		
		guid = Запрос.ПараметрыURL["typedoc1"];
		
		ДД = УправлениеБТВызовСервера.ПолучитьФайлИзОблака(guid);
		Ответ.КодСостояния = 200;
		Ответ.УстановитьТелоИзДвоичныхДанных(ДД);		
	КонецЕсли;

	Возврат Ответ;
КонецФункции


Функция ОбработкаЭлементаОтбора(Ссылка, Фильтры, ИдентификаторОтчета, ЭлементОтбора)
	
	Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Для Каждого ЭлементГруппыОтбора ИЗ ЭлементОтбора.Элементы Цикл
			ОбработкаЭлементаОтбора(Ссылка, Фильтры, ИдентификаторОтчета, ЭлементГруппыОтбора);
		КонецЦикла;
	Иначе					
		//ОбработкаЭлементаОтбора(Ссылка, Фильтры, ЭлементОтбора);
		Если ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.Представление = "" Тогда
				ЛевоеЗначение = Строка(ЭлементОтбора.ЛевоеЗначение);
				ОтборСтрок = Новый Структура("ЛевоеЗначение", ЛевоеЗначение);
			Иначе
				ЛевоеЗначение = Строка(ЭлементОтбора.Представление);
				ОтборСтрок = Новый Структура("Представление", ЛевоеЗначение);
			КонецЕсли;
			ОтборСтрок.Вставить("ИдентификаторОтчета", ИдентификаторОтчета);
			СтрокиТЧ = Ссылка.ПреобразованиеИмен.НайтиСтроки(ОтборСтрок); 						
			Если СтрокиТЧ.Количество() >0 Тогда
				description = СтрокиТЧ[0].Представление;
				name		= СтрокиТЧ[0].Имя;
				element		= СтрокиТЧ[0].ТипЭлемента;
				type 		= СтрокиТЧ[0].ТипЭкспорта;
				
				elements = Новый Массив;
				
				ОтборСтрок = Новый Структура("ИдентификаторИмени", СтрокиТЧ[0].ИдентификаторИмени);
				СтрокиТЧВарианты = Ссылка.ВариантыВыбора.НайтиСтроки(ОтборСтрок); 						
				Для Каждого СтрокаТЧ ИЗ СтрокиТЧВарианты Цикл
					Если ЗначениеЗаполнено(СтрокаТЧ.ВариантВыбора) Тогда 
						elements.Добавить(СтрокаТЧ.ВариантВыбора);
					КонецЕсли;
				КонецЦикла;
				
				//Попытка 
				//	ТипЗначения = ЭлементОтбора.ПравоеЗначение.Метаданные().Имя;
				//Исключение
				//	ТипЗначения = Строка(ТипЗнч(ЭлементОтбора.ПравоеЗначение));
				//КонецПопытки;
				//СтрокаТЧ2 = Ссылка.ПреобразованиеТипов.Найти(ТипЗначения, "ТипЗначения"); 
				//Если СтрокаТЧ2 <> Неопределено Тогда 
				//	type = СтрокаТЧ2.ТипЭкспорта;
					
					ФильтСтруктура = Новый Структура("description, type, name, element", description, type, name, element);
					Если elements.Количество()>0 Тогда
						ФильтСтруктура.Вставить("elements",elements);
					КонецЕсли;
					Фильтры.Добавить(ФильтСтруктура);
				//КонецЕсли;
				
			КонецЕсли;							
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФильтры(Ссылка, Отчет, ИдентификаторОтчета, НастройкаJSON)
		//$filtres = [
		//    ["name" => "fromdata", "description" => "Дата от", "type" => "date", "element" => "input"],
		//    ["name" => "todata", "description" => "до", "type" => "date", "element" => "input"],
		//    ["name" => "typetiket", "description" => "Тип документа", "type" => "checkbox", "element" => "checkbox", "elements" => [
		//        "Авиабилеты", "ЖДБилеты", "АэроЭкспресс"
		//    ]],
		//];
	//Ссылка = Справочники.ОтчетыКлиента.ПустаяСсылка();
	
	Фильтры = Новый Массив;
	
	ВхНастройки = Неопределено;
	Если НастройкаJSON <> "" Тогда
		Попытка 
			ВхНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
			
			ВОбработка = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВернутьОбработкуПоСсылке(Отчет);
			
			Если ВОбработка <> Неопределено Тогда
				СКД = ВОбработка.СхемаКомпоновкиДанных;//ВОбработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
				URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
				ВхНастройки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(НастройкаJSON);
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Settings");
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
				ОбъектXDTO.Проверить();
				
				НастройкиОтчетаСериализатор = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				ВхНастройки.ЗагрузитьНастройки(НастройкиОтчетаСериализатор);
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	КонецЕсли;
		
	Если ВхНастройки<>Неопределено Тогда
		
		Для Каждого ЭлементОтбора ИЗ ВхНастройки.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				
				ОбработкаЭлементаОтбора(Ссылка, Фильтры, ИдентификаторОтчета, ЭлементОтбора);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Фильтры;	
КонецФункции

Функция ПолучитьДеревоДоКорня(Ссылка, Знач ЭлементВетки = Неопределено)
	
	ЭлементВетки = Новый Структура("text, guid");
	ЭлементВетки.guid = Ссылка.ИдентификаторГруппы;
	ЭлементВетки.text = Ссылка.НаименованиеГруппы;
	
		
	СтруктураОтчета = Новый Структура("text, guid, type");
	СтруктураОтчета.text = Ссылка.ПредставлениеОтчета;
	СтруктураОтчета.guid = Строка(Ссылка.ИдентификаторОтчета);
	СтруктураОтчета.type = ?(Ссылка.ТипОтчета="", "pdf", Ссылка.ТипОтчета);
	СтруктураОтчета.Вставить("filtres", ПолучитьФильтры(Ссылка.Ссылка, Ссылка.Отчет, Ссылка.ИдентификаторОтчета, Ссылка.Настройки));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(СтруктураОтчета);
	ЭлементВетки.Вставить("nodes", МассивЭлементов);
	

	//Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда
	//	Дерево = ПолучитьДеревоДоКорня(Ссылка.Родитель, СтруктураСтруктур);		
	//	СтруктураСтруктур = Дерево; 
	//КонецЕсли;
	
	Возврат ЭлементВетки; 
КонецФункции

Процедура ДобавитьОтчетВДерево(ДеревоОтчетов, Отчет) Экспорт
	
	Для Каждого ЭлементОтчета ИЗ Отчет Цикл
		ЕстьЭлемент = Ложь;
		
		Для Каждого ЭлементДерева ИЗ ДеревоОтчетов Цикл
			Если ЭлементОтчета.guid = ЭлементДерева.guid Тогда
				//Есть уже такой элемент
				ЕстьЭлемент = Истина;
				Если ЭлементОтчета.Свойство("nodes") Тогда
					ДобавитьОтчетВДерево(ЭлементДерева.nodes, ЭлементОтчета.nodes);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЭлемент Тогда
			ДеревоОтчетов.Добавить(ЭлементОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция getreportsGET(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();		
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 
		
		Партнеры = КарточкаПользователя.Партнеры;
		Партнеры.Добавить(Справочники.Партнеры.ПустаяСсылка());       //Наборы по умолчанию
		
		Контрагенты = КарточкаПользователя.Контрагенты;
		Контрагенты.Добавить(Справочники.Контрагенты.ПустаяСсылка()); //Наборы по умолчанию
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Партнер", Партнеры);
		Запрос.УстановитьПараметр("Контрагент", Контрагенты);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтчетыКлиента.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ПодходящиеЭлементы
		               |ИЗ
		               |	Справочник.ОтчетыКлиента КАК ОтчетыКлиента
		               |ГДЕ
		               |	ОтчетыКлиента.ЭтоГруппа = ЛОЖЬ
		               |	И ОтчетыКлиента.Партнер В(&Партнер)
		               |	И ОтчетыКлиента.Контрагент В(&Контрагент)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОтчетыКлиентаОтчеты.Ссылка КАК Ссылка,
		               |	ОтчетыКлиентаОтчеты.НомерСтроки КАК НомерСтроки,
		               |	ОтчетыКлиентаОтчеты.ИдентификаторГруппы КАК ИдентификаторГруппы,
		               |	ОтчетыКлиентаОтчеты.Отчет КАК Отчет,
		               |	ОтчетыКлиентаОтчеты.ПредставлениеОтчета КАК ПредставлениеОтчета,
		               |	ОтчетыКлиентаОтчеты.ВариантОтчета КАК ВариантОтчета,
		               |	ОтчетыКлиентаОтчеты.Использовать КАК Использовать,
		               |	ОтчетыКлиентаОтчеты.Фильтры КАК Фильтры,
		               |	ОтчетыКлиентаОтчеты.ФильтрыСтрокой КАК ФильтрыСтрокой,
		               |	ОтчетыКлиентаОтчеты.ИдентификаторОтчета КАК ИдентификаторОтчета,
		               |	ОтчетыКлиентаОтчеты.ТипОтчета КАК ТипОтчета
		               |ПОМЕСТИТЬ ВсеОтчеты
		               |ИЗ
		               |	ПодходящиеЭлементы КАК ПодходящиеЭлементы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтчетыКлиента.Отчеты КАК ОтчетыКлиентаОтчеты
		               |		ПО ПодходящиеЭлементы.Ссылка = ОтчетыКлиентаОтчеты.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВсеОтчеты.Ссылка КАК Ссылка,
		               |	ВсеОтчеты.НомерСтроки КАК НомерСтроки,
		               |	ВсеОтчеты.ИдентификаторГруппы КАК ИдентификаторГруппы,
		               |	ВсеОтчеты.Отчет КАК Отчет,
		               |	ВсеОтчеты.ПредставлениеОтчета КАК ПредставлениеОтчета,
		               |	ВсеОтчеты.ВариантОтчета КАК ВариантОтчета,
		               |	ВсеОтчеты.Использовать КАК Использовать,
		               |	ВсеОтчеты.Фильтры КАК Настройки,
		               |	ВсеОтчеты.ФильтрыСтрокой КАК НастройкиСтрокой,
		               |	ОтчетыКлиентаГруппыОтчетов.НаименованиеГруппы КАК НаименованиеГруппы,
		               |	ВсеОтчеты.ИдентификаторОтчета КАК ИдентификаторОтчета,
		               |	ВсеОтчеты.ТипОтчета КАК ТипОтчета
		               |ИЗ
		               |	ВсеОтчеты КАК ВсеОтчеты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтчетыКлиента.ГруппыОтчетов КАК ОтчетыКлиентаГруппыОтчетов
		               |		ПО ВсеОтчеты.Ссылка = ОтчетыКлиентаГруппыОтчетов.Ссылка
		               |			И ВсеОтчеты.ИдентификаторГруппы = ОтчетыКлиентаГруппыОтчетов.ИдентификаторГруппы";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		            
		ДеревоОтчетов = Новый Массив;	
		Пока Выборка.Следующий() Цикл
			Отчет = Новый Массив;
			Отчет.Добавить(ПолучитьДеревоДоКорня(Выборка));
			ДобавитьОтчетВДерево(ДеревоОтчетов, Отчет);
		КонецЦикла;
		
		ЖСОН = ДеревоОтчетов;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON,ЖСОН); // сериализует ОтветМассив в формат JSON
		ЭЭ = ЗаписьJSON.Закрыть();
		
		Ответ.УстановитьТелоИзСтроки(ЭЭ);
		Ответ.КодСостояния = 200;
	КонецЕсли;

	Возврат Ответ;
КонецФункции


Функция ПреобразоватьТип(Значение, Параметры, ПреобразованиеИмен, Устанавливаем)
	Если ЗначениеЗаполнено(Устанавливаем) Тогда 
		Результат = Устанавливаем; 
		Если ТипЗнч(Значение) = Тип("Дата") Тогда
			Результат = XMLЗначение(Тип("Дата"),Устанавливаем);
		ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда	
			Результат = Число(Устанавливаем);
		ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда	
			Результат = Булево(Устанавливаем);
		ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда	
			Результат = Устанавливаем;
		Иначе
			//
			ОтборВарианта = Новый Структура("ИдентификаторИмени, ВариантВыбора", ПреобразованиеИмен.ИдентификаторИмени, Устанавливаем);
			СтрокиТЧ = Параметры.Ссылка.ВариантыВыбора.НайтиСтроки(ОтборВарианта);
			Если СтрокиТЧ.Количество() >0 Тогда
				Результат = СтрокиТЧ[0].ЗначениеВарианта;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УстановкаЭлементаОтбора(Параметры, Ссылка, Фильтры, ЭлементОтбора)
	
	ИзменялисьЭлементы = Ложь;
	Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Для Каждого ЭлементГруппыОтбора ИЗ ЭлементОтбора.Элементы Цикл
			ИзменялисьЭлементы = УстановкаЭлементаОтбора(Параметры, Ссылка, Фильтры, ЭлементГруппыОтбора);
		КонецЦикла;
		
		Если ИзменялисьЭлементы Тогда
			ЭлементОтбора.Использование = Истина;
		КонецЕсли;
		
	Иначе					
		
		Если ЭлементОтбора.Использование Тогда
			Если ЗначениеЗаполнено(ЭлементОтбора.Представление) Тогда
				description = ЭлементОтбора.Представление;
			Иначе
				description = Строка(ЭлементОтбора.ЛевоеЗначение);
			КонецЕсли;
			ОтборСтрок = Новый Структура("Представление", description);
			СтрокиТЧ = Ссылка.ПреобразованиеИмен.НайтиСтроки(ОтборСтрок); 						
			Если СтрокиТЧ.Количество() >0 Тогда
				name		= СтрокиТЧ[0].Имя;
				
				Для Каждого ЭлементФильтра ИЗ Фильтры Цикл
					Если ЭлементФильтра.Ключ = name Тогда
						ЭлементОтбора.ПравоеЗначение = ПреобразоватьТип(ЭлементОтбора.ПравоеЗначение, Параметры, СтрокиТЧ[0], ЭлементФильтра.Значение);
						ЭлементОтбора.Использование = Истина;
						
						ИзменялисьЭлементы = Истина;
					КонецЕсли;
				КонецЦикла;
								
			КонецЕсли;							
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИзменялисьЭлементы;
КонецФункции

Функция ПолучитьНастройки(Отчет, Параметры, ИмпортНастроек, КарточкаПользователя)
	
	Варианты = УправлениеБТВызовСервера.ИзJSON(Параметры.ВариантОтчета);
	Для Каждого ВариантЖСОН ИЗ Варианты Цикл
		Если ВариантЖСОН.Значение.Выбран Тогда
			Вариант = ВариантЖСОН.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаJSON = Параметры.Настройки;
	Если ЗначениеЗаполнено(НастройкаJSON) Тогда
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(НастройкаJSON);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Settings");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		Настройки = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	Иначе
		Настройки = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки;
	КонецЕсли;
	
	Для Каждого ЭлементВыбора ИЗ Настройки.Отбор.Элементы Цикл
		Если Строка(ЭлементВыбора.ЛевоеЗначение) = "Контрагент" Тогда
			СЗ = Новый СписокЗначений;
			Для Каждого Контрагент ИЗ КарточкаПользователя.Контрагенты Цикл
				СЗ.Добавить(Контрагент);
			КонецЦикла;
			ЭлементВыбора.ПравоеЗначение = СЗ; 
		КонецЕсли;
		Если Строка(ЭлементВыбора.ЛевоеЗначение) = "Партнер" Тогда
			СЗ = Новый СписокЗначений;
			Для Каждого Партнер ИЗ КарточкаПользователя.Партнеры Цикл
				СЗ.Добавить(Партнер);
			КонецЦикла;
			ЭлементВыбора.ПравоеЗначение = СЗ; 
		КонецЕсли;
	КонецЦикла;
	
	Если Настройки<>Неопределено Тогда
		Для Каждого ЭлементОтбора ИЗ Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				УстановкаЭлементаОтбора(Параметры, Параметры.Ссылка, ИмпортНастроек, ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	НастройкиПользователя = Неопределено;
	НастройкаJSON = Параметры.Фильтры;
	Если ЗначениеЗаполнено(НастройкаJSON) Тогда
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(НастройкаJSON);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Settings");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		НастройкиПользователя = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	КонецЕсли;
	
	Если НастройкиПользователя<>Неопределено Тогда
		Для Каждого ЭлементОтбора ИЗ НастройкиПользователя.Отбор.Элементы Цикл
			Если ЭлементОтбора.Использование Тогда
				УстановкаЭлементаОтбора(Параметры, Параметры.Ссылка, ИмпортНастроек, ЭлементОтбора);
				
				ПользовательскийОтбор = Настройки.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
				ЗаполнитьЗначенияСвойств(ПользовательскийОтбор, ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

	Возврат Настройки;	
	
КонецФункции

Функция СформироватьОтчет(СсылкаНаОтчетКлиента, НастройкиКомпоновкиДанных)
	
	ТипОтчета = "ТабличныйДокумент";
	СведенияОВнешнейОбработке = СсылкаНаОтчетКлиента.СведенияОВнешнейОбработке();
	Если СведенияОВнешнейОбработке.Свойство("ДинамическийОтчет") Тогда
		ТипОтчета = "ДинамическийДокумент";
		ДокументРезультат = СсылкаНаОтчетКлиента.СформироватьДинамическийОтчет("", НастройкиКомпоновкиДанных);
	Иначе
		ДокументРезультат = Новый ТабличныйДокумент;
		
		СхемаКомпоновкиДанных = СсылкаНаОтчетКлиента.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");	
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных; 
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных)); 
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		КомпоновщикНастроек.Восстановить(); 
		
		// Сформируем отчет
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();

		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ); //ДанныеРасшифровки

		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина); //ДанныеРасшифровки

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	КонецЕсли;
	
	Возврат Новый Структура("ТипОтчета, ДокументРезультат", ТипОтчета, ДокументРезультат); 
КонецФункции

Функция generatereportGET(Запрос, ИмпортНастроек) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();		
	КонецЕсли;
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 
		
		typedoc = Запрос.ПараметрыURL["typedoc"];
		guid = Запрос.ПараметрыURL["guidreport1"];
				
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИдентификаторОтчета", guid);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтчетыКлиентаОтчеты.Ссылка КАК Ссылка,
		               |	ОтчетыКлиентаОтчеты.НомерСтроки КАК НомерСтроки,
		               |	ОтчетыКлиентаОтчеты.ИдентификаторГруппы КАК ИдентификаторГруппы,
		               |	ОтчетыКлиентаОтчеты.Отчет КАК Отчет,
		               |	ОтчетыКлиентаОтчеты.ПредставлениеОтчета КАК ПредставлениеОтчета,
		               |	ОтчетыКлиентаОтчеты.ВариантОтчета КАК ВариантОтчета,
		               |	ОтчетыКлиентаОтчеты.ВариантОтчетаПользовательский КАК ВариантОтчетаПользовательский,
		               |	ОтчетыКлиентаОтчеты.Использовать КАК Использовать,
		               |	ОтчетыКлиентаОтчеты.Настройки КАК Настройки,
		               |	ОтчетыКлиентаОтчеты.НастройкиСтрокой КАК НастройкиСтрокой,
		               |	ОтчетыКлиентаОтчеты.Фильтры КАК Фильтры,
		               |	ОтчетыКлиентаОтчеты.ФильтрыСтрокой КАК ФильтрыСтрокой,
		               |	ОтчетыКлиентаОтчеты.ИдентификаторОтчета КАК ИдентификаторОтчета
		               |ИЗ
		               |	Справочник.ОтчетыКлиента.Отчеты КАК ОтчетыКлиентаОтчеты
		               |ГДЕ
		               |	ОтчетыКлиентаОтчеты.ИдентификаторОтчета = &ИдентификаторОтчета";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СсылкаНаОтчетКлиента = Выборка;
			
			Отчет = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВернутьОбработкуПоСсылке(Выборка.Отчет);
		
			ЖСОН = УправлениеБТВызовСервера.ИзJSON(ИмпортНастроек);
			НастройкиКомпоновкиДанных = ПолучитьНастройки(Отчет, СсылкаНаОтчетКлиента, ЖСОН, КарточкаПользователя);
			
			ДокументРезультат = СформироватьОтчет(Отчет, НастройкиКомпоновкиДанных);
			
			Если ДокументРезультат.ТипОтчета = "ТабличныйДокумент" Тогда
				ТабличичныйДокумент = ДокументРезультат.ДокументРезультат;
				Для Каждого СтрокаТЧ ИЗ Выборка.Ссылка.НастройкаПечати Цикл
					ТабличичныйДокумент[СтрокаТЧ.Имя] = СтрокаЗначенияВЗначение(СтрокаТЧ.ТипЗначения, СтрокаТЧ.Значение)
				КонецЦикла;
				ИмяФайла = ПолучитьИмяВременногоФайла(typedoc); 
				ТабличичныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента[typedoc]);
			Иначе
				ИмяФайла = ПолучитьИмяВременногоФайла(typedoc); 
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ДокументРезультат.ДокументРезультат);
				ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.UTF8);
			КонецЕсли;
			
			Ответ.КодСостояния = 200;
			Ответ.УстановитьТелоИзДвоичныхДанных(Новый ДвоичныеДанные(ИмяФайла));
			УдалитьФайлы(ИмяФайла);
		КонецЕсли;
	КонецЕсли;	
	Возврат Ответ;
КонецФункции

//
// 							SAAS
//

Функция SAASПолучитьДанные(Запрос, ТелоЗапроса) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	
	//Запрос.ПараметрыURL.link
	
	Если ЗначениеЗаполнено(Запрос.ПараметрыURL.typeobject) И ЗначениеЗаполнено(Запрос.ПараметрыURL.link) Тогда		
		ТипОбъекта = Запрос.ПараметрыURL.typeobject;
		ГУИД = Запрос.ПараметрыURL.link; 
		
		Если Метаданные.Документы.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерДокумента = Документы[ТипОбъекта];//Документы.Услуга;
			СсылкаНаДокумент = МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ИначеЕсли Метаданные.Справочники.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерДокумента = Справочники[ТипОбъекта];//Документы.Услуга;
			СсылкаНаДокумент = МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерДокумента = ПланыВидовХарактеристик[ТипОбъекта];//Документы.Услуга;
			СсылкаНаДокумент = МенеджерДокумента.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		Иначе
			МенеджерДокумента = Документы.ДемоДок;
			СсылкаНаДокумент = Документы.ДемоДок.ПустаяСсылка();
		КонецЕсли;	
			
		Если СсылкаНаДокумент <> МенеджерДокумента.ПустаяСсылка() Тогда
			
			Настройки = Новый Структура("ВерхнийУровень, Глубина", Истина, 0); //("ВерхнийУровень", Истина);
			НовыйОбъект = ИИСервер.ВернутьОписаниеСсылки(СсылкаНаДокумент, Неопределено, Неопределено, Настройки);

			//НовыйОбъект = УправлениеБТСервер.ВернутьОписаниеСсылки(СсылкаНаДокумент);
			
			Ответ.КодСостояния = 200;
			Ответ.УстановитьТелоИзСтроки(УправлениеБТВызовСервера.ВJSON(НовыйОбъект));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция SAASУстановитьДанные(Запрос, ТелоЗапроса) Экспорт
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции


Функция ПолучитьИмяТаблицы(ИмяМенеджера)
	ИмяТаблицы = "";
	
	Если ИмяМенеджера = "Документ" Тогда
		ИмяТаблицы = "Документ";
	ИначеЕсли ИмяМенеджера = "Справочники" Тогда
		ИмяТаблицы = "Справочник";
	ИначеЕсли ИмяМенеджера = "ПланыВидовХарактеристик" Тогда
		ИмяТаблицы = "ПланВидовХарактеристик";
	КонецЕсли;
	
	Возврат ИмяТаблицы;
КонецФункции

Функция ПолучитьРезультат(МенеджерОбъекта, ТипЗапроса)
	
	//МенеджерОбъекта = Документы.ДемоДок;
	
	МД = МенеджерОбъекта.ПустаяСсылка().Метаданные();
	
	Реквизиты = Новый Массив;
	//Реквизиты.Добавить("Таблица.Ссылка");
	Для Каждого Реквизит ИЗ МД.СтандартныеРеквизиты Цикл
		Имя = Реквизит.Имя;
		Реквизиты.Добавить("Таблица."+Имя);
	КонецЦикла;
	Для Каждого Реквизит ИЗ МД.Реквизиты Цикл
		Имя = Реквизит.Имя;
		Реквизиты.Добавить("Таблица."+Имя);
	КонецЦикла;
	
	РеквизитыСтрокой = СтрСоединить(Реквизиты, ",");
	
	ПолноеИмя = МД.ПолноеИмя();
	МассивИмен = СтрРазделить(ПолноеИмя, ".");
	ИмяТаблицы = МассивИмен[0];//ПолучитьИмяТаблицы(МассивИмен[0]);
	
	Период = 0;
	
		Текст = "ВЫБРАТЬ
	               |	"+РеквизитыСтрокой+"
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	"+ПолноеИмя+" КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 0
	               |	"+РеквизитыСтрокой+"
	               |ПОМЕСТИТЬ Исключаем
	               |ИЗ
	               |	ВТ КАК Таблица
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таблица.Ссылка УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 20
	               |	"+РеквизитыСтрокой+",
	               |	Исключаем.Ссылка КАК ИсключаемСсылка
	               |ПОМЕСТИТЬ ВТИтого
	               |ИЗ
	               |	ВТ КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Исключаем КАК Исключаем
	               |		ПО Таблица.Ссылка = Исключаем.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таблица.Ссылка УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	"+РеквизитыСтрокой+"
	               |ИЗ
	               |	ВТИтого КАК Таблица
	               |ГДЕ
	               |	Таблица.ИсключаемСсылка ЕСТЬ NULL
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Таблица.Ссылка УБЫВ";
	Текст = СтрЗаменить(Текст, "ВЫБРАТЬ ПЕРВЫЕ 0", "ВЫБРАТЬ ПЕРВЫЕ "+Строка(20*Период)+Символы.ПС);
	Текст = СтрЗаменить(Текст, "ВЫБРАТЬ ПЕРВЫЕ 20", "ВЫБРАТЬ ПЕРВЫЕ "+Строка(20*(Период+1))+Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст; 
	Пакет = Запрос.ВыполнитьПакет();
	
	Всего =   Пакет.Получить(0);
	Таблица = Пакет.Получить(Пакет.Количество()-1);
	
	count = Всего.Выгрузить()[0].Количество; 
			
	Элементы = Новый Массив();
	Выгрузка = Таблица.Выгрузить();

	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//         |	Объекты.*
	//         |ИЗ
	//         |	"+ПолноеИмя+" КАК Объекты";
	//
	//Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗапроса = "fast" Тогда
		Выгрузка = Выгрузка.Скопировать(,"Ссылка");
	КонецЕсли;
	
	МассивОтветов = УправлениеБТВызовСервера.ТаблицаВМассив(Выгрузка);
	
	НовыйМассив = Новый Массив;
	Для Каждого ЭлементВыгрузки ИЗ МассивОтветов Цикл
		Ссылка = ЭлементВыгрузки.Ссылка;
		УникальныйИдентификатор = Строка(Ссылка.УникальныйИдентификатор());
		ЭлементВыгрузки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		ОбработаннаяСтрока = Новый Структура;
		Для Каждого КолонкаЭлемента ИЗ ЭлементВыгрузки Цикл
			Значение = КолонкаЭлемента.Значение; 
			Если ТипЗнч(КолонкаЭлемента.Значение) <> Тип("Дата") И 
				ТипЗнч(КолонкаЭлемента.Значение) <> Тип("Булево") И 
				ТипЗнч(КолонкаЭлемента.Значение) <> Тип("Строка") Тогда
				Значение = Строка(КолонкаЭлемента.Значение);
			КонецЕсли;
			
			ОбработаннаяСтрока.Вставить(КолонкаЭлемента.Ключ, Значение);
		КонецЦикла;
		
		НовыйМассив.Добавить(ОбработаннаяСтрока);
	КонецЦикла;

	Ответ = Новый Структура();
	Ответ.Вставить("Count", count);
	Ответ.Вставить("Data", НовыйМассив);
	
	Возврат Ответ; 
	
КонецФункции
	
Функция SAASПолучитьЛист(Запрос, ТелоЗапроса) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	//typelist = "fast", "table", "full"
	Если ЗначениеЗаполнено(Запрос.ПараметрыURL.typeobject) И ЗначениеЗаполнено(Запрос.ПараметрыURL.typelist) Тогда		
		
		ТипЗапроса = Запрос.ПараметрыURL.typelist;
		ТипОбъекта = Запрос.ПараметрыURL.typeobject;
		
		Если Метаданные.Документы.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерОбъекта = Документы[ТипОбъекта];//Документы.Услуга;
		ИначеЕсли Метаданные.Справочники.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерОбъекта = Справочники[ТипОбъекта];//Документы.Услуга;
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти(ТипОбъекта) <> Неопределено Тогда
			МенеджерОбъекта = ПланыВидовХарактеристик[ТипОбъекта];//Документы.Услуга;
		Иначе
			МенеджерОбъекта = Неопределено;
		КонецЕсли;	
			
		Если МенеджерОбъекта <> Неопределено Тогда
			ОтветСтруктура = ПолучитьРезультат(МенеджерОбъекта, ТипЗапроса);
			
			ОтветСтруктура.Вставить("ver", "1.0");
			
			Ответ.КодСостояния = 200;
			Ответ.УстановитьТелоИзСтроки(УправлениеБТВызовСервера.ВJSON(ОтветСтруктура));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

#КонецОбласти



Функция СтрокаЗначенияВЗначение(ТипЗначения, Значение) Экспорт
	
	ВхЗначения = Значение; 
	ВхТип = Тип(ТипЗначения);
	
	Если ВхТип = Тип("ОриентацияСтраницы") Тогда
		ВхЗначения = ОриентацияСтраницы[ВхЗначения];
		
	ИначеЕсли ВхТип = Тип("ЧередованиеРасположенияСтраниц") Тогда
		Если ВхЗначения = "НеИспользовать" Тогда
			ВхЗначения = ЧередованиеРасположенияСтраниц.НеИспользовать;
		ИначеЕсли ВхЗначения = "ЗеркальноСлева" Тогда
			ВхЗначения = ЧередованиеРасположенияСтраниц.ЗеркальноСлева;
		ИначеЕсли ВхЗначения = "ЗеркальноСверху" Тогда
			ВхЗначения = ЧередованиеРасположенияСтраниц.ЗеркальноСверху;
		Иначе
			Массив = Новый Массив;
			Массив.Очистить();
			Массив.Добавить(ВхТип);
			ОписаниеТипов1 = Новый ОписаниеТипов(Массив);
			ВхЗначения = ОписаниеТипов1.ПривестиЗначение(ВхЗначения);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ВхЗначения) ИЛИ ВхТип = Тип("Число") Тогда
		КЧ = Новый КвалификаторыЧисла(12,2);
		Массив = Новый Массив;
		Массив.Очистить();
		Массив.Добавить(ВхТип);
		ОписаниеТипов1 = Новый ОписаниеТипов(Массив, , ,КЧ);
		ВхЗначения = ОписаниеТипов1.ПривестиЗначение(ВхЗначения);
	КонецЕсли;
	Возврат ВхЗначения;
	
КонецФункции

Процедура УстановитьОписаниеУслуги(Услуга, Описание) Экспорт
	
	МЗ = РегистрыСведений.РеквизитыУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();
	МЗ.Услуга = Услуга;
	МЗ.ОписаниеУслуги = Описание;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ДобавитьВДерево(ЭлементыДерева, ВхМассив, Путь = "")
	
	Точка = ?(Путь = "", "", ".");
	Для Каждого ЭлементМассиваИлиСтруктуры ИЗ ВхМассив Цикл
		Если ТипЗнч(ЭлементМассиваИлиСтруктуры.Значение) = Тип("Структура") Тогда
			Элемент = ЭлементыДерева.Добавить();
			Элемент.Параметр = ЭлементМассиваИлиСтруктуры.Ключ;
			Элемент.Значение = "Структура";
			
			ДобавитьВДерево(Элемент.Строки, ЭлементМассиваИлиСтруктуры.Значение, Путь + Точка + ЭлементМассиваИлиСтруктуры.Ключ);
			
		ИначеЕсли ТипЗнч(ЭлементМассиваИлиСтруктуры.Значение) = Тип("Массив") Тогда
			Элемент = ЭлементыДерева.Добавить();
			Элемент.Параметр = ЭлементМассиваИлиСтруктуры.Ключ;
			Элемент.Значение = "Массив";
			
			ДобавитьВДерево(Элемент.Строки, ЭлементМассиваИлиСтруктуры.Значение, Путь + Точка + ЭлементМассиваИлиСтруктуры.Ключ);
		Иначе
			Элемент = ЭлементыДерева.Добавить();
			Элемент.Параметр = ЭлементМассиваИлиСтруктуры.Ключ;
			Элемент.Значение = ЭлементМассиваИлиСтруктуры.Значение;
			Элемент.Путь = Путь + Точка + ЭлементМассиваИлиСтруктуры.Ключ
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



Функция НайтиПоКоду(Менеджер, Код) Экспорт
	Если ТипЗнч(Код) = Тип("УникальныйИдентификатор") Тогда
		Результат = Менеджер.ПолучитьСсылку(Код);		
	ИначеЕсли ТипЗнч(Код) = Тип("Структура") Тогда
		Результат = Менеджер.НайтиПоКоду(Код.Код);
	Иначе	
		Результат = Код;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция НайтиСтроки(ТабличнаяЧасть, Отбор) Экспорт
	
	Если ТипЗнч(ТабличнаяЧасть) = Тип("Массив") Тогда
		Строки = Новый Массив;
		Для Каждого СтрокаВТаблице ИЗ ТабличнаяЧасть Цикл
			
			Для Каждого ЭлементОтбора ИЗ Отбор Цикл
				Если СтрокаВТаблице[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение Тогда
					Строки.Добавить(СтрокаВТаблице);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	Иначе
		Строки = ТабличнаяЧасть.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Возврат Строки;
КонецФункции



#Область ЗагрузкаУслуг

Функция ПолучитьЗначение(ВхСтруктура, ВхКлюч, Знач ГлобальныйИндекс = 0)
	
	ВхСтр = ВхСтруктура;
	ИсторияКлюча = "";
	СтрМассив = СтрРазделить(ВхКлюч,".");
	Для Каждого Ключ ИЗ СтрМассив Цикл
		Значение = Неопределено;
		
		Если Ключ = "[]" И ТипЗнч(ВхСтр) = Тип("Массив") Тогда
			Если ВхСтр.Количество()>0 Тогда 
				ВхСтр = ВхСтр[ГлобальныйИндекс];
				ГлобальныйИндекс = 0;
			Иначе
				ВхСтр = Новый Массив;
			КонецЕсли;
		ИначеЕсли Ключ = "[]" И (ТипЗнч(ВхСтр) = Тип("Структура") ИЛИ ТипЗнч(ВхСтр) = Тип("Соответствие")) Тогда
			//
		ИначеЕсли ТипЗнч(ВхСтр) = Тип("Структура") И ВхСтр.Свойство(Ключ, Значение) Тогда
			ВхСтр = Значение;
		ИначеЕсли ТипЗнч(ВхСтр) = Тип("Массив") И ВхСтр.Количество()>0 И ТипЗнч(ВхСтр[0]) = Тип("Структура") И ВхСтр[0].Свойство(Ключ, Значение) Тогда
			ВхСтр = Значение;
			
		ИначеЕсли ТипЗнч(ВхСтр) = Тип("Соответствие") И ВхСтр.Получить(Ключ) <> Неопределено Тогда
			ВхСтр = ВхСтр.Получить(Ключ);
		ИначеЕсли ТипЗнч(ВхСтр) = Тип("Массив") И ВхСтр.Количество()>0 И ТипЗнч(ВхСтр[0]) = Тип("Соответствие") И ВхСтр[0].Получить(Ключ) <> Неопределено Тогда
			ВхСтр = ВхСтр.Получить(Ключ);
			
		ИначеЕсли Ключ = "[]" И ТипЗнч(ВхСтр) = Тип("Структура") Тогда
			//Сюда он никогда не зайдет
			ВхСтр = ВхСтр;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВхСтр;
КонецФункции

Функция ПолучитьОбработанноеЗначение(СтруктураЖСОН, ОбъектJSON, ГлобальныйИндексУслуги, Обработчик = Неопределено, СтатическоеЗначение = Неопределено, ОбъектУслуга = Неопределено, ЗначениеЦикла = Неопределено, СообщенияДляИстории = Неопределено) Экспорт 
	
	Результат = Неопределено;
		Если ЗначениеЗаполнено(ОбъектJSON) ИЛИ ЗначениеЗаполнено(Обработчик) ИЛИ ЗначениеЗаполнено(СтатическоеЗначение) Тогда
			
			ЗначениеJSON = Неопределено;
			Если ЗначениеЗаполнено(СтатическоеЗначение) Тогда
				ЗначениеJSON = СтатическоеЗначение; 
			ИначеЕсли ЗначениеЗаполнено(ОбъектJSON) Тогда
				ЗначениеJSON = ПолучитьЗначение(СтруктураЖСОН, ОбъектJSON, ГлобальныйИндексУслуги);
			КонецЕсли;
			Результат = ЗначениеJSON;
			
			Попытка
				Если ЗначениеЗаполнено(Обработчик) Тогда
					Параметры = Новый Структура("ЗначениеJSON, СтруктураJSON, Услуга, ЗначениеЦикла, ГлобальныйИндексУслуги", ЗначениеJSON, СтруктураЖСОН, ОбъектУслуга, ЗначениеЦикла, ГлобальныйИндексУслуги); 
					Результат = ВыполнитьПростуюФункцию(Обработчик, Параметры);
				КонецЕсли;
			Исключение
				Если СообщенияДляИстории = Неопределено Тогда
					ВызватьИсключение ОписаниеОшибки();
				Иначе
					СообщенияДляИстории = СообщенияДляИстории + Символы.ПС + "Обработчик = "+Строка(Обработчик) + Символы.ПС + "ЗначениеЦикла = "+Строка(ЗначениеЦикла) + Символы.ПС + "ГлобальныйИндексУслуги = "+Строка(ГлобальныйИндексУслуги) + Символы.ПС + "ЗначениеJSON = "+Строка(ЗначениеJSON) + Символы.ПС + "ОбъектУслуга = "+ ОбъектУслуга +": " + ОписаниеОшибки();
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
		
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУслугуПоМД5Исходника(МД5Исходник, Услуга) 
	//
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МД5Исходника", МД5Исходник);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеквизитыУслуги.Услуга,
	               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
	               |	РеквизитыУслуги.СозданоСНастройкой,
	               |	РеквизитыУслуги.МД5Исходника
	               |ИЗ
	               |	РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
	               |ГДЕ
	               |	РеквизитыУслуги.МД5Исходника = &МД5Исходника";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Услуга = Выборка.Услуга;
		Услуга = Услуга.ПолучитьОбъект();
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьМД5Исходника(Услуга, МД5Исходник, ПервичнаяНастройка)
	
	МЗ = РегистрыСведений.РеквизитыУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга.Ссылка;
	МЗ.Прочитать();
	МЗ.Услуга = Услуга.Ссылка;
	МЗ.МД5Исходника = МД5Исходник;
	МЗ.СозданоСНастройкой = ПервичнаяНастройка;
	МЗ.Записать(Истина);
	
КонецПроцедуры	

Процедура ЗаписатьОбъектЗагрузки(ОбъектЗагрузки, ТипЗагрузки = Неопределено, Проведение = Ложь)
	Если ТипЗагрузки = 1 ИЛИ ТипЗагрузки = 2 Тогда
		Если Проведение И НЕ ОбъектЗагрузки.ПометкаУдаления Тогда
			ОбъектЗагрузки.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбъектЗагрузки.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	ИначеЕсли ТипЗагрузки = 0 Тогда
		ОбъектЗагрузки.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ЗагрузитьДанныеВУслугу(Знач ВхЖСОН, ВхУслуга, Знач НастройкаДляЗагрузки, Тест = Ложь, ИсхЖСОН = Неопределено) Экспорт
	
	Услуги = Новый Массив;
	ЕстьОшибки = Ложь;

	Если ТипЗнч(ВхЖСОН) = Тип("Структура") Тогда
		ЖСОН = ВхЖСОН.ИсходнаяМаска;
	Иначе	
		ЖСОН = ВхЖСОН; 
	КонецЕсли;
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(ЖСОН);
	MD5Маски = СтрЗаменить(НРЕг(Строка(Хеш.ХешСумма)), " ",""); 
	
	ДополнительныйФункционал = НастройкаДляЗагрузки.ДополнительныйФункционал; 
	Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ДополнительныйФункционал) И НЕ НастройкаДляЗагрузки.ДополнительныйФункционал.ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(ДополнительныйФункционал.ПутьКФайлуОтладки) Тогда
			ВОбработка = ВнешниеОбработки.Создать(ДополнительныйФункционал.ПутьКФайлуОтладки, Ложь);
		Иначе
			НавигационнаяССылка = ПолучитьНавигационнуюСсылку(ДополнительныйФункционал, "ВнешняяОбработка");
			ОбъектОписанияЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
			ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
			ИмяОбработки = ВнешниеОбработки.Подключить(НавигационнаяССылка,,Ложь,ОбъектОписанияЗащиты);
			ВОбработка = ВнешниеОбработки.Создать(ИмяОбработки);
		КонецЕсли;
		Услуги = ВОбработка.Загрузить(НастройкаДляЗагрузки, ВхЖСОН, ВхУслуга, НастройкаДляЗагрузки, Тест, ИсхЖСОН);
	КонецЕсли; 
	
	Если ТипЗнч(НастройкаДляЗагрузки) = Тип("Структура") Тогда
		Версия = "0";		
		НастройкаДляЗагрузки.Свойство("Версия", Версия);
	Иначе
		Версия = НастройкаДляЗагрузки.Версия;
	КонецЕсли;

	Если Версия <> "3" Тогда
		Если НЕ СтоитВОчереди(MD5Маски, Перечисления.ТипыОбменов.Импорт) Тогда
						
			ПоставитьВОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт);
			ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, "ПередЗагрузкой", ЖСОН, НастройкаДляЗагрузки);

			//Приведем все к одному виду - виртуальной настройки загрузки
			//НастройкаДляЗагрузки = ЭкспортНастройки(НастройкаДляЗагрузки);
			Если НастройкаДляЗагрузки.ИспользоватьПользовательскуюЗагрузку Тогда
				СообщенияДляИстории = "";
				
				МД5Исходник = Строка(УправлениеБТВызовСервера.MD5ХешСтрока(ЖСОН));
				
				ПервичнаяНастройка = НастройкаДляЗагрузки;
				Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПередДобавлениемУслуги) Тогда
					Данные = ЖСОН;
					КодМодуля = НастройкаДляЗагрузки.ОбработчикПередДобавлениемУслуги.КодФункции;
					Выполнить(КодМодуля);
					ЖСОН = Данные;
				КонецЕсли;
				
				ЖСОН = СтрЗаменить(ЖСОН, "@attributes", "_attributes"); 
				Если ТипЗнч(ЖСОН) = Тип("Строка") Тогда
					ЧтениеJSON = Новый ЧтениеJSON; 
					ЧтениеJSON.УстановитьСтроку(ЖСОН);
					СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
					ЧтениеJSON.Закрыть();
				Иначе
					СтруктураЖСОН = ЖСОН;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПослеПолученияJSON) Тогда
					Данные = ЖСОН;
					КодМодуля = НастройкаДляЗагрузки.ОбработчикПослеПолученияJSON.КодФункции;
					Выполнить(КодМодуля);		
					ЖСОН = Данные;
				КонецЕсли;
				ИсхЖСОН = ЖСОН;
				
				СоздаватьНесколькоУслуг = Истина;
				ГлобальныйИндексУслуги = 0;	
				ЗначениеЦикла = Неопределено;
				
				Пока СоздаватьНесколькоУслуг Цикл
					//Надо сделать цикл по услугам	
					
					Если ЗначениеЗаполнено(НастройкаДляЗагрузки.МассивJSON) Тогда
						ЗначениеЦиклаВсех = ПолучитьЗначение(СтруктураЖСОН, НастройкаДляЗагрузки.МассивJSON, ГлобальныйИндексУслуги);
						Если ЗначениеЦиклаВсех.Количество() > 0 Тогда
							ЗначениеЦикла = ЗначениеЦиклаВсех[ГлобальныйИндексУслуги];
						Иначе
							СоздаватьНесколькоУслуг = Ложь;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				
					Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПередСозданиемОбъекта) Тогда
						Результат = Истина;
						КодМодуля = НастройкаДляЗагрузки.ОбработчикПередСозданиемОбъекта.КодФункции;
						Выполнить(КодМодуля);
						Если НЕ Результат Тогда
							ГлобальныйИндексУслуги = ГлобальныйИндексУслуги + 1;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					СоздаватьНесколькоУслуг = Ложь;	
					СоздатьНовуюУслугу = Ложь;
					
					
					Если НЕ (ВхУслуга = Неопределено) И ГлобальныйИндексУслуги = 0 Тогда
						Услуга = ВхУслуга;
					Иначе
						Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ХарактеристикаДляПоискаУслуги) Тогда
							
							ОтборОписания = Новый Структура("Характеристика", НастройкаДляЗагрузки.ХарактеристикаДляПоискаУслуги);		
							Строки = НайтиСтроки(НастройкаДляЗагрузки.ХарактеристикиДляЗагрузки, ОтборОписания);
							
							//Если ТипЗнч(НастройкаДляЗагрузки) = Тип("Структура") Тогда
							//	Строки = Новый Массив;
							//	Для Каждого СтрокаВТаблицы ИЗ НастройкаДляЗагрузки.ХарактеристикиДляЗагрузки Цикл
							//		Если СтрокаВТаблицы.Характеристика = НастройкаДляЗагрузки.ХарактеристикаДляПоискаУслуги Тогда
							//			Строки.Добавить(СтрокаВТаблицы);
							//		КонецЕсли;
							//	КонецЦикла;
							//Иначе
							//	ОтборОписания = Новый Структура("Характеристика", НастройкаДляЗагрузки.ХарактеристикаДляПоискаУслуги);		
							//	Строки = НастройкаДляЗагрузки.ХарактеристикиДляЗагрузки.НайтиСтроки(ОтборОписания); ///ИСПРАВИТЬ !!!!
							//КонецЕсли;
							
							Если Строки.Количество() > 0 Тогда
								
								ЗначениеХарактеристики = ПолучитьОбработанноеЗначение(СтруктураЖСОН, Строки[0].ОбъектJSON, ГлобальныйИндексУслуги, Строки[0].Обработчик, Строки[0].СтатическоеЗначение, ВхУслуга, ЗначениеЦикла,СообщенияДляИстории);
								Запрос = Новый Запрос;
								//Запрос.УстановитьПараметр("НоменклатураБТ", НайтиПоКоду(Справочники.НоменклатураБТ, НастройкаДляЗагрузки.НоменклатураБТ)); //НастройкаДляЗагрузки.НоменклатураБТ);
								Запрос.УстановитьПараметр("Характеристика", НайтиПоКоду(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры, НастройкаДляЗагрузки.ХарактеристикаДляПоискаУслуги));
								Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеХарактеристики);
								Запрос.Текст = "ВЫБРАТЬ
								               |	ИнформацияПоУслуге.Услуга
								               |ИЗ
								               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
								               |ГДЕ
								               |	ИнформацияПоУслуге.Характеристика = &Характеристика
								               //|	И ИнформацияПоУслуге.Регистратор.НоменклатураБТ = &НоменклатураБТ
								               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &ЗначениеХарактеристики";
								Выгрузка = Запрос.Выполнить().Выгрузить();
								Если Выгрузка.Количество() > 0 Тогда
									УслугаСсылка = Выгрузка[0].Услуга;
									Услуга = УслугаСсылка.ПолучитьОбъект();
								Иначе
									СоздатьНовуюУслугу = Истина;	
								КонецЕсли;
							Иначе
								СоздатьНовуюУслугу = Истина;
							КонецЕсли;
						ИначеЕсли ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПоискаОбъекта) Тогда
							//
							Значение = ПолучитьОбработанноеЗначение(СтруктураЖСОН, Неопределено, ГлобальныйИндексУслуги, НастройкаДляЗагрузки.ОбработчикПоискаОбъекта, Неопределено, Услуга, ЗначениеЦикла, СообщенияДляИстории);
							Услуга = Значение;
							
						ИначеЕсли ПолучитьУслугуПоМД5Исходника(МД5Исходник, Услуга) Тогда
							//	
						Иначе				
							СоздатьНовуюУслугу = Истина;
						КонецЕсли;
					КонецЕсли;
					
					
					Если СоздатьНовуюУслугу Тогда 			
						Попытка
							Если СтрНайти(НастройкаДляЗагрузки.ОбъектЗагрузки.ПолноеИмя,"Справочник") Тогда        ///ИСПРАВИТЬ !!!!!
								Услуга = Справочники[НастройкаДляЗагрузки.ОбъектЗагрузки.Имя].СоздатьЭлемент();
								ТипЗаписи = 0;
							ИначеЕсли СтрНайти(НастройкаДляЗагрузки.ОбъектЗагрузки.ПолноеИмя,"Документ") Тогда     ///ИСПРАВИТЬ !!!!!
								Услуга = Документы[НастройкаДляЗагрузки.ОбъектЗагрузки.Имя].СоздатьДокумент();
								ТипЗаписи = 1;
							Иначе
								Услуга = Документы.Услуга.СоздатьДокумент();
								ТипЗаписи = 2;
							КонецЕсли;
						Исключение
							Услуга = Документы.Услуга.СоздатьДокумент();
							ТипЗаписи = 2;
						КонецПопытки;
					Иначе
						ТипЗаписи = 2;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(НастройкаДляЗагрузки.НоменклатураБТ) Тогда
						Услуга.НоменклатураБТ = НайтиПоКоду(Справочники.НоменклатураБТ, НастройкаДляЗагрузки.НоменклатураБТ);			
						//!!!  Услуга.ОписаниеУслуги.Загрузить(Услуга.НоменклатураБТ.Характеристики.Выгрузить());

						СписокХарактеристик = Новый Массив;
						СтарыеХарактеристики = Услуга.ОписаниеУслуги.Выгрузить();
						Услуга.ОписаниеУслуги.Очистить();
						Для Каждого СтрокаНастроек ИЗ Услуга.НоменклатураБТ.Характеристики Цикл		
							
							НоваяСтрока = Услуга.ОписаниеУслуги.Добавить();		
							НоваяСтрока.Характеристика = СтрокаНастроек.Характеристика;
							
							ОтборОписания = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);		
							Строки = СтарыеХарактеристики.НайтиСтроки(ОтборОписания);		
							Если Строки.Количество() > 0 Тогда
								Для Каждого Строка ИЗ Строки Цикл 
									НоваяСтрока.Значение = Строка.Значение;
								КонецЦикла;	
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
						
					Если НЕ Тест Тогда
						Если ТипЗаписи = 1 ИЛИ ТипЗаписи = 2 Тогда
							
							Если Услуга <> Неопределено Тогда
								Если Метаданные.Документы.Найти(Услуга.Метаданные()) <> Неопределено Тогда
									//Это документ
									Если НЕ ЗначениеЗаполнено(Услуга.Дата) Тогда
										Услуга.Дата = ТекущаяДата();
									КонецЕсли;
									Услуга.Записать(РежимЗаписиДокумента.Запись);
									Если ТипЗнч(Услуга.Ссылка) = Тип("ДокументСсылка.Услуга") Тогда
										УстановитьМД5Исходника(Услуга, МД5Исходник, ПервичнаяНастройка);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					ТЗ = Новый ТаблицаЗначений;
					ТЗ.Колонки.Добавить("ТипЗаполнения");
					ТЗ.Колонки.Добавить("ЭлементМетаданных");
					ТЗ.Колонки.Добавить("Характеристика");
					ТЗ.Колонки.Добавить("Таблица");
					ТЗ.Колонки.Добавить("ОбъектJSON");
					ТЗ.Колонки.Добавить("Обработчик");
					ТЗ.Колонки.Добавить("Приоритет");
					ТЗ.Колонки.Добавить("СтатическоеЗначение");
					ТЗ.Колонки.Добавить("НастройкаЗагрузкиУслуги");
					
					Для Каждого ОбъектДляЗагрузки ИЗ НастройкаДляЗагрузки.ОбъектыДляЗагрузки Цикл
						СтрокаТЗ = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗ, ОбъектДляЗагрузки);
						СтрокаТЗ.ТипЗаполнения = 1;			
					КонецЦикла;
					
					Для Каждого Характеристика ИЗ НастройкаДляЗагрузки.ХарактеристикиДляЗагрузки Цикл
						СтрокаТЗ = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗ, Характеристика);
						СтрокаТЗ.ТипЗаполнения = 2;
					КонецЦикла;
					
					Для Каждого ДопДанные ИЗ НастройкаДляЗагрузки.ДопДанные Цикл
						СтрокаТЗ = ТЗ.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТЗ, ДопДанные);
						СтрокаТЗ.ТипЗаполнения = 3;
					КонецЦикла;
					ТЗ.Сортировать("Приоритет Убыв");
					
					НачатьТранзакцию();
					Попытка 
						
						
						Для Каждого СтрокаТЗ ИЗ ТЗ Цикл
							
							Если СтрокаТЗ.ТипЗаполнения = 1 Тогда
								ОбъектДляЗагрузки = СтрокаТЗ; 
								ЗначениеХарактеристики = ПолучитьОбработанноеЗначение(СтруктураЖСОН, ОбъектДляЗагрузки.ОбъектJSON, ГлобальныйИндексУслуги, ОбъектДляЗагрузки.Обработчик	, ОбъектДляЗагрузки.СтатическоеЗначение, Услуга, ЗначениеЦикла,СообщенияДляИстории);
								Если ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
									Услуга[ОбъектДляЗагрузки.ЭлементМетаданных] = ЗначениеХарактеристики;
								КонецЕсли;			
								
							ИначеЕсли СтрокаТЗ.ТипЗаполнения = 2 Тогда
								Характеристика = СтрокаТЗ;
								ЗначениеХарактеристики = ПолучитьОбработанноеЗначение(СтруктураЖСОН, Характеристика.ОбъектJSON, ГлобальныйИндексУслуги, Характеристика.Обработчик	, Характеристика.СтатическоеЗначение, Услуга, ЗначениеЦикла, СообщенияДляИстории);
								Если ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
									Строка = Услуга.ОписаниеУслуги.Найти(Характеристика.Характеристика, "Характеристика");
									Если ЗначениеЗаполнено(Строка) Тогда
										Строка.Значение = ЗначениеХарактеристики;
									КонецЕсли;
								КонецЕсли;			
								
							ИначеЕсли СтрокаТЗ.ТипЗаполнения = 3 Тогда
								ДопДанные = СтрокаТЗ;
								Если НЕ Тест Тогда
									Если ЗначениеЗаполнено(ДопДанные.ОбъектJSON) Тогда
										
										ЗначениеJSON = ПолучитьЗначение(СтруктураЖСОН,ДопДанные.ОбъектJSON, ГлобальныйИндексУслуги);
										Если ЗначениеЗаполнено(ДопДанные.Обработчик) Тогда
											Параметры = Новый Структура("ЗначениеJSON, СтруктураJSON, Услуга", ЗначениеJSON, СтруктураЖСОН, Услуга); 
											ВычисленноеЗначение = ВыполнитьПростуюФункцию(ДопДанные.Обработчик, Параметры);
										Иначе
											ВычисленноеЗначение = ЗначениеJSON;
										КонецЕсли;
										
										Если ЗначениеЗаполнено(ДопДанные.НастройкаЗагрузкиУслуги) Тогда
											ТЧ = Услуга[ДопДанные.Таблица];
											ТЧ.Очистить();
											Если ТипЗнч(ВычисленноеЗначение) = Тип("Массив") Тогда
												Для Каждого ВхДопУслуга ИЗ ВычисленноеЗначение Цикл 
													ДопУслуга = ДопДанные.НастройкаЗагрузкиУслуги.ЗагрузитьДанные(ВычисленноеЗначение, ДопДанные.НастройкаЗагрузкиУслуги);
													Если ЗначениеЗаполнено(ДопУслуга) Тогда 
														НоваяСтрока = ТЧ.Добавить();
														НоваяСтрока.Услуга = ДопУслуга; 
													КонецЕсли;
												КонецЦикла;
											КонецЕсли;
											ЗаписатьОбъектЗагрузки(Услуга, ТипЗаписи, Истина); 
											//Услуга.Записать(РежимЗаписиДокумента.Проведение);

										Иначе
											//Это не загрузка ДопУслуг
											ТЧ = Услуга[ДопДанные.Таблица];
											ТЧ.Очистить();
											Если ТипЗнч(ВычисленноеЗначение) = Тип("Массив") Тогда
												Для Каждого ВхЭлементТаблицы ИЗ ВычисленноеЗначение Цикл 
													НоваяСтрока = ТЧ.Добавить();
													ЗаполнитьЗначенияСвойств(НоваяСтрока, ВхЭлементТаблицы);
												КонецЦикла;
											КонецЕсли;
											ЗаписатьОбъектЗагрузки(Услуга, ТипЗаписи, Истина);
											//Услуга.Записать(РежимЗаписиДокумента.Проведение);
										КонецЕсли;
										
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли; //Если СтрокаТЗ.ТипЗаполнения = 1 Тогда	
								
						КонецЦикла;
									
						Если НЕ Тест Тогда
							//Создаем все дополнительные объекты
							Если Услуга <> Неопределено Тогда
								Если Метаданные.Документы.Найти(Услуга.Метаданные()) <> Неопределено Тогда

									Если ТипЗаписи = 1 ИЛИ ТипЗаписи = 2 Тогда
										Если НЕ ЗначениеЗаполнено(Услуга.Дата) Тогда
											Услуга.Дата = ТекущаяДата();
										КонецЕсли;
									КонецЕсли;
									ЗаписатьОбъектЗагрузки(Услуга, ТипЗаписи, Истина);
									//Услуга.Записать(РежимЗаписиДокумента.Проведение);
								КонецЕсли;
							КонецЕсли;
									
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПослеДобавленияУслуги) Тогда
							КодМодуля = НастройкаДляЗагрузки.ОбработчикПослеДобавленияУслуги.КодФункции;
							Выполнить(КодМодуля);		
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НастройкаДляЗагрузки.МассивJSON) Тогда
							//ЗначениеЦикла = ПолучитьЗначение(СтруктураЖСОН, НастройкаДляЗагрузки.МассивJSON, ГлобальныйИндексУслуги);
							Если ТипЗнч(ЗначениеЦиклаВсех) = Тип("Массив") Тогда
								ВсегоЦиклов = ЗначениеЦиклаВсех.Количество();
								Если ВсегоЦиклов > ГлобальныйИндексУслуги+1 Тогда
									СоздаватьНесколькоУслуг = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;		
						ГлобальныйИндексУслуги = ГлобальныйИндексУслуги + 1;			
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ЗаписьЖурналаРегистрации("Загрузка данных. Ошибка выполнения",УровеньЖурналаРегистрации.Ошибка,"Регламентное задание. Загрузки", "Загрузки Бизнес трэвел", ОписаниеОшибки(), );
						ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, ОписаниеОшибки(), ЖСОН, НастройкаДляЗагрузки);
						
						ЕстьОшибки = Истина;
						//ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
					
					Если СообщенияДляИстории <> "" Тогда 
						РегистрыСведений.ИсторияОбъектов.ВставитьСообщение(Услуга, СообщенияДляИстории);
					КонецЕсли;
					
					Услуги.Добавить(Услуга);		
				КонецЦикла;	//Пока СоздаватьНесколькоУслуг Цикл
			КонецЕсли;
			
			УдалитьИзОчереди(MD5Маски, Перечисления.ТипыОбменов.Импорт);
			Результат = Новый Структура("Результат, Объекты", НЕ ЕстьОшибки, Услуги);
		Иначе
			
			Результат = Новый Структура("Результат, Объекты", Ложь, Услуги);
		КонецЕсли;
		
		
	ИначеЕсли НастройкаДляЗагрузки.Версия = "3" Тогда
		
		//Совместимость с v2
		Результат = ЗагрузитьДанныеV3(ВхЖСОН, НастройкаДляЗагрузки, ВхУслуга);
		
	КонецЕсли;
	
	Возврат Результат;//Услуги;	
КонецФункции

#КонецОбласти



#Область ИмпортДанныхV3

Функция СформироватьТестовыйJSON_V3()
	
КонецФункции

Функция ЗагрузитьДанныеV3(Знач ИсходнаяМаска, Знач НастройкаДляЗагрузки, ВхОбъект = Неопределено) Экспорт
	
	Объекты = Новый Массив;
	
	ВхСтруктура = Новый Структура;
	Если ТипЗнч(ИсходнаяМаска) = Тип("Структура") Тогда
		ВхСтруктура = ИсходнаяМаска;
		ВхСтруктура.Свойство("ИсходнаяМаска", ИсходнаяМаска);
	КонецЕсли;
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(ИсходнаяМаска);
	MD5Маски = СтрЗаменить(НРЕг(Строка(Хеш.ХешСумма)), " ",""); 
	ЕстьОшибки = Ложь;	
		
	Если НЕ СтоитВОчереди(MD5Маски, Перечисления.ТипыОбменов.Импорт) Тогда
		
		//Поставить в очередь
		ПоставитьВОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт);
		ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, "ПередЗагрузкой", ИсходнаяМаска, НастройкаДляЗагрузки);
	
		Попытка
			
			Если ВхСтруктура.Свойство("ИсходнаяМаска") Тогда
				РезультатЗапроса = Новый Структура("Результат, ВхОбъект", Истина, ВхСтруктура.ИсходнаяМаска);
			Иначе
				СерверШины = НастройкаДляЗагрузки.СерверШины; 
				Сервер = СерверШины.URL;
				Адрес = НастройкаДляЗагрузки.RESTЗапрос + "/getinfo/v3/";
				ВхТело = ИсходнаяМаска;
				Параметры = Новый Структура("Пользователь, Пароль", СерверШины.Логин, СерверШины.Пароль);
				РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, ВхТело, Параметры);
			КонецЕсли;
			
				
			Если РезультатЗапроса.Результат Тогда
				//
				НачатьТранзакцию();
				JSONСтрокой = РезультатЗапроса.ВхОбъект;
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(JSONСтрокой);
				Если УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ЗагружатьВСоответствие) Тогда
					СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON, Истина); //Очень опасно!!!
				Иначе
					СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
				КонецЕсли;
				ЧтениеJSON.Закрыть();
				
				jsonv3 = УправлениеБТВызовСервера.ПолучитьЗначение(СтруктураЖСОН, "jsonv3");
				
				Если УправлениеБТВызовСервера.Свойство(jsonv3, "services") Тогда
					//Есть данные по загрузкам услуг
					services = УправлениеБТВызовСервера.ПолучитьЗначение(jsonv3, "services"); 
					МассивУслуг = services;
					
					РезультатЗагрузки = ЗагрузитьУслугиV3(МассивУслуг, НастройкаДляЗагрузки, ВхОбъект, ИсходнаяМаска, СтруктураЖСОН);
					
					Объекты = РезультатЗагрузки.Объекты;
					
					Если РезультатЗагрузки.Результат Тогда 
						//Удалитьизочереди
						УдалитьИзОчереди(MD5Маски, Перечисления.ТипыОбменов.Импорт);
					Иначе
						ЕстьОшибки = НЕ Объекты.Результат;
					КонецЕсли;
					
				Иначе
					//Ошибка. поставим в очередь и запишем информацию	
					ЕстьОшибки = Истина;
					ОписаниеОшибки = "Не верный формат файла json";
					ОтладочнаяИнформация = ИсходнаяМаска;
					ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, ОписаниеОшибки, ОтладочнаяИнформация, НастройкаДляЗагрузки);
				КонецЕсли;
					
				ЗафиксироватьТранзакцию();				
			Иначе
				//Ошибка. поставим в очередь и запишем
				ЕстьОшибки = Истина;
				ОписаниеОшибки = РезультатЗапроса.ВхОбъект;
				ОтладочнаяИнформация = ИсходнаяМаска;
				ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, ОписаниеОшибки, ОтладочнаяИнформация, НастройкаДляЗагрузки);
			КонецЕсли;
			
		Исключение
			ОписаниеОшибкиТекст = ОписаниеОшибки();
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;

			//Ошибка. поставим в очередь и запишем информацию
			ЕстьОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибкиТекст;
			ОтладочнаяИнформация = ИсходнаяМаска;
			ЗаписатьОшибкуОчередь(MD5Маски, Перечисления.ТипыОбменов.Импорт, ОписаниеОшибки, ОтладочнаяИнформация, НастройкаДляЗагрузки);
		КонецПопытки;
	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;
		
	Возврат Новый Структура("Результат, Объекты", Не ЕстьОшибки, Объекты);
	
КонецФункции

Функция СгенерироватьОбъект(НастройкаДляЗагрузки, ВхОбъект, ИсходнаяМаска, ВходящиеПараметры) Экспорт
	
	СтруктураУслуги = ВходящиеПараметры.СтруктураУслуги;
	СтруктураРеквизитовУслуги = ВходящиеПараметры.СтруктураРеквизитовУслуги;
	СтруктураРеквизитовХарактеристики = ВходящиеПараметры.СтруктураРеквизитовХарактеристики;
	СтруктураПользовательскихРеквизитовХарактеристики = ВходящиеПараметры.СтруктураПользовательскихРеквизитовХарактеристики;
	
	ПолныйМассивУслуг = ВходящиеПараметры.ПолныйМассивУслуг;
	
	Если УправлениеБТВызовСервера.Свойство(СтруктураУслуги, "methods") Тогда
		methods = УправлениеБТВызовСервера.ПолучитьЗначение(СтруктураУслуги, "methods");
		Если УправлениеБТВызовСервера.Свойство(methods, "beforeload") Тогда
			beforeload = УправлениеБТВызовСервера.ПолучитьЗначение(methods, "beforeload");
			Попытка
				ФункцияЗагрузки = Справочники.ФункцииОписания[beforeload];
			Исключение
				ФункцияЗагрузки = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", beforeload);
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ФункцияЗагрузки) Тогда
				Результат = Истина;
				КодМодуля = ФункцияЗагрузки.КодФункции;
				Выполнить(КодМодуля);						
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	//Из v2 - для совместимости
	Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПередСозданиемОбъекта) Тогда
		Результат = Истина;
		КодМодуля = НастройкаДляЗагрузки.ОбработчикПередСозданиемОбъекта.КодФункции;
		Выполнить(КодМодуля);
	КонецЕсли;

	Если ВхОбъект = Неопределено Тогда
		ИскомаяУслуга = НайтиУслугуПоДанным(СтруктураУслуги);
		Если ЗначениеЗаполнено(ИскомаяУслуга) Тогда
			НовыйОбъект = ВернутьОписаниеСсылки(ИскомаяУслуга);
		Иначе
			НовыйОбъект = ВернутьОписаниеСсылки(Документы.Услуга.ПустаяСсылка());
		КонецЕсли;
	Иначе
		НовыйОбъект = ВернутьОписаниеСсылки(ВхОбъект);
	КонецЕсли;
	
	Для Каждого РеквизитУслуги ИЗ СтруктураУслуги Цикл
		
		Если СтруктураРеквизитовУслуги.Свойство(РеквизитУслуги.Ключ) Тогда
			//Есть в списке по умолчанию
			СтруктураРеквизита = СтруктураРеквизитовУслуги[РеквизитУслуги.Ключ];
			
			ИмяРеквизита = СтруктураРеквизита.Реквизит; 
			УстановитьЗначениеВОбъект(НовыйОбъект, НовыйОбъект[ИмяРеквизита], РеквизитУслуги.Значение, СтруктураРеквизита);
			
		ИначеЕсли СтруктураРеквизитовХарактеристики.Свойство(РеквизитУслуги.Ключ) Тогда
			//Есть в характеристиках номенклатуры	
			СтруктураХарактеристика = СтруктураРеквизитовХарактеристики[РеквизитУслуги.Ключ];
			
			НоваяСтрока = Новый Структура("Характеристика, Значение"); 
			НоваяСтрока.Характеристика = СтруктураХарактеристика.Реквизит;
			УстановитьХарактеристикуВУслугу(НовыйОбъект, НоваяСтрока.Значение, РеквизитУслуги.Значение, СтруктураХарактеристика);
			НовыйОбъект.ОписаниеУслуги.Добавить(НоваяСтрока);				
		ИначеЕсли СтруктураПользовательскихРеквизитовХарактеристики.Свойство(РеквизитУслуги.Ключ) Тогда
			//Есть в характеристиках номенклатуры	
			СтруктураХарактеристика = СтруктураПользовательскихРеквизитовХарактеристики[РеквизитУслуги.Ключ];
			
			НоваяСтрока = Новый Структура("Характеристика, Значение"); 
			НоваяСтрока.Характеристика = СтруктураХарактеристика.Реквизит;
			УстановитьХарактеристикуВУслугу(НовыйОбъект, НоваяСтрока.Значение, РеквизитУслуги.Значение, СтруктураХарактеристика);
			НовыйОбъект.ОписаниеУслуги.Добавить(НоваяСтрока);				
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьХарактеристикиВУслуге(НовыйОбъект);
	
	ПользовательскаяНастройка = НайтиПользовательскуюНастройку(НовыйОбъект, НастройкаДляЗагрузки);
	Если ЗначениеЗаполнено(ПользовательскаяНастройка) Тогда
		ТестоваяСтруктура = Новый Структура("Услуга, ПолныйМассивУслуг", СтруктураУслуги, ПолныйМассивУслуг);
		ПодключитьПользовательскуюОбработку(ПользовательскаяНастройка, ТестоваяСтруктура, НовыйОбъект); //СтруктураУслуги
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИскомаяУслуга) Тогда
		Если Год(НовыйОбъект.Дата) <> Год(ИскомаяУслуга.Дата) Тогда
			НовыйОбъект.Дата = ИскомаяУслуга.Дата;
		КонецЕсли;
		РеальныйОбъект = ИИСервер.СоздатьОбъект(НовыйОбъект, ИскомаяУслуга, Истина);
	Иначе
		РеальныйОбъект = ИИСервер.СоздатьОбъект(НовыйОбъект, , Истина);
	КонецЕсли;
	Если ТипЗнч(РеальныйОбъект) = Тип("ДокументСсылка.Услуга") Тогда
		РеальныйОбъект = РеальныйОбъект.ПолучитьОбъект();	
	КонецЕсли;
				
	//Из v2 - для совместимости
	Если ЗначениеЗаполнено(НастройкаДляЗагрузки.ОбработчикПослеДобавленияУслуги) Тогда
		КодМодуля = НастройкаДляЗагрузки.ОбработчикПослеДобавленияУслуги.КодФункции;
		Выполнить(КодМодуля);		
	КонецЕсли;
	
	Если УправлениеБТВызовСервера.Свойство(СтруктураУслуги, "methods") Тогда
		methods = УправлениеБТВызовСервера.ПолучитьЗначение(СтруктураУслуги, "methods");
		Если УправлениеБТВызовСервера.Свойство(methods, "afterload") Тогда
			afterload = УправлениеБТВызовСервера.ПолучитьЗначение(methods, "afterload");
			Если ТипЗнч(afterload) <> Тип("Массив") Тогда
				afterloadМассив = Новый Массив;
				afterloadМассив.Добавить(afterload);
			Иначе
				afterloadМассив = afterload;
			КонецЕсли;
			
			Для Каждого afterload ИЗ afterloadМассив Цикл
				Попытка
					ФункцияЗагрузки = Справочники.ФункцииОписания[afterload];
				Исключение
					ФункцияЗагрузки = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", afterload);
				КонецПопытки;
				Если ЗначениеЗаполнено(ФункцияЗагрузки) Тогда
					Результат = Истина;
					КодМодуля = ФункцияЗагрузки.КодФункции;
					Выполнить(КодМодуля);						
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РеальныйОбъект; 
	
КонецФункции


Функция ЗагрузитьУслугиV3(ИсхМассивУслуг, НастройкаДляЗагрузки, ВхОбъект, ИсходнаяМаска, СтруктураПолногоЖСОН) Экспорт
	
	РеальныйОбъект = Документы.Услуга.ПустаяСсылка();
	
	//НастройкаДляЗагрузки = Справочники.НастройкиЗагрузокУслуг.ПустаяСсылка();	
	СтруктураРеквизитовУслуги = Документы.Услуга.ПолучитьСтруктуруРеквизитов();
	СтруктураРеквизитовХарактеристики = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ПолучитьСтруктуруРеквизитов(); //Справочники.НоменклатураБТ.ПолучитьСтруктуруРеквизитов(НастройкаДляЗагрузки.НоменклатураБТ);
	СтруктураПользовательскихРеквизитовХарактеристики = ПолучитьПользовательскиеХарактеристики(); //Справочники.НоменклатураБТ.ПолучитьСтруктуруРеквизитов(НастройкаДляЗагрузки.НоменклатураБТ);
	
	ЕстьОшибки = Ложь;
	ИсходящиеОбъекты = Новый Массив;
	Для Каждого СтруктураУслуги ИЗ ИсхМассивУслуг Цикл
		
		ВходящиеПараметры = Новый Структура;
		ВходящиеПараметры.Вставить("СтруктураУслуги", СтруктураУслуги);
		ВходящиеПараметры.Вставить("СтруктураРеквизитовУслуги", СтруктураРеквизитовУслуги);
		ВходящиеПараметры.Вставить("СтруктураРеквизитовХарактеристики", СтруктураРеквизитовХарактеристики);
		ВходящиеПараметры.Вставить("СтруктураПользовательскихРеквизитовХарактеристики", СтруктураПользовательскихРеквизитовХарактеристики);
		ВходящиеПараметры.Вставить("ПолныйМассивУслуг", СтруктураПолногоЖСОН);
		РеальныйОбъект = СгенерироватьОбъект(НастройкаДляЗагрузки, ВхОбъект, ИсходнаяМаска, ВходящиеПараметры);
		
		Если НЕ РеальныйОбъект.ПометкаУдаления Тогда
			РеальныйОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Иначе
			РеальныйОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		ПрикрепитьJSONКОбъекту(РеальныйОбъект.Ссылка, НастройкаДляЗагрузки, СтруктураУслуги);
		МД5Исходник = Строка(УправлениеБТВызовСервера.MD5ХешСтрока(ИсходнаяМаска));
		УстановитьМД5Исходника(РеальныйОбъект.Ссылка, МД5Исходник, НастройкаДляЗагрузки);
		
		ИсходящиеОбъекты.Добавить(Новый Структура("Ссылка, Объект, ИсходныеДанные, НастройкаДляЗагрузки", РеальныйОбъект.Ссылка, РеальныйОбъект, СтруктураУслуги, НастройкаДляЗагрузки));
	КонецЦикла;
	
	
	Возврат Новый Структура("Результат, Объекты", НЕ ЕстьОшибки, ИсходящиеОбъекты);
	
КонецФункции

Функция НайтиУслугуПоДанным(ВхСтруктура)
	Результат = Неопределено;
	ФункцияЗагрузки = Справочники.ФункцииОписания.НайтиУслугуV3;
	ЗначениеJSON = ВхСтруктура["Synh"];
	Выполнить(ФункцияЗагрузки.КодФункции);
	Возврат Результат;
КонецФункции

Функция ПрикрепитьJSONКОбъекту(СсылкаНаОбъект, НастройкаДляЗагрузки, ВхСтруктура)
	//Запишем элемент загрузки, чтобы не перезагружать всю услугу целиком
	services = Новый Массив;
	services.Добавить(ВхСтруктура);
	
	Значение = Новый Структура();	
	Значение.Вставить("jsonv3", Новый Структура("services", services));
	
	ВхДанные = УправлениеБТВызовСервера.ВJSON(Значение);
	md5 = УправлениеБТВызовСервера.ДобавитьКУслугеИсходныйФайл(СсылкаНаОбъект, ВхДанные, "json_v3_element.file");
	УправлениеБТВызовСервера.УстановитьФайлСНастройкойВОбъект(СсылкаНаОбъект, НастройкаДляЗагрузки, md5);
	
КонецФункции

Функция УстановитьЗначениеВОбъект(Объект, Куда, Что, Как = Неопределено)
	
	Если ЗначениеЗаполнено(Что) Тогда
		Если ТипЗнч(Что) = Тип("Массив") ИЛИ ТипЗнч(Что) = Тип("Структура") ИЛИ ТипЗнч(Что) = Тип("Соответствие") Тогда
			//
			Если ЗначениеЗаполнено(Как.ФункцияПоУмолчанию) Тогда
				Результат = Что;
				ЗначениеJSON = Что;
				ИсходноеЗначениеJSON = Что;
				Если ТипЗнч(Что) = Тип("Соответствие") ИЛИ ТипЗнч(Что) = Тип("Массив") Тогда
					ЗначениеJSON = УправлениеБТВызовСервера.СоответствиеВСтруктуру(Что);
				КонецЕсли;
				Выполнить(Как.ФункцияПоУмолчанию.КодФункции);
				Куда = Результат;
			Иначе
				Куда = Что;
			КонецЕсли;
		Иначе
			Если Как <> Неопределено И ЗначениеЗаполнено(Как.ФункцияПоУмолчанию) Тогда
				Результат = Что; 
				ЗначениеJSON = Что;
				Выполнить(Как.ФункцияПоУмолчанию.КодФункции);
				Куда = Результат;
			Иначе
				Куда = Что;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

Функция УстановитьХарактеристикуВУслугу(Объект, Куда, Что, Как = Неопределено)
	
	Если ЗначениеЗаполнено(Что) Тогда
		Если ТипЗнч(Что) = Тип("Массив") ИЛИ ТипЗнч(Что) = Тип("Структура") ИЛИ ТипЗнч(Что) = Тип("Соответствие") Тогда
			Если ЗначениеЗаполнено(Как.ФункцияПоУмолчанию) Тогда
				Результат = Что; 
				ЗначениеJSON = Что;
				ИсходноеЗначениеJSON = Что;
				Если ТипЗнч(Что) = Тип("Соответствие") ИЛИ ТипЗнч(Что) = Тип("Массив") Тогда
					ЗначениеJSON = УправлениеБТВызовСервера.СоответствиеВСтруктуру(Что);
				КонецЕсли;
				Выполнить(Как.ФункцияПоУмолчанию.КодФункции);
				Куда = Результат;
			КонецЕсли;
		Иначе
			Если Как <> Неопределено И ЗначениеЗаполнено(Как.ФункцияПоУмолчанию) Тогда
				Результат = Что; 
				ЗначениеJSON = Что;
				Выполнить(Как.ФункцияПоУмолчанию.КодФункции);
				Куда = Результат;
			Иначе
				Куда = Что;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОбновитьХарактеристикиВУслуге(Услуга) 
	
	СписокХарактеристик = Новый Соответствие();
	Для Каждого СтрокаОписания ИЗ Услуга.ОписаниеУслуги Цикл
		Если ЗначениеЗаполнено(СтрокаОписания.Значение) Тогда
			Если ТипЗнч(СтрокаОписания.Характеристика) = Тип("Структура") Тогда
				СтрокаОписания.Характеристика = ИИСервер.ПолучитьСсылкуНаОбъект(СтрокаОписания.Характеристика);
			КонецЕсли;
			СписокХарактеристик.Вставить(СтрокаОписания.Характеристика, СтрокаОписания.Значение);
		КонецЕсли;
	КонецЦикла;
	
	
	Услуга.ОписаниеУслуги = Новый Массив;
	Для Каждого СтрокаНастроек ИЗ Услуга.НоменклатураБТ.Характеристики Цикл		
		
		НоваяСтрока = Новый Структура("Характеристика, Значение");		
		НоваяСтрока.Характеристика = СтрокаНастроек.Характеристика;	
		НоваяСтрока.Значение = СписокХарактеристик.Получить(НоваяСтрока.Характеристика);
				
		Услуга.ОписаниеУслуги.Добавить(НоваяСтрока);
	КонецЦикла;

КонецФункции

Функция ПолучитьПользовательскиеХарактеристики()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборХарактеристикДляНоменклатуры.Ссылка КАК Реквизит,
	               |	НаборХарактеристикДляНоменклатуры.НаименованиеJSON КАК Ключ,
	               |	НаборХарактеристикДляНоменклатуры.ФункцияПоУмолчанию КАК ФункцияПоУмолчанию
	               |ИЗ
	               |	ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры КАК НаборХарактеристикДляНоменклатуры
	               |ГДЕ
	               |	НаборХарактеристикДляНоменклатуры.Предопределенный = ЛОЖЬ
	               |	И НаборХарактеристикДляНоменклатуры.ПометкаУдаления = ЛОЖЬ
	               |	И НаборХарактеристикДляНоменклатуры.НаименованиеJSON <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ключ, Новый Структура("Реквизит, ФункцияПоУмолчанию", Выборка.Реквизит, Выборка.ФункцияПоУмолчанию));	
	КонецЦикла;
	
	Возврат Результат;
КонецФункции



Функция СтоитВОчереди(MD5Маски, ТипОбмена) Экспорт
	Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("MD5", MD5Маски);
	Запрос.УстановитьПараметр("ТипОбмена", ТипОбмена);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОчередьОбменов.MD5 КАК MD5,
	               |	ОчередьОбменов.ТипОбмена КАК ТипОбмена,
	               |	ОчередьОбменов.ДатаРегистрации КАК ДатаРегистрации,
	               |	ОчередьОбменов.ЗавершенСОшибкой КАК ЗавершенСОшибкой,
	               |	ОчередьОбменов.ДатаПоследнегоОбмена КАК ДатаПоследнегоОбмена,
	               |	ОчередьОбменов.ОписаниеОшибки КАК ОписаниеОшибки,
	               |	ОчередьОбменов.ОтладочнаяИнформация КАК ОтладочнаяИнформация
	               |ИЗ
	               |	РегистрСведений.ОчередьОбменов КАК ОчередьОбменов
	               |ГДЕ
	               |	ОчередьОбменов.MD5 = &MD5
	               |	И ОчередьОбменов.ТипОбмена = &ТипОбмена";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТекущаяДата() - Выборка.ДатаРегистрации > 60*60*12 Тогда 
			Результат = Истина;
		ИначеЕсли ТекущаяДата() - Выборка.ДатаПоследнегоОбмена < 60*60*1 Тогда
			Результат = Истина;			
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПоставитьВОчередь(MD5Маски, ТипОбмена) Экспорт
	Результат = Истина;
	МЗ = РегистрыСведений.ОчередьОбменов.СоздатьМенеджерЗаписи();
	МЗ.MD5 = MD5Маски;
	МЗ.ТипОбмена = ТипОбмена;
	МЗ.Прочитать();
	Если НЕ МЗ.Выбран() Тогда
		МЗ.MD5 = MD5Маски;
		МЗ.ТипОбмена = ТипОбмена;
		МЗ.ДатаРегистрации = ТекущаяДата();
	КонецЕсли;
	МЗ.Записать(Истина);	
	
	Возврат Результат;
КонецФункции

Функция УдалитьИзОчереди(MD5Маски, ТипОбмена) Экспорт
	Результат = Истина;
	МЗ = РегистрыСведений.ОчередьОбменов.СоздатьМенеджерЗаписи();
	МЗ.MD5 = MD5Маски;
	МЗ.ТипОбмена = ТипОбмена;
	МЗ.Прочитать();	
	Если МЗ.Выбран() Тогда
		МЗ.Удалить();;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗаписатьОшибкуОчередь(MD5Маски, ТипОбмена, ОписаниеОшибки, ОтладочнаяИнформация, ВидОбмена = "") Экспорт
	Результат = Истина;
	МЗ = РегистрыСведений.ОчередьОбменов.СоздатьМенеджерЗаписи();
	МЗ.MD5 = MD5Маски;
	МЗ.ТипОбмена = ТипОбмена;
	МЗ.Прочитать();
	МЗ.ДатаПоследнегоОбмена = ТекущаяДата();
	МЗ.ОписаниеОшибки = ОписаниеОшибки;
	МЗ.ЗавершенСОшибкой = Истина;
	МЗ.ОтладочнаяИнформация = ОтладочнаяИнформация;
	МЗ.ВидОбмена = ВидОбмена;
	МЗ.Записать(Истина);	
	
	Возврат Результат;
КонецФункции




Функция НайтиПользовательскуюНастройку(Объект, НастройкаЗагрузки)
	
	Результат = Неопределено;
	
	НоменклатураБТСсылка = Объект.НоменклатураБТ;
	//НоменклатураБТСсылка = ИИСервер.СоздатьОбъект(НоменклатураБТСтруктура);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", НастройкаЗагрузки);
	Запрос.УстановитьПараметр("НоменклатураБТ", НоменклатураБТСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиЗагрузокУслуг.Ссылка КАК Ссылка,
	               |	НастройкиЗагрузокУслуг.НоменклатураБТ КАК НоменклатураБТ,
	               |	0 КАК Приоритет
	               |ПОМЕСТИТЬ ВсеНастройки
	               |ИЗ
	               |	Справочник.НастройкиЗагрузокУслуг КАК НастройкиЗагрузокУслуг
	               |ГДЕ
	               |	НастройкиЗагрузокУслуг.Ссылка = &Ссылка
	               |	И НастройкиЗагрузокУслуг.ИспользоватьПользовательскуюЗагрузку = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НастройкиЗагрузокУслуг.Ссылка,
	               |	НастройкиЗагрузокУслуг.НоменклатураБТ,
	               |	1
	               |ИЗ
	               |	Справочник.НастройкиЗагрузокУслуг КАК НастройкиЗагрузокУслуг
	               |ГДЕ
	               |	НастройкиЗагрузокУслуг.Родитель = &Ссылка
	               |	И НастройкиЗагрузокУслуг.НоменклатураБТ = &НоменклатураБТ
	               |	И НастройкиЗагрузокУслуг.ИспользоватьПользовательскуюЗагрузку = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВсеНастройки.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ Приоритеты
	               |ИЗ
	               |	ВсеНастройки КАК ВсеНастройки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеНастройки.Ссылка КАК Ссылка,
	               |	ВсеНастройки.НоменклатураБТ КАК НоменклатураБТ,
	               |	ВсеНастройки.Приоритет КАК Приоритет
	               |ИЗ
	               |	ВсеНастройки КАК ВсеНастройки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приоритеты КАК Приоритеты
	               |		ПО ВсеНастройки.Приоритет = Приоритеты.Приоритет";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УстановитьПользовательскоеЗначениеВОбъект(Объект, JSON, Куда)
	
	ЗначениеJSON = Неопределено;
	
	Если ЗначениеЗаполнено(Куда.ОбъектJSON) ИЛИ ЗначениеЗаполнено(Куда.Обработчик) ИЛИ ЗначениеЗаполнено(Куда.СтатическоеЗначение) Тогда
		Если ЗначениеЗаполнено(Куда.СтатическоеЗначение) Тогда
			ЗначениеJSON = Куда.СтатическоеЗначение; 
		ИначеЕсли ЗначениеЗаполнено(Куда.ОбъектJSON) Тогда
			ЗначениеJSON = ПолучитьЗначение(JSON, Куда.ОбъектJSON);
			//ЗначениеJSON = JSON[Куда.ОбъектJSON];
		КонецЕсли;
	КонецЕсли;
	
	Как = Неопределено;
	Если ЗначениеЗаполнено(Куда.Обработчик) Тогда
		Как = Новый Структура("ФункцияПоУмолчанию", Куда.Обработчик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеJSON) Тогда
		УстановитьЗначениеВОбъект(Объект, Объект[Куда.ЭлементМетаданных], ЗначениеJSON, Как);
	КонецЕсли;
	
КонецФункции

Функция УстановитьПользовательскуюХарактеристикуВУслугу(Объект, JSON, Куда)
	
	ЗначениеJSON = Неопределено;
	
	Если ЗначениеЗаполнено(Куда.ОбъектJSON) ИЛИ ЗначениеЗаполнено(Куда.Обработчик) ИЛИ ЗначениеЗаполнено(Куда.СтатическоеЗначение) Тогда
		Если ЗначениеЗаполнено(Куда.СтатическоеЗначение) Тогда
			ЗначениеJSON = Куда.СтатическоеЗначение; 
		ИначеЕсли ЗначениеЗаполнено(Куда.ОбъектJSON) Тогда			
			ЗначениеJSON = ПолучитьЗначение(JSON, Куда.ОбъектJSON);
			//ЗначениеJSON = JSON[Куда.ОбъектJSON];
		КонецЕсли;
	КонецЕсли;
	
	Как = Неопределено;
	Если ЗначениеЗаполнено(Куда.Обработчик) Тогда
		Как = Новый Структура("ФункцияПоУмолчанию", Куда.Обработчик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеJSON) Тогда
		
		Для Каждого СтрокаМассива ИЗ Объект.ОписаниеУслуги Цикл
			Если СтрокаМассива.Характеристика = Куда.Характеристика Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
		УстановитьХарактеристикуВУслугу(Объект, СтрокаМассива.Значение, ЗначениеJSON, Как);
	КонецЕсли;
	
КонецФункции

Функция ПодключитьПользовательскуюОбработку(НастройкаДляЗагрузки, JSON, ВиртуальныйОбъект)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ТипЗаполнения");
	ТЗ.Колонки.Добавить("ЭлементМетаданных");
	ТЗ.Колонки.Добавить("Характеристика");
	ТЗ.Колонки.Добавить("Таблица");
	ТЗ.Колонки.Добавить("ОбъектJSON");
	ТЗ.Колонки.Добавить("Обработчик");
	ТЗ.Колонки.Добавить("Приоритет");
	ТЗ.Колонки.Добавить("СтатическоеЗначение");
	ТЗ.Колонки.Добавить("НастройкаЗагрузкиУслуги");
	
	Для Каждого ОбъектДляЗагрузки ИЗ НастройкаДляЗагрузки.ОбъектыДляЗагрузки Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, ОбъектДляЗагрузки);
		СтрокаТЗ.ТипЗаполнения = 1;			
	КонецЦикла;
	
	Для Каждого Характеристика ИЗ НастройкаДляЗагрузки.ХарактеристикиДляЗагрузки Цикл
		СтрокаТЗ = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Характеристика);
		СтрокаТЗ.ТипЗаполнения = 2;
	КонецЦикла;
	
	ТЗ.Сортировать("Приоритет Убыв");
		
	Для Каждого СтрокаТЗ ИЗ ТЗ Цикл
		
		//Это реквизит
		Если СтрокаТЗ.ТипЗаполнения = 1 Тогда
			
			УстановитьПользовательскоеЗначениеВОбъект(ВиртуальныйОбъект, JSON, СтрокаТЗ);
			
		//Это характеристика
		ИначеЕсли СтрокаТЗ.ТипЗаполнения = 2 Тогда
			
			УстановитьПользовательскуюХарактеристикуВУслугу(ВиртуальныйОбъект, JSON, СтрокаТЗ);
									
		КонецЕсли;	
			
	КонецЦикла;

КонецФункции

#КонецОбласти



Процедура ЗаполнитьХарактеристики(НоменклатураБТ, Таблица) Экспорт
	
	Для Каждого СтрокаНастроек ИЗ НоменклатураБТ.Характеристики Цикл		
		
		ОтборОписания = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);		
		Строки = Таблица.НайтиСтроки(ОтборОписания);
		Если Строки.Количество() <> 1 Тогда
			Для Каждого Строка ИЗ Строки Цикл 
				Таблица.Удалить(Строка);
			КонецЦикла;	
			НоваяСтрока = Таблица.Добавить();		
			НоваяСтрока.Характеристика = СтрокаНастроек.Характеристика;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры



Процедура ЗаписатьGUID(Ссылка) Экспорт
	
	// регистр УникальныеИдентификаторы
	МЗ = РегистрыСведений.УникальныеИдентификаторы.СоздатьМенеджерЗаписи();
	МЗ.Объект = Ссылка;
	МЗ.Прочитать();
	Если Не МЗ.Выбран() Тогда
		МЗ.Объект = Ссылка;
	    МЗ.GUID = Строка(Ссылка.УникальныйИдентификатор());
	    МЗ.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьGUID(Ссылка) Экспорт
	
	МЗ = РегистрыСведений.УникальныеИдентификаторы.СоздатьМенеджерЗаписи();
	МЗ.Объект = Ссылка;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		МЗ.Удалить();		
	КонецЕсли;
	
КонецПроцедуры



Функция ОтправитьФайлВШину(URLШины, RESTШины, ИмяФайла, ДвоичноеСодержимоеФайла)
	
	Результат = Ложь;
	
	РЕСТ = Новый HTTPЗапрос("/"+RESTШины+"/uploadfile/"+ИмяФайла+"/");  //"https://"+URLШины+
	РЕСТ.УстановитьТелоИзДвоичныхДанных(ДвоичноеСодержимоеФайла);
	
	Соединение = Новый HTTPСоединение(URLШины,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("POST", РЕСТ);  // HTTP/1.1
	Если Результат.КодСостояния = 200 Тогда
		ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат; 	
	
КонецФункции

Процедура ПроверкаЧтенияФайлов(ВписокФайлов)
	
	Для Каждого Файл ИЗ ВписокФайлов Цикл
		Сообщить(Файл.Имя);	
	КонецЦикла;		
	Сообщить("Всего файлов: "+ ВписокФайлов.Количество());
	
КонецПроцедуры

Процедура ЗагрузкаИзКаталогов(НастройкаЗагрузки, Проверка = Ложь) Экспорт
	
	ИменаФайлов = Новый Массив;	
	Если ВРег(Лев(НастройкаЗагрузки.ПутьКПапке,3)) = "FTP" Тогда
		//Это ФТП
		ОписаниеФайла = Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение");
		
		СерверПолныйПуть = СтрЗаменить(НРег(НастройкаЗагрузки.ПутьКПапке), "ftp://", ""); 
		Длина = СтрНайти(СерверПолныйПуть, "/");
		Сервер = Лев(СерверПолныйПуть, ?(ЗначениеЗаполнено(Длина) , Длина-1, СтрДлина(СерверПолныйПуть))); 
		ПутьНаСервере = СокрЛП(Сред(СерверПолныйПуть, ?(ЗначениеЗаполнено(Длина) , Длина, СтрДлина(Сервер))));
		Если ПутьНаСервере = "" Тогда
			ПутьНаСервере = "/";
		КонецЕсли;
		
		ssl4 = Неопределено;
		Если НастройкаЗагрузки.ЗащищенноеСоединение Тогда
			ssl4 = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
		КонецЕсли;
		ФТП = Новый FTPСоединение(Сервер, НастройкаЗагрузки.Порт , НастройкаЗагрузки.Пользователь, НастройкаЗагрузки.Пароль, , НастройкаЗагрузки.ПассивноеПодключение, 30, ssl4);
		Файлы = ФТП.НайтиФайлы(ПутьНаСервере, "*.*", Ложь); 
		Если Проверка Тогда
			ПроверкаЧтенияФайлов(Файлы);
		Иначе	
			Для Каждого Файл ИЗ Файлы Цикл		
				Если Файл.ЭтоФайл() Тогда
					URLШины = НастройкаЗагрузки.ЗагрузкаУслуг.СерверШины.URL;
					RESTШины = НастройкаЗагрузки.ЗагрузкаУслуг.RESTЗапрос;
					ИмяФайла = Файл.Имя;
					
					ВремИмя = ПолучитьИмяВременногоФайла(Файл.Расширение);
					ФТП.Получить(Файл.ПолноеИмя, ВремИмя);
					СодержимоеФайла = Новый ДвоичныеДанные(ВремИмя); 
					
					Отправлено = ОтправитьФайлВШину(URLШины, RESTШины, ИмяФайла, СодержимоеФайла);
					
					Если Отправлено И НЕ Проверка Тогда 
						
						Если ЗначениеЗаполнено(НастройкаЗагрузки.КопироватьВПапкуПослеЗагрузки) Тогда 
							КопироватьВПапкуПослеЗагрузки = СтрЗаменить(НастройкаЗагрузки.КопироватьВПапкуПослеЗагрузки, "[ТекущаяДата]", Формат(ТекущаяДата(), "ДФ=yyyyMMdd"));							
							СоздатьКаталог(КопироватьВПапкуПослеЗагрузки);
							КопироватьФайл(ВремИмя, КопироватьВПапкуПослеЗагрузки+"\"+Файл.Имя);
						КонецЕсли;
						
						Если НастройкаЗагрузки.УдалятьПослеЗагрузки Тогда
							ФТП.Удалить(Файл.ПолноеИмя);
						КонецЕсли;
					КонецЕсли;
					УдалитьФайлы(ВремИмя);
				КонецЕсли;
			КонецЦикла;
			
			Сообщить("Загрузили: "+Файлы.Количество()+" файлов");
		КонецЕсли;
		
	Иначе
		
		Файлы = НайтиФайлы(НастройкаЗагрузки.ПутьКПапке, "*.*", Ложь); 
		Если Проверка Тогда
			ПроверкаЧтенияФайлов(Файлы);
		Иначе	
			Для Каждого Файл ИЗ Файлы Цикл		
				Если Файл.ЭтоФайл() Тогда
					URLШины = НастройкаЗагрузки.ЗагрузкаУслуг.СерверШины.URL;
					RESTШины = НастройкаЗагрузки.ЗагрузкаУслуг.RESTЗапрос;
					ИмяФайла = Файл.Имя;
					СодержимоеФайла = Новый ДвоичныеДанные(Файл.ПолноеИмя); 
					
					Отправлено = ОтправитьФайлВШину(URLШины, RESTШины, ИмяФайла, СодержимоеФайла);
					
					Если Отправлено И НЕ Проверка Тогда 
						Если ЗначениеЗаполнено(НастройкаЗагрузки.КопироватьВПапкуПослеЗагрузки) Тогда
							КопироватьВПапкуПослеЗагрузки = СтрЗаменить(НастройкаЗагрузки.КопироватьВПапкуПослеЗагрузки, "[ТекущаяДата]", Формат(ТекущаяДата(), "ДФ=yyyyMMdd"));							
							СоздатьКаталог(КопироватьВПапкуПослеЗагрузки);
							КопироватьФайл(Файл.ПолноеИмя, КопироватьВПапкуПослеЗагрузки+"\"+Файл.Имя);
						КонецЕсли;
											
						Если НастройкаЗагрузки.УдалятьПослеЗагрузки Тогда 
							УдалитьФайлы(Файл.ПолноеИмя);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		
		Сообщить("Загрузили: "+Файлы.Количество()+" файлов");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузкаВКаталог(НастройкаЗагрузки, ОписаниеФайла, Проверка = Ложь) Экспорт
	
	//ОписаниеФайла = [ПутьКФайлу, Имя]
	ИменаФайлов = Новый Массив;	
	Если ВРег(Лев(НастройкаЗагрузки.ПутьКПапке,3)) = "FTP" Тогда
		//Это ФТП
		ОписаниеФайла = Новый Структура("Имя, ИмяБезРасширения, ПолноеИмя, Путь, Расширение");
		
		Сервер = СтрЗаменить(НРег(НастройкаЗагрузки.ПутьКПапке), "ftp://", ""); 
		Длина = СтрНайти(Сервер, "/");
		Сервер = Лев(Сервер, ?(ЗначениеЗаполнено(Длина) , Длина-1, СтрДлина(Сервер))); 
		
		ssl4 = Неопределено;
		Если НастройкаЗагрузки.ЗащищенноеСоединение Тогда
			ssl4 = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
		КонецЕсли;
		ФТП = Новый FTPСоединение(Сервер, НастройкаЗагрузки.Порт , НастройкаЗагрузки.Пользователь, НастройкаЗагрузки.Пароль, , НастройкаЗагрузки.ПассивноеПодключение, 30, ssl4);
		Файлы = ФТП.НайтиФайлы("/", "*.*", Ложь); 
		Если Проверка Тогда
			ПроверкаЧтенияФайлов(Файлы);
		Иначе	
			ФТП.Записать(ОписаниеФайла.ПутьКФайлу, ОписаниеФайла.Имя);
			Сообщить("Выгрузили: "+ОписаниеФайла.Имя);
		КонецЕсли;
		
	Иначе
		
		Файлы = НайтиФайлы(НастройкаЗагрузки.ПутьКПапке, "*.*", Ложь); 
		Если Проверка Тогда
			ПроверкаЧтенияФайлов(Файлы);
		Иначе	
			ПереместитьФайл(ОписаниеФайла.ПутьКФайлу, НастройкаЗагрузки.ПутьКПапке + ОписаниеФайла.Имя);
			Сообщить("Выгрузили: "+ОписаниеФайла.Имя);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры


Процедура ВыполнитьВыгрузкаПапокИFTPВШину()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗагрузкиВыгрузкиФайловИзДиректорий.Ссылка
	               |ИЗ
	               |	Справочник.ЗагрузкиВыгрузкиФайловИзДиректорий КАК ЗагрузкиВыгрузкиФайловИзДиректорий
	               |ГДЕ
	               |	ЗагрузкиВыгрузкиФайловИзДиректорий.Загружать = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УправлениеБТСервер.ЗагрузкаИзКаталогов(Выборка.Ссылка, Ложь);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузкаДанныхИзШины()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиЗагрузокУслуг.Ссылка КАК Загрузка,
	               |	НастройкиЗагрузокУслуг.СерверШины КАК Сервер
	               |ИЗ
	               |	Справочник.НастройкиЗагрузокУслуг КАК НастройкиЗагрузокУслуг
	               |ГДЕ
	               |	НастройкиЗагрузокУслуг.Использовать = ИСТИНА";
	Объект = Запрос.Выполнить().Выбрать();
	
	Сервер = УправлениеБТВызовСервера.ИдентификаторБД();//СтрокаСоединенияИнформационнойБазы();
	Пока Объект.Следующий() Цикл
		
			ОбъектыЖСОН = УправлениеБТВызовСервера.ЗагрузитьСписокНаСервере(Сервер, , Объект.Загрузка);		
			Список = Новый Массив;
			Если ТипЗнч(ОбъектыЖСОН) = Тип("Структура") И ОбъектыЖСОН.Свойство("message", Список) Тогда
				Для Каждого ЭлементСписка ИЗ Список Цикл 
					ИмяФайла = Формат(ЭлементСписка,"ЧРД=.; ЧГ=");			
					
					Попытка
						ВхОбъект = УправлениеБТВызовСервера.ЗагрузитьФайлНаСервере(Сервер, Объект.Загрузка, ИмяФайла);
						Результат = УправлениеБТВызовСервера.ЗагрузитьДанныеВУслугу(ВхОбъект, Неопределено, Объект.Загрузка);
						
						Если ТипЗнч(Результат) = Тип("Структура") Тогда
							Если Результат.Результат Тогда
								УправлениеБТВызовСервера.ОтметитьЧтоФайлЗагружен(Сервер, Объект.Загрузка, ИмяФайла);
							КонецЕсли;
						Иначе
							УправлениеБТВызовСервера.ОтметитьЧтоФайлЗагружен(Сервер, Объект.Загрузка, ИмяФайла);
						КонецЕсли;						
						//УправлениеБТВызовСервера.ОтметитьЧтоФайлЗагружен(Сервер, Объект.Загрузка, ИмяФайла);
					Исключение	
						ЗаписьЖурналаРегистрации("Фоновое задание. Ошибка выполнения",УровеньЖурналаРегистрации.Ошибка,"Регламентное задание. Загрузки","Загрузки Бизнес трэвел",ОписаниеОшибки(),);
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбновитьМаркетПлейс()
	МаркетПлейсВызовСервера.ОбновитьКомпонентыМаркетПлейс();
КонецПроцедуры

Процедура АвтосозданиеДокументов()
	//
	СсылкаНаФункцию = Справочники.ФункцииОписания.АвтозаполнениеДокументов;
	Выполнить(СсылкаНаФункцию.КодФункции);
	
КонецПроцедуры

Процедура ФоновоеЗадание(РегламентноеЗадание) Экспорт
	//
	ДатаНачала = ТекущаяДата();
	
	МЗ = РегистрыСведений.ИсторияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	МЗ.РегламентноеЗадание = РегламентноеЗадание;
	МЗ.ДатаНачалаПоследнегоЗапуска = ДатаНачала;
	МЗ.Записать(Истина);
	
	ЗавершеноСОшибкой = Ложь;
	Попытка
		Если РегламентноеЗадание.Предопределенный Тогда
			//
			Если РегламентноеЗадание = Справочники.РегламентныеЗадачи.ВыгрузкаПапокИFTPВШину Тогда
				ВыполнитьВыгрузкаПапокИFTPВШину();	
			ИначеЕсли РегламентноеЗадание = Справочники.РегламентныеЗадачи.ЗагрузкаДанныхИзШины Тогда
				ЗагрузкаДанныхИзШины();
			ИначеЕсли РегламентноеЗадание = Справочники.РегламентныеЗадачи.ВыгрузкаВПапкуИлиFTP Тогда
				ВыгрузкаДанныхВПапки();
			ИначеЕсли РегламентноеЗадание = Справочники.РегламентныеЗадачи.ОбновлениеМаркетПлейс Тогда
				ОбновитьМаркетПлейс();
			ИначеЕсли РегламентноеЗадание = Справочники.РегламентныеЗадачи.АвтосозданиеДокументов Тогда				
				АвтосозданиеДокументов();
			КонецЕсли;
		Иначе
			КодФункции = РегламентноеЗадание.ФункцияВыполнения.КодФункции;	
			Выполнить(КодФункции);
		КонецЕсли;	
	Исключение
		//Была ошибка при работе
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Фоновое задание. Ошибка выполнения",УровеньЖурналаРегистрации.Ошибка,"Регламентное задание. Загрузки","Загрузки Бизнес трэвел",ОписаниеОшибки,);
		ЗавершеноСОшибкой = Истина;
	КонецПопытки;
	
	МЗ = РегистрыСведений.ИсторияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	МЗ.РегламентноеЗадание = РегламентноеЗадание;
	МЗ.ДатаНачалаПоследнегоЗапуска = ДатаНачала;
	МЗ.ДатаЗавершенияПоследнегоЗапуска = ТекущаяДата();
	МЗ.ЗавершеноСОшибкой = ЗавершеноСОшибкой; 
	МЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ЗагрузкиБТ(ФайловаяВерсия = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентныеЗадачи.Ссылка,
	               |	РегламентныеЗадачи.Расписание,
	               |	РегламентныеЗадачи.ФункцияВыполнения,
	               |	РегламентныеЗадачи.Выполнять,
	               |	ЕСТЬNULL(ИсторияРегламентныхЗаданийСрезПоследних.ДатаНачалаПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаПоследнегоЗапуска,
	               |	ЕСТЬNULL(ИсторияРегламентныхЗаданийСрезПоследних.ДатаЗавершенияПоследнегоЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗавершенияПоследнегоЗапуска,
	               |	РегламентныеЗадачи.Наименование
	               |ИЗ
	               |	Справочник.РегламентныеЗадачи КАК РегламентныеЗадачи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегламентныхЗаданий КАК ИсторияРегламентныхЗаданийСрезПоследних
	               |		ПО (ИсторияРегламентныхЗаданийСрезПоследних.РегламентноеЗадание = РегламентныеЗадачи.Ссылка)
	               |ГДЕ
	               |	РегламентныеЗадачи.Выполнять = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Хранилище = Выборка.Расписание;
		Расписание = Хранилище.Получить();
		
		ТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(ТекущаяДата(), Выборка.ДатаНачалаПоследнегоЗапуска, Выборка.ДатаЗавершенияПоследнегоЗапуска);
		Если ТребуетсяВыполнение Тогда
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(Выборка.Ссылка);
			
			///Удалить проверку в будущем, переделать всё на очереди
			ДатаЗавершенияЕсть = Истина;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ИсторияРегламентныхЗаданий.ДатаЗавершенияПоследнегоЗапуска
			               |ИЗ
			               |	РегистрСведений.ИсторияРегламентныхЗаданий КАК ИсторияРегламентныхЗаданий
			               |ГДЕ
			               |	ИсторияРегламентныхЗаданий.РегламентноеЗадание = &РегламентноеЗадание";
			Запрос.УстановитьПараметр("РегламентноеЗадание",Выборка.Ссылка);
			Выборка2 = Запрос.Выполнить().Выбрать();
			Если Выборка2.Следующий() Тогда
				ДатаЗавершенияЕсть = ЗначениеЗаполнено(Выборка2.ДатаЗавершенияПоследнегоЗапуска);
				Если НЕ ДатаЗавершенияЕсть Тогда
					МинутПростоя = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ВремяМаксимальногоПростоя);
					Если ТипЗнч(МинутПростоя) = Тип("Число") И Выборка.ДатаНачалаПоследнегоЗапуска+МинутПростоя*60 < ТекущаяДата() Тогда
						ДатаЗавершенияЕсть = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			Если ДатаЗавершенияЕсть Тогда
				Если ФайловаяВерсия Тогда
					УправлениеБТСервер.ФоновоеЗадание(Выборка.Ссылка);
				Иначе
					Задание = ФоновыеЗадания.Выполнить("УправлениеБТСервер.ФоновоеЗадание", ПараметрыЗадания, , Выборка.Наименование); 
				КонецЕсли;
			КонецЕсли;
		
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры




//Загрузка данных в услугу из ранее загруженного исходника
//			 
//
Функция ЗагрузкаИзИсходника(Объект, ДД = Неопределено) Экспорт
	
	ЕстьИсходныйФайл = Ложь;
	Ссылка = Объект.Ссылка;
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.Объект,
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.ИмяФайла,
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.ТипВложения,
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.md5,
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.ДД,
		               |	РеквизитыУслуги.СозданоСНастройкой,
		               |	ФайлыДляОтправкиВОблакоСрезПоследних.Период КАК Период
		               |ИЗ
		               |	РегистрСведений.ФайлыДляОтправкиВОблако.СрезПоследних(
		               |			&ДатаПериода,
		               |			Объект = &Объект
		               |				И ИмяФайла = ""source.file""
		               |				И ТипВложения = ЗНАЧЕНИЕ(Перечисление.ТипыВложенныхФайлов.Системный)) КАК ФайлыДляОтправкиВОблакоСрезПоследних
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
		               |		ПО ФайлыДляОтправкиВОблакоСрезПоследних.Объект = РеквизитыУслуги.Услуга
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Период УБЫВ";
		Запрос.УстановитьПараметр("Объект", Ссылка);
		Запрос.УстановитьПараметр("ДатаПериода", ТекущаяДата());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда				
			//ВрИмя = ПолучитьИмяВременногоФайла(); 
			ДД = УправлениеБТВызовСервера.ПолучитьФайлИзОблака(Выборка.md5);
			
			Запрос = Новый HTTPЗапрос;
			Запрос.УстановитьТелоИзДвоичныхДанных(ДД);
			ЖСОН = Запрос.ПолучитьТелоКакСтроку();
			
			НастройкаДляЗагрузки = Выборка.СозданоСНастройкой;
			ИсхЖСОН = "";
			
			Если НастройкаДляЗагрузки.Версия = "3" Тогда
				ЗагрузитьДанныеВУслугу(ЖСОН, , НастройкаДляЗагрузки,,ИсхЖСОН);
			Иначе
				ЗагрузитьДанныеВУслугу(ЖСОН, Объект, НастройкаДляЗагрузки,,ИсхЖСОН);
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ИсхЖСОН) Тогда
				УправлениеБТВызовСервера.ДобавитьКУслугеИсходныйФайл(Объект.Ссылка, ИсхЖСОН, "json.file");
			КонецЕсли;

			ЕстьИсходныйФайл = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьИсходныйФайл; 
КонецФункции



Функция СтруктураФизЛица(Знач ДатаРождения = Неопределено, Знач Пол = Неопределено, Знач ФИОАнг = Неопределено, Знач СписокДокументов = Неопределено) Экспорт
	//Параметры - Структура
	//		ДатаРождения
	//      Пол
	//		ФИОАнг
	//		СписокДокументов - Массив
	Параметры = Новый Структура(
		"ДатаРождения, Пол, ФИОАнг, СписокДокументов",
		ДатаРождения, Пол, ФИОАнг, СписокДокументов
	);
	Если СписокДокументов = Неопределено Тогда
		Параметры.СписокДокументов = Новый Массив;
	ИначеЕсли ТипЗнч(СписокДокументов) = Тип("Структура") Тогда
		Параметры.СписокДокументов = Новый Массив;
		Параметры.СписокДокументов.Добавить(СписокДокументов);
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

Функция СтруктураДокументаФЗ(Знач ВидДокумента = Неопределено, Знач Серия = Неопределено, Знач Номер = Неопределено, Знач ДатаВыдачи = Неопределено, Знач СрокДействия = Неопределено, Знач КемВыдан = Неопределено, Знач КодПодразделения = Неопределено, Знач ЯвляетсяДокументомУдостоверяющимЛичность = Неопределено, Знач Представление = Неопределено) Экспорт
	//		СписокДокументов - Структура
	//				ВидДокумента
	//				Серия
	//				Номер
	//				ДатаВыдачи
	//				СрокДействия
	//				КемВыдан
	//				КодПодразделения
	//				ЯвляетсяДокументомУдостоверяющимЛичность
	//				Представление
	
	СписокДокументов = Новый Структура(
		"ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, КодПодразделения, ЯвляетсяДокументомУдостоверяющимЛичность, Представление",
		ВидДокумента, Серия, Номер, ДатаВыдачи, СрокДействия, КемВыдан, КодПодразделения, ЯвляетсяДокументомУдостоверяющимЛичность, Представление
	);
	Возврат СписокДокументов;
КонецФункции

Функция СоздатьКомандируемого(ВхФИО, Знач Параметры) Экспорт
	
	//ФИО - Строка (Структура("Ф","И","О"))
	//Параметры - Структура
	//		ДатаРождения
	//      Пол
	//		ФИОАнг = Строка (Структура("L","F","S"))
	//		СписокДокументов - Массив
	//				ВидДокумента
	//				Серия
	//				Номер
	//				ДатаВыдачи
	//				СрокДействия
	//				КемВыдан
	//				КодПодразделения
	//				ЯвляетсяДокументомУдостоверяющимЛичность
	//				Представление
	
	ФИОСтруктура = Новый Структура("Ф, И, О");
	Если ТипЗнч(ВхФИО) = Тип("Строка") Тогда
		ФИО	= ВхФИО;
		МасивФИО = СтрРазделить(ФИО, " ", Ложь); 
	Иначе
		ФИОСтруктура = ВхФИО; 
		ФИО = ВхФИО.Ф;
		ФИО = СокрЛП(ФИО)+" "+ВхФИО.И;
		ФИО = СокрЛП(ФИО)+" "+ВхФИО.О;
		ФИО = СокрЛП(ФИО);
	КонецЕсли;
	
	ФИОАнгСтруктура = Новый Структура("L, F, S");
	Если ТипЗнч(Параметры.ФИОАнг) = Тип("Структура") Тогда		
		ФИОАнгСтруктура = Параметры.ФИОАнг;
		
		ФИОАнг = Параметры.ФИОАнг.L;
		ФИОАнг = СокрЛП(ФИОАнг)+" "+Параметры.ФИОАнг.F;
		ФИОАнг = СокрЛП(ФИОАнг)+" "+Параметры.ФИОАнг.S;
		ФИОАнг = СокрЛП(ФИОАнг);
		
		Параметры.ФИОАнг = ФИОАнг;
	КонецЕсли;
	
	ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	КомандированныйСсылка = Справочники.Командированные.ПустаяСсылка();
	
	Для Каждого Документ ИЗ Параметры.СписокДокументов Цикл
		
		Если ЗначениеЗаполнено(Документ.Серия) И ЗначениеЗаполнено(Документ.Номер) Тогда 
			//Ищем человека по серии номеру 
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ДокументыФизическихЛиц.Физлицо КАК Физлицо,
			               |	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента,
			               |	Командированные.Ссылка КАК Ссылка
			               |ИЗ
			               |	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Командированные КАК Командированные
			               |		ПО ДокументыФизическихЛиц.Физлицо = Командированные.ФизЛицо
			               |ГДЕ
			               |	ДокументыФизическихЛиц.Серия = &Серия
			               |	И ДокументыФизическихЛиц.Номер = &Номер
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Командированные.Код";
			Запрос.УстановитьПараметр("Серия", Строка(Документ.Серия));
			Запрос.УстановитьПараметр("Номер", Строка(Документ.Номер));
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.Физлицо; 
				КомандированныйСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Физлицо) Тогда
		//не нашли по документу поищем по ФИО + пол + дата рождения
		
		Если ЗначениеЗаполнено(СокрЛП(НРег(ФИО)+" "+НРег(Параметры.Пол))) И ЗначениеЗаполнено(Параметры.ДатаРождения) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Командированные.ПоисковаяСтрока КАК ПоисковаяСтрока,
			               |	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
			               |	ФизическиеЛица.Ссылка КАК Физлицо,
			               |	Командированные.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Командированные КАК Командированные
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
			               |		ПО Командированные.ФизЛицо = ФизическиеЛица.Ссылка
			               |ГДЕ
			               |	Командированные.ПоисковаяСтрока = &ПоисковаяСтрока
			               |	И ФизическиеЛица.ДатаРождения = &ДатаРождения
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Командированные.Код";
			Запрос.УстановитьПараметр("ПоисковаяСтрока", НРег(ФИО)+" "+НРег(Параметры.Пол));
			Запрос.УстановитьПараметр("ДатаРождения", Параметры.ДатаРождения);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.Физлицо; 
				КомандированныйСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Физлицо) Тогда
		//не нашли по документу поищем по ФИО Анг
		
		Если ЗначениеЗаполнено(Параметры.ФИОАнг) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Командированные.ФизЛицо КАК ФизЛицо,
			               |	Командированные.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Командированные КАК Командированные
			               |ГДЕ
			               |	Командированные.ФИОНаАнгПоиск ПОДОБНО &ПоисковаяСтрока
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Командированные.Код";
			Запрос.УстановитьПараметр("ПоисковаяСтрока", "%"+Нрег(Параметры.ФИОАнг)+"%");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.Физлицо;
				КомандированныйСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Физлицо) Тогда
		//не нашли по документу поищем по ФИО
		
		Если ЗначениеЗаполнено(ФИО) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Командированные.ФизЛицо КАК ФизЛицо,
			               |	Командированные.Ссылка КАК Ссылка
			               |ИЗ
			               |	Справочник.Командированные КАК Командированные
			               |ГДЕ
			               |	Командированные.ПоисковаяСтрока ПОДОБНО &ПоисковаяСтрока
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Командированные.Код";
			Запрос.УстановитьПараметр("ПоисковаяСтрока", "%"+НРег(ФИО)+"%");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФизЛицо = Выборка.Физлицо;
				КомандированныйСсылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Физлицо) Тогда
		//Создадим нового
		ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ФизлицоОбъект.Наименование = ФИО;
		//ФизлицоОбъект.ФИО = ФИО;
		ФизлицоОбъект.ДатаРождения = Параметры.ДатаРождения;
		ФизлицоОбъект.Пол = Параметры.Пол; 
		ФизлицоОбъект.Записать();
		
		Физлицо = ФизлицоОбъект.Ссылка;
		Для Каждого ДокументФЗ ИЗ Параметры.СписокДокументов Цикл
			//	ВидДокумента
			//	Серия
			//	Номер
			//	ДатаВыдачи
			//	СрокДействия
			//	КемВыдан
			//	КодПодразделения
			//	ЯвляетсяДокументомУдостоверяющимЛичность
			//	Представление
			МЗФЗ = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
			МЗФЗ.Физлицо = Физлицо;  
			МЗФЗ.ВидДокумента = ДокументФЗ.ВидДокумента;
			МЗФЗ.Прочитать();
			
			МЗФЗ.Период = ТекущаяДата();
			МЗФЗ.Физлицо = Физлицо;  
			МЗФЗ.ВидДокумента = ДокументФЗ.ВидДокумента;
			МЗФЗ.Серия = ДокументФЗ.Серия;
			МЗФЗ.Номер = ДокументФЗ.Номер;
			МЗФЗ.ДатаВыдачи = ДокументФЗ.ДатаВыдачи;
			МЗФЗ.СрокДействия = ДокументФЗ.СрокДействия;
			МЗФЗ.КемВыдан = ДокументФЗ.КемВыдан;
			МЗФЗ.КодПодразделения = ДокументФЗ.КодПодразделения;
			МЗФЗ.ЯвляетсяДокументомУдостоверяющимЛичность = ДокументФЗ.ЯвляетсяДокументомУдостоверяющимЛичность;
			МЗФЗ.Представление = ДокументФЗ.Представление;
			МЗФЗ.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КомандированныйСсылка) Тогда
		КомандированныйОбъект = Справочники.Командированные.СоздатьЭлемент();
		КомандированныйОбъект.Наименование = ФИО;
		КомандированныйОбъект.ПоисковаяСтрока = НРег(ФИО)+" "+НРег(Параметры.Пол);
		КомандированныйОбъект.ФИОНаАнг = Параметры.ФИОАнг;
		КомандированныйОбъект.ФИОНаАнгПоиск = Нрег(Параметры.ФИОАнг); 
		КомандированныйОбъект.ФизЛицо = Физлицо;
		
		КомандированныйОбъект.Фамилия   = ФИОСтруктура.Ф;
		КомандированныйОбъект.Имя       = ФИОСтруктура.И;
		КомандированныйОбъект.Отчество  = ФИОСтруктура.О;
		КомандированныйОбъект.LastName  = ФИОАнгСтруктура.L;
		КомандированныйОбъект.FirstName = ФИОАнгСтруктура.F;
		КомандированныйОбъект.SurName   = ФИОАнгСтруктура.S;
		
		КомандированныйОбъект.Записать();
		
		КомандированныйСсылка = КомандированныйОбъект.Ссылка;
	КонецЕсли;
		
	Возврат КомандированныйСсылка; 
	
КонецФункции


Функция ЗаполнитьКомандируемыхВУслуге(Параметры) Экспорт
	Результат = Новый Массив;

	Если ТипЗнч(Параметры.ЗначениеJSON) = Тип("Структура") Тогда
		ВхКомандируемые = Новый Массив;
		ВхКомандируемые.Добавить(Параметры.ЗначениеJSON);
	Иначе
	    ВхКомандируемые = Параметры.ЗначениеJSON;
	КонецЕсли;

	Если ТипЗнч(ВхКомандируемые) = Тип("Массив") Тогда
		Для Каждого Командируемый ИЗ ВхКомандируемые Цикл
			//
			ДокНом = Командируемый.DocNum;		
			ДеньРождение = Дата(Командируемый.BirthDay);
			Пол = Командируемый.Sex;
			
			СтруктураДокументаФЗ = УправлениеБТСервер.СтруктураДокументаФЗ(
				Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение,
				,
				ДокНом,
				ТекущаяДата(),
				,
				"Загружен из UFS"
			);

			ФИОМассив = СтрРазделить(Командируемый.Name, " ", Истина);
			
			
			LastName = "";
			Если ФИОМассив.Количество()>0 Тогда
				LastName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(ФИОМассив[0]);
			КонецЕсли;
			FirstName = "";
			Если ФИОМассив.Количество()>1 Тогда
				FirstName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(ФИОМассив[1]);
			КонецЕсли;
			SurName = "";
			Если ФИОМассив.Количество()>2 Тогда
				SurName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(ФИОМассив[2]);
			КонецЕсли;

			ФИО = Новый Структура("Ф, И, О");
			ФИОАнг = Новый Структура("L, F, S");

			ФИО.Ф = LastName;  	    
		    ФИОАнг.L = УправлениеБТВызовСервера.ТранслитерацияRUEN(LastName);
		    
			ФИО.И = FirstName;
		    ФИОАнг.F = УправлениеБТВызовСервера.ТранслитерацияRUEN(FirstName);

			Если ТипЗнч(SurName) <> Тип("Массив") Тогда
				ФИО.О = SurName;
			    ФИОАнг.S =  УправлениеБТВызовСервера.ТранслитерацияRUEN(SurName);
			Иначе
		        ФИО.О = "";
		        ФИОАнг.S = "";
		    КонецЕсли;
		    		
			СтруктураФизЛица = УправлениеБТСервер.СтруктураФизЛица(ДеньРождение, , ФИОАнг, СтруктураДокументаФЗ);
			КомандируемыйСсылка = УправлениеБТСервер.СоздатьКомандируемого(ФИО, СтруктураФизЛица);
			
			Результат.Добавить(Новый Структура("Командируемый", КомандируемыйСсылка));	
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКомандируемыхV3(ВхКомандируемые) Экспорт
	Результат = Новый Массив;

	Если ТипЗнч(ВхКомандируемые) = Тип("Массив") Тогда
		Для Каждого Командируемый ИЗ ВхКомандируемые Цикл
			//     
			ДокНом = "";
			ДеньРождение = Дата(0001,01,01,00,00,00);
			Пол = "M";
			
			Командируемый.Свойство("DocumentNumber", ДокНом);		
			Командируемый.Свойство("BirthDay", ДеньРождение);		
			Командируемый.Свойство("Sex", Пол);		
			
			
			СтруктураДокументаФЗ = УправлениеБТСервер.СтруктураДокументаФЗ(
				Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение,
				,
				ДокНом,
				ТекущаяДата(),
				,
				"Загружен по V3"
			);

			ФИОМассив = СтрРазделить(Командируемый.Name, " ", Истина);
			
			
			LastName = ""; FirstName=""; SurName=""; LastNameENG=""; FirstNameENG=""; SurNameENG="";
			
			Если Командируемый.Свойство("LastName") Тогда
				LastName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.LastName);
			КонецЕсли;
			Если Командируемый.Свойство("FirstName") Тогда			
				FirstName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.FirstName);
			КонецЕсли;
			Если Командируемый.Свойство("SurName") Тогда			
				SurName = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.SurName);
			КонецЕсли;
			Если Командируемый.Свойство("LastNameLatin") Тогда							
				LastNameENG = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.LastNameLatin);
			КонецЕсли;
			Если Командируемый.Свойство("FirstNameLatin") Тогда							
				FirstNameENG = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.FirstNameLatin);
			КонецЕсли;
			Если Командируемый.Свойство("SurNameLatin") Тогда							
				SurNameENG = УправлениеБТВызовСервера.ПерваяБольшаяБуква(Командируемый.SurNameLatin);
			КонецЕсли;
			
			ФИО = Новый Структура("Ф, И, О", LastName, FirstName, SurName);
			ФИОАнг = Новый Структура("L, F, S", LastNameENG, FirstNameENG, SurNameENG);
			
			
			СтруктураФизЛица = УправлениеБТСервер.СтруктураФизЛица(ДеньРождение, , ФИОАнг, СтруктураДокументаФЗ);
			КомандируемыйСсылка = УправлениеБТСервер.СоздатьКомандируемого(ФИО, СтруктураФизЛица);
			
			Результат.Добавить(Новый Структура("Командируемый", КомандируемыйСсылка));	
		КонецЦикла; 
	КонецЕсли;
	
	Возврат Результат;
КонецФункции





Функция ПолучитьТекстЗаглушки() Экспорт
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка) КАК Ссылка,
	               |	ЗНАЧЕНИЕ(Планвидовхарактеристик.НаборХарактеристикДляНоменклатуры.ПустаяСсылка) КАК Характеристика,
	               |	"""" КАК Значение
	               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка) КАК Ссылка,
	               |	ЗНАЧЕНИЕ(Планвидовхарактеристик.НаборХарактеристикДляЭкстраПолей.ПустаяСсылка) КАК Характеристика,
	               |	"""" КАК Значение
	               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
				   |;";
	Возврат ТекстЗапроса;	
КонецФункции

Функция ПолучитьМенеджерВременныхТаблиц(ВходящийОбъект) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	Если ТипЗнч(ВходящийОбъект) = Тип("ДокументСсылка.ЗаказИзКорзины") ИЛИ ТипЗнч(ВходящийОбъект) = Тип("ДокументОбъект.ЗаказИзКорзины") Тогда
		//Для Каждого ВиртуальнаяУслуга ИЗ ВходящийОбъект.Услуги Цикл
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УслугаОписаниеУслуги", ВходящийОбъект.ОписаниеНоменклатуры.Выгрузить());
		Запрос.УстановитьПараметр("УслугаЭкстраПоля", ВходящийОбъект.ЭкстраПоля.Выгрузить());
		Запрос.УстановитьПараметр("УслугаСсылка", ВходящийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	УслугаОписаниеУслуги.ГУИД КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	&УслугаОписаниеУслуги КАК УслугаОписаниеУслуги
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаЭкстраПоля.ГУИД КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	&УслугаЭкстраПоля КАК УслугаЭкстраПоля
		               |;";
		Запрос.Выполнить();
	ИначеЕсли ТипЗнч(ВходящийОбъект) = Тип("ДокументСсылка.Услуга") ИЛИ ТипЗнч(ВходящийОбъект) = Тип("Массив") Тогда
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Если ТипЗнч(ВходящийОбъект) = Тип("Массив") Тогда
			ПараметрЗапроса = ВходящийОбъект;
		Иначе
			ПараметрЗапроса = Новый Массив();
			ПараметрЗапроса.Добавить(ВходящийОбъект);
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", ПараметрЗапроса);
		Запрос.Текст = "ВЫБРАТЬ
		               |	УслугаОписаниеУслуги.Ссылка КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
		               |ГДЕ
		               |	УслугаОписаниеУслуги.Ссылка В(&Ссылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаЭкстраПоля.Ссылка КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
		               |ГДЕ
		               |	УслугаЭкстраПоля.Ссылка В(&Ссылка)
		               |;";
		Запрос.Выполнить();
	ИначеЕсли ТипЗнч(ВходящийОбъект) = Тип("ДокументОбъект.Услуга") Тогда
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УслугаОписаниеУслуги", ВходящийОбъект.ОписаниеУслуги.Выгрузить());
		Запрос.УстановитьПараметр("УслугаЭкстраПоля", ВходящийОбъект.ЭкстраПоля.Выгрузить());
		Запрос.УстановитьПараметр("УслугаСсылка", ВходящийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	&УслугаСсылка КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	&УслугаОписаниеУслуги КАК УслугаОписаниеУслуги
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	&УслугаСсылка КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	&УслугаЭкстраПоля КАК УслугаЭкстраПоля
		               |;";
		Запрос.Выполнить();
	ИначеЕсли ТипЗнч(ВходящийОбъект) = Тип("ДокументСсылка.ЗаказКомандированногоБТ") Тогда 
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", ВходящийОбъект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга КАК Услуга,
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ УслугиЗаказа
		               |ИЗ
		               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
		               |ГДЕ
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаОписаниеУслуги.Ссылка КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	УслугиЗаказа КАК УслугиЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
		               |		ПО УслугиЗаказа.Услуга = УслугаОписаниеУслуги.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаЭкстраПоля.Ссылка КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	УслугиЗаказа КАК УслугиЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
		               |		ПО УслугиЗаказа.Услуга = УслугаЭкстраПоля.Ссылка";
		Запрос.Выполнить();
	ИначеЕсли ТипЗнч(ВходящийОбъект) = Тип("ДокументОбъект.ЗаказКомандированногоБТ") Тогда 
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("УслугиДляКлиента", ВходящийОбъект.УслугиДляКлиента.Выгрузить());
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга КАК Услуга,
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ УслугиЗаказа
		               |ИЗ
		               |	&УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаОписаниеУслуги.Ссылка КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	УслугиЗаказа КАК УслугиЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
		               |		ПО УслугиЗаказа.Услуга = УслугаОписаниеУслуги.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаЭкстраПоля.Ссылка КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	УслугиЗаказа КАК УслугиЗаказа
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
		               |		ПО УслугиЗаказа.Услуга = УслугаЭкстраПоля.Ссылка";
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц
	
КонецФункции

Функция ПолучитьЗапросДляУсловий(ОбъектУсловий = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	
	Если ТипЗнч(ОбъектУсловий) = Тип("ДокументСсылка.ЗаказКлиентаБТ") ИЛИ 
		(
			ТипЗнч(ОбъектУсловий) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
		    И ОбъектУсловий.ПолноеИмя = "Документ.ЗаказКлиентаБТ"
		) Тогда
		//Если ОбъектУсловий.ПолноеИмя = "Документ.ЗаказКлиентаБТ" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ЗаказКлиентаБТ.Ссылка КАК Ссылка,
		               |	ЗаказКлиентаБТ.ВерсияДанных КАК ВерсияДанных,
		               |	ЗаказКлиентаБТ.ПометкаУдаления КАК ПометкаУдаления,
		               |	ЗаказКлиентаБТ.Номер КАК Номер,
		               |	ЗаказКлиентаБТ.Дата КАК Дата,
		               |	ЗаказКлиентаБТ.Проведен КАК Проведен,
		               |	ЗаказКлиентаБТ.Автор КАК Автор,
		               |	ЗаказКлиентаБТ.АдресДоставки КАК АдресДоставки,
		               |	ЗаказКлиентаБТ.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		               |	ЗаказКлиентаБТ.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
		               |	ЗаказКлиентаБТ.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
		               |	ЗаказКлиентаБТ.БанковскийСчет КАК БанковскийСчет,
		               |	ЗаказКлиентаБТ.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		               |	ЗаказКлиентаБТ.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		               |	ЗаказКлиентаБТ.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		               |	ЗаказКлиентаБТ.Валюта КАК Валюта,
		               |	ЗаказКлиентаБТ.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		               |	ЗаказКлиентаБТ.ВремяДоставкиПо КАК ВремяДоставкиПо,
		               |	ЗаказКлиентаБТ.ВремяДоставкиС КАК ВремяДоставкиС,
		               |	ЗаказКлиентаБТ.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
		               |	ЗаказКлиентаБТ.ГрафикОплаты КАК ГрафикОплаты,
		               |	ЗаказКлиентаБТ.Грузоотправитель КАК Грузоотправитель,
		               |	ЗаказКлиентаБТ.Грузополучатель КАК Грузополучатель,
		               |	ЗаказКлиентаБТ.ДатаОтгрузки КАК ДатаОтгрузки,
		               |	ЗаказКлиентаБТ.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		               |	ЗаказКлиентаБТ.ДатаСогласования КАК ДатаСогласования,
		               |	ЗаказКлиентаБТ.Договор КАК Договор,
		               |	ЗаказКлиентаБТ.ДокументНаследник КАК ДокументНаследник,
		               |	ЗаказКлиентаБТ.ДокументОснование КАК ДокументОснование,
		               |	ЗаказКлиентаБТ.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		               |	ЗаказКлиентаБТ.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке,
		               |	ЗаказКлиентаБТ.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		               |	ЗаказКлиентаБТ.ЗонаДоставки КАК ЗонаДоставки,
		               |	ЗаказКлиентаБТ.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
		               |	ЗаказКлиентаБТ.КартаЛояльности КАК КартаЛояльности,
		               |	ЗаказКлиентаБТ.Касса КАК Касса,
		               |	ЗаказКлиентаБТ.Комментарий КАК Комментарий,
		               |	ЗаказКлиентаБТ.КонтактноеЛицо КАК КонтактноеЛицо,
		               |	ЗаказКлиентаБТ.Контрагент КАК Контрагент,
		               |	ЗаказКлиентаБТ.МаксимальныйКодСтроки КАК МаксимальныйКодСтроки,
		               |	ЗаказКлиентаБТ.Менеджер КАК Менеджер,
		               |	ЗаказКлиентаБТ.Назначение КАК Назначение,
		               |	ЗаказКлиентаБТ.НазначениеПлатежа КАК НазначениеПлатежа,
		               |	ЗаказКлиентаБТ.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	ЗаказКлиентаБТ.НаправлениеДеятельности КАК НаправлениеДеятельности,
		               |	ЗаказКлиентаБТ.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
		               |	ЗаказКлиентаБТ.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		               |	ЗаказКлиентаБТ.НомерСчетФактуры КАК НомерСчетФактуры,
		               |	ЗаказКлиентаБТ.Организация КАК Организация,
		               |	ЗаказКлиентаБТ.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
		               |	ЗаказКлиентаБТ.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
		               |	ЗаказКлиентаБТ.Партнер КАК Партнер,
		               |	ЗаказКлиентаБТ.ПеревозчикПартнер КАК ПеревозчикПартнер,
		               |	ЗаказКлиентаБТ.Подразделение КАК Подразделение,
		               |	ЗаказКлиентаБТ.Приоритет КАК Приоритет,
		               |	ЗаказКлиентаБТ.Руководитель КАК Руководитель,
		               |	ЗаказКлиентаБТ.Сделка КАК Сделка,
		               |	ЗаказКлиентаБТ.СкидкиРассчитаны КАК СкидкиРассчитаны,
		               |	ЗаказКлиентаБТ.Склад КАК Склад,
		               |	ЗаказКлиентаБТ.Согласован КАК Согласован,
		               |	ЗаказКлиентаБТ.Соглашение КАК Соглашение,
		               |	ЗаказКлиентаБТ.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		               |	ЗаказКлиентаБТ.СпособДоставки КАК СпособДоставки,
		               |	ЗаказКлиентаБТ.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		               |	ЗаказКлиентаБТ.Статус КАК Статус,
		               |	ЗаказКлиентаБТ.СуммаАвансаДоОбеспечения КАК СуммаАвансаДоОбеспечения,
		               |	ЗаказКлиентаБТ.СуммаВозвратнойТары КАК СуммаВозвратнойТары,
		               |	ЗаказКлиентаБТ.СуммаДокумента КАК СуммаДокумента,
		               |	ЗаказКлиентаБТ.СуммаПредоплатыДоОтгрузки КАК СуммаПредоплатыДоОтгрузки,
		               |	ЗаказКлиентаБТ.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		               |	ЗаказКлиентаБТ.ФормаОплаты КАК ФормаОплаты,
		               |	ЗаказКлиентаБТ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		               |	ЗаказКлиентаБТ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		               |	ЗаказКлиентаБТ.ПлатежныйДокумент КАК ПлатежныйДокумент,
		               |	ЗаказКлиентаБТ.Товары.(
		               |		Ссылка КАК Ссылка,
		               |		НомерСтроки КАК НомерСтроки,
		               |		ДатаОтгрузки КАК ДатаОтгрузки,
		               |		Номенклатура КАК Номенклатура,
		               |		Характеристика КАК Характеристика,
		               |		Количество КАК Количество,
		               |		Цена КАК Цена,
		               |		Сумма КАК Сумма,
		               |		СтавкаНДС КАК СтавкаНДС,
		               |		СуммаНДС КАК СуммаНДС,
		               |		СуммаСНДС КАК СуммаСНДС,
		               |		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		               |		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		               |		ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
		               |		СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
		               |		КодСтроки КАК КодСтроки,
		               |		Отменено КАК Отменено,
		               |		Склад КАК Склад,
		               |		СрокПоставки КАК СрокПоставки,
		               |		Содержание КАК Содержание,
		               |		ВариантОбеспечения КАК ВариантОбеспечения,
		               |		Услуга КАК Услуга,
		               |		НомерСчета КАК НомерСчета,
		               |		НомерАкта КАК НомерАкта,
		               |		НомерСчетФактуры КАК НомерСчетФактуры
		               |	) КАК Товары,
		               |	ЗаказКлиентаБТ.ОписаниеУслуг.(
		               |		Ссылка КАК Ссылка,
		               |		НомерСтроки КАК НомерСтроки,
		               |		Характеристика КАК Характеристика,
		               |		Значение КАК Значение
		               |	) КАК ОписаниеУслуг,
		               |	ЗаказКлиентаБТ.Ссылка КАК Услуга
		               |ИЗ
		               |	Документ.ЗаказКлиентаБТ КАК ЗаказКлиентаБТ
		               |ГДЕ
		               |	ЗаказКлиентаБТ.Ссылка В(&Ссылка)";
		
	ИначеЕсли ТипЗнч(ОбъектУсловий) = Тип("ДокументСсылка.СписокДопУслуг") ИЛИ 
		(ТипЗнч(ОбъектУсловий) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") И ОбъектУсловий.ПолноеИмя = "Документ.СписокДопУслуг") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СписокДопУслугУслуги.Ссылка КАК Ссылка,
		               |	СписокДопУслугУслуги.НомерСтроки КАК НомерСтроки,
		               |	СписокДопУслугУслуги.Услуга КАК Услуга,
		               |	СписокДопУслугУслуги.Удален КАК Удален,
		               |	СписокДопУслугУслуги.КлючУслуги КАК КлючУслуги
		               |ИЗ
		               |	Документ.СписокДопУслуг.Услуги КАК СписокДопУслугУслуги
		               |ГДЕ
		               |	СписокДопУслугУслуги.Ссылка В(&Ссылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокДопУслугУслуги.Ссылка,
		               |	СписокДопУслугУслуги.НомерСтроки,
		               |	ЗНАЧЕНИЕ(Справочник.ЭлементОтбора.ПустаяСсылка),
		               |	СписокДопУслугУслуги.Удален,
		               |	СписокДопУслугУслуги.КлючУслуги
		               |ИЗ
		               |	Документ.СписокДопУслуг.Услуги КАК СписокДопУслугУслуги
		               |ГДЕ
		               |	ЛОЖЬ";
		
	Иначе
		//Если ОбъектУсловий = Неопределено ИЛИ ТипЗнч(ОбъектУсловий) = Тип("ДокументСсылка.Услуга") ИЛИ ТипЗнч(ОбъектУсловий) = Тип("ДокументОбъект.Услуга") Тогда
		Если ТипЗнч(ОбъектУсловий) = Тип("ДокументСсылка.Услуга") ИЛИ ТипЗнч(ОбъектУсловий) = Тип("ДокументОбъект.Услуга") Тогда			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ОбъектУсловий.НоменклатураБТ);
			Запрос.Текст = "ВЫБРАТЬ
			               |	НоменклатураБТХарактеристики.Характеристика КАК Ссылка
			               |ИЗ
			               |	Справочник.НоменклатураБТ.Характеристики КАК НоменклатураБТХарактеристики
			               |ГДЕ
			               |	НоменклатураБТХарактеристики.Ссылка = &Ссылка";
			Выгрузка = Запрос.Выполнить().Выгрузить();			   
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	НаборХарактеристикДляНоменклатуры.Ссылка
			               |ИЗ
			               |	ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры КАК НаборХарактеристикДляНоменклатуры";
			Выгрузка = Запрос.Выполнить().Выгрузить();			   			
		КонецЕсли;
		
		ДопКолонки = "";
		ДопКолонкиРез = "";
		Для Каждого ПрХарактеристика ИЗ Выгрузка Цикл
			
			Если НЕ ПрХарактеристика.Ссылка.ЭтоГруппа Тогда
				Если ПрХарактеристика.Ссылка.Предопределенный Тогда
					
					ДопКолонки = ДопКолонки + "ВЫБОР
			                  |		КОГДА НаборХарактеристикДляНоменклатуры.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры."+ПрХарактеристика.Ссылка.ИмяПредопределенныхДанных+")
			                  |			ТОГДА УслугаОписаниеУслуги.Значение
			                  |		ИНАЧЕ NULL
			                  |	КОНЕЦ КАК "+ПрХарактеристика.Ссылка.ИмяПредопределенныхДанных+"Характеристика, " + Символы.ПС;
					ДопКолонкиРез = ДопКолонкиРез + "МАКСИМУМ(НаборХарактеристикДляНоменклатуры."+ПрХарактеристика.Ссылка.ИмяПредопределенныхДанных+"Характеристика) КАК "+ПрХарактеристика.Ссылка.ИмяПредопределенныхДанных+"Характеристика, " + Символы.ПС;
				Иначе
					
					ДопКолонки = ДопКолонки + "ВЫБОР
			                  |		КОГДА НаборХарактеристикДляНоменклатуры.Ссылка.КлючПоиска = """+ПрХарактеристика.Ссылка.КлючПоиска+"""
			                  |			ТОГДА УслугаОписаниеУслуги.Значение
			                  |		ИНАЧЕ NULL
			                  |	КОНЕЦ КАК "+ПрХарактеристика.Ссылка.КлючПоиска+"Характеристика, " + Символы.ПС;
					ДопКолонкиРез = ДопКолонкиРез + "МАКСИМУМ(НаборХарактеристикДляНоменклатуры."+ПрХарактеристика.Ссылка.КлючПоиска+"Характеристика) КАК "+ПрХарактеристика.Ссылка.КлючПоиска+"Характеристика, " + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		
		ДопКолонкиЭП = "";
		ДопКолонкиЭПРез = "";
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НаборХарактеристикДляЭкстраПолей.Ссылка
		               |ИЗ
		               |	ПланВидовХарактеристик.НаборХарактеристикДляЭкстраПолей КАК НаборХарактеристикДляЭкстраПолей";
		Выгрузка = Запрос.Выполнить().Выгрузить();			   
		Для Каждого ПрЭкстраПоля ИЗ Выгрузка Цикл
			Если ПрЭкстраПоля.Ссылка.Предопределенный Тогда
				ДопКолонкиЭП = ДопКолонкиЭП + "ВЫБОР
		                  |		КОГДА НаборХарактеристикДляЭкстраПолей.Ссылка = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляЭкстраПолей."+ПрЭкстраПоля.Ссылка.ИмяПредопределенныхДанных+")
		                  |			ТОГДА УслугаЭкстраПоля.Значение
		                  |		ИНАЧЕ NULL
		                  |	КОНЕЦ КАК "+ПрЭкстраПоля.Ссылка.ИмяПредопределенныхДанных+"ЭкстраПоле, " + Символы.ПС;
				ДопКолонкиЭПРез = ДопКолонкиЭПРез + "МАКСИМУМ(ЕСТЬNULL(НаборХарактеристикДляЭкстраПолей."+ПрЭкстраПоля.Ссылка.ИмяПредопределенныхДанных+"ЭкстраПоле, 0)) КАК "+ПрЭкстраПоля.Ссылка.ИмяПредопределенныхДанных+"ЭкстраПоле, " + Символы.ПС;
			Иначе
				ДопКолонкиЭП = ДопКолонкиЭП + "ВЫБОР
				          |		КОГДА НаборХарактеристикДляЭкстраПолей.Ссылка.КлючПоиска = """+ПрЭкстраПоля.Ссылка.КлючПоиска+"""
				          |			ТОГДА УслугаЭкстраПоля.Значение
				          |		ИНАЧЕ NULL
				          |	КОНЕЦ КАК "+ПрЭкстраПоля.Ссылка.КлючПоиска+"ЭкстраПоле, " + Символы.ПС;
				ДопКолонкиЭПРез = ДопКолонкиЭПРез + "МАКСИМУМ(ЕСТЬNULL(НаборХарактеристикДляЭкстраПолей."+ПрЭкстраПоля.Ссылка.КлючПоиска+"ЭкстраПоле, 0)) КАК "+ПрЭкстраПоля.Ссылка.КлючПоиска+"ЭкстраПоле, " + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		ЗапросДляХарактеристик = "ВЫБРАТЬ
						|"+ДопКолонки+"
		               |	УслугаОписаниеУслуги.Ссылка КАК УслугаХарактеристика
					   //|ПОМЕСТИТЬ НаборХарактеристикДляНоменклатурыЗапрос
		               |ИЗ
		               |	ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры КАК НаборХарактеристикДляНоменклатуры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ УслугаОписаниеУслугиВТ КАК УслугаОписаниеУслуги
		               |		ПО (УслугаОписаниеУслуги.Характеристика = НаборХарактеристикДляНоменклатуры.Ссылка)
					   |ГДЕ
		               |	НЕ УслугаОписаниеУслуги.Ссылка ЕСТЬ NULL
		               |";
					   
		ЗапросДляЭкстраПолей = "ВЫБРАТЬ
						|"+ДопКолонкиЭП+"
		               |	УслугаЭкстраПоля.Ссылка КАК УслугаЭкстраПолей
					   //|ПОМЕСТИТЬ НаборХарактеристикДляЭкстраПолейЗапрос
		               |ИЗ
		               |	ПланВидовХарактеристик.НаборХарактеристикДляЭкстраПолей КАК НаборХарактеристикДляЭкстраПолей
		               |		ЛЕВОЕ СОЕДИНЕНИЕ УслугаЭкстраПоляВТ КАК УслугаЭкстраПоля
		               |		ПО (УслугаЭкстраПоля.Характеристика = НаборХарактеристикДляЭкстраПолей.Ссылка)
					   |ГДЕ
		               |	НЕ УслугаЭкстраПоля.Ссылка ЕСТЬ NULL
					   |";
					   
		ТекстЗапроса = ПолучитьТекстЗаглушки();
		//ТекстЗапроса = ТекстЗапроса + ЗапросДляХарактеристик + ЗапросДляЭкстраПолей;
		ТекстЗапроса = ТекстЗапроса + "
						|ВЫБРАТЬ
						|"+ДопКолонкиРез+"
						|"+ДопКолонкиЭПРез+"
						|НаборХарактеристикДляНоменклатуры.УслугаХарактеристика КАК Услуга
		               |ИЗ
					   //|	НаборХарактеристикДляНоменклатурыЗапрос КАК НаборХарактеристикДляНоменклатуры
					   //|		ПОЛНОЕ СОЕДИНЕНИЕ НаборХарактеристикДляЭкстраПолейЗапрос КАК НаборХарактеристикДляЭкстраПолей
					   |	("+ЗапросДляХарактеристик+") КАК НаборХарактеристикДляНоменклатуры
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ("+ЗапросДляЭкстраПолей+") КАК НаборХарактеристикДляЭкстраПолей
		               |		ПО НаборХарактеристикДляНоменклатуры.УслугаХарактеристика = НаборХарактеристикДляЭкстраПолей.УслугаЭкстраПолей
						|СГРУППИРОВАТЬ ПО
						|	НаборХарактеристикДляНоменклатуры.УслугаХарактеристика";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

//Под вопросом эта функция: нужна ли она???
Функция СоздатьПакетДокументов(ДокументОснование) Экспорт
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
	Запрос.УстановитьПараметр("Партнер", ДокументОснование.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ДокументОснование.Контрагент);
	Запрос.УстановитьПараметр("Договор", ДокументОснование.Договор);
	Запрос.Текст = "ВЫБРАТЬ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ СПриоритетом
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = &Контрагент
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = &Договор
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
	               |	2
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = &Контрагент
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
	               |	3
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
	               |	4
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(СПриоритетом.Приоритет) КАК ЛучшийПриоритет
	               |ПОМЕСТИТЬ Приоритеты
	               |ИЗ
	               |	СПриоритетом КАК СПриоритетом
	               |
	               |ИМЕЮЩИЕ
	               |	НЕ МИНИМУМ(СПриоритетом.Приоритет) ЕСТЬ NULL
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СПриоритетом.Регистратор,
	               |	СПриоритетом.Партнер,
	               |	СПриоритетом.Контрагент,
	               |	СПриоритетом.Договор
	               |ПОМЕСТИТЬ ЛучшийВариант
	               |ИЗ
	               |	Приоритеты КАК Приоритеты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СПриоритетом КАК СПриоритетом
	               |		ПО (СПриоритетом.Приоритет = Приоритеты.ЛучшийПриоритет)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЛучшийВариант.Регистратор,
	               |	ЛучшийВариант.Партнер,
	               |	ЛучшийВариант.Контрагент,
	               |	ЛучшийВариант.Договор,
	               |	УсловияФормированияДокументов.УсловияОтбора,
	               |	УсловияФормированияДокументов.Расписание,
	               |	УсловияФормированияДокументов.УсловияОтбора.Условие КАК Условие
	               |ИЗ
	               |	ЛучшийВариант КАК ЛучшийВариант
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияФормированияДокументов КАК УсловияФормированияДокументов
	               |		ПО ЛучшийВариант.Регистратор = УсловияФормированияДокументов.Регистратор
	               |			И ЛучшийВариант.Партнер = УсловияФормированияДокументов.Партнер
	               |			И ЛучшийВариант.Контрагент = УсловияФормированияДокументов.Контрагент
	               |			И ЛучшийВариант.Договор = УсловияФормированияДокументов.Договор";
				   
	Выборка = Запрос.Выполнить().Выбрать();	
	
	ФормируемПакет = Истина;
	Расшифровка = Новый Массив;
	
	Если Выборка.Количество() > 0 Тогда
		
		Пока Выборка.Следующий() Цикл 
			//Есть особые условия формирования документов
			УсловияОтбора = Выборка.УсловияОтбора;
			Расписание = Выборка.Расписание;		
			
			Если ЗначениеЗаполнено(УсловияОтбора) Тогда
				Если НЕ ЗначениеЗаполнено(УсловияОтбора.СложноеУсловие) Тогда
					
					ЧтениеJSON = Новый ЧтениеJSON; 
					ЧтениеJSON.УстановитьСтроку(УсловияОтбора.Условие);
					ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "ValueTree");
					ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
					ОбъектXDTO.Проверить();
					
					ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);				
					RLS = РекурсивныйОбход(ДЗ, " ИЛИ ");
					
					РасшифровкаПоОтбору = Новый Массив;
					ФормируемПакет = ПодходящееУсловие(ДокументОснование, RLS, ДЗ,, РасшифровкаПоОтбору);
					Для Каждого СтрокаР ИЗ РасшифровкаПоОтбору Цикл
						СтрокаР.Расписание = Расписание; 
						Расшифровка.Добавить(СтрокаР);
					КонецЦикла;
				Иначе
					
					//Сложное формирование пакета
					Если ЗначениеЗаполнено(Расписание) Тогда
						//Формируется по расписанию
						ПараметрыФункции = Новый Структура;
						ПараметрыФункции.Вставить("ДокументОснование", ДокументОснование);
						ПараметрыФункции.Вставить("УсловияОтбора", УсловияОтбора);
						ПараметрыФункции.Вставить("Расписание", Расписание);
						
						Рез = ВыполнитьПростуюФункцию(УсловияОтбора.СложноеУсловие, ПараметрыФункции);
						Если ТипЗнч(Рез) = Тип("Структура") Тогда
							ФормируемПакет = Рез.ФормируемПакет;
							Для Каждого СтрокаРасшифровки ИЗ Рез.РасшифровкаПоОтбору Цикл
								Расшифровка.Добавить(СтрокаРасшифровки);
							КонецЦикла;
						КонецЕсли;
					Иначе
						//Формируется в момент запроса (СЕЙЧАС)						
						ПараметрыФункции = Новый Структура;
						ПараметрыФункции.Вставить("ДокументОснование", ДокументОснование);
						ПараметрыФункции.Вставить("УсловияОтбора", УсловияОтбора);
						ПараметрыФункции.Вставить("Расписание", Расписание);
						
						Рез = ВыполнитьПростуюФункцию(УсловияОтбора.СложноеУсловие, ПараметрыФункции); 
						Если ТипЗнч(Рез) = Тип("Структура") Тогда
							ФормируемПакет = Рез.ФормируемПакет;
							РасшифровкаПоОтбору = Рез.РасшифровкаПоОтбору; 
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
				
				
			Иначе
				//ФормируемПакет = Ложь;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ФормируемПакет Тогда
		//это пакет (не типовой формат)
		Для Каждого СтрокаР ИЗ Расшифровка Цикл
			МЗ = РегистрыСведений.ПодготовитьДляФормированияДокументов.СоздатьМенеджерЗаписи();
			МЗ.Услуга = СтрокаР.Услуга;
			МЗ.Расписание = СтрокаР.Расписание;
			
			МЗ.ЗаказКомандированного = ДокументОснование;
			//МЗ.ВЗаказе = СсылкаНаЗаказКлиентаБТ;
			МЗ.Записать(Истина);
		КонецЦикла;		
	Иначе
		//Это один к одному
	КонецЕсли;
		
	Возврат ФормируемПакет;
	
КонецФункции


Функция УзнатьСледующуюПлановуюДату(Знач ДатаНачала, Расписание, ПроверяемаяДата = Неопределено, ТипПериода = "День")
	
	ТекущаяДата = ДатаНачала; 
	
	Результат = Неопределено;
	
	СекундВГоду = 60*60*24*365;
	НашлиДату = Ложь;
	ТекущееВремя = 0;
	Если ПроверяемаяДата = Неопределено Тогда
		ДатаНачала = КонецДня(ДатаНачала);
	Иначе
		ДатаНачала = ПроверяемаяДата;
	КонецЕсли;
	Пока НЕ НашлиДату Цикл
		
		ПроверяемаяДата = ДатаНачала + ТекущееВремя;
		ТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(ПроверяемаяДата, ТекущаяДата, ТекущаяДата);
		Если ТребуетсяВыполнение Тогда
			НашлиДату = Истина;
			Если ТипПериода = "Секунда" Тогда
				Результат = ПроверяемаяДата;
			Иначе
				Результат = УзнатьСледующуюПлановуюДату(ТекущаяДата, Расписание, ПроверяемаяДата - 60*60*24, "Секунда")	
			КонецЕсли;

		КонецЕсли;
		
		Если ТекущееВремя >= СекундВГоду Тогда
			Прервать;	
		КонецЕсли;
		
		Если ТипПериода = "День" Тогда 
			ТекущееВремя = ТекущееВремя + 60*60*24;
		Иначе
			ТекущееВремя = ТекущееВремя + 1;			
		КонецЕсли;

	КонецЦикла;
		
	//1С так просто не умеет планировать. Она вообще не умеет планировать
	
	//СекундВГоду = 60*60*24*365;
	//ПериодПроверки = СекундВГоду; 
	//ПроверяемаяДата = ДатаНачала + ПериодПроверки;
	//
	//НашлиДату = Ложь;
	//Пока НЕ НашлиДату Цикл
	//	ТребуетсяВыполнение = Расписание.ТребуетсяВыполнение(ПроверяемаяДата, ТекущаяДата, ТекущаяДата);
	//	Если ТребуетсяВыполнение И ПериодПроверки = 1 Тогда
	//		НашлиДату = Истина;
	//		Результат = ПроверяемаяДата;
	//	Иначе
	//		Если НЕ ТребуетсяВыполнение И ПериодПроверки = 1 Тогда
	//			//Ничего не подходит
	//			НашлиДату = Истина;
	//		ИначеЕсли ТребуетсяВыполнение И ПериодПроверки > 1 Тогда
	//			//Дата ниже в диапазоне
	//			ПериодПроверки = Окр(ПериодПроверки/2, 0, РежимОкругления.Окр15как20);			
	//			ПроверяемаяДата = ДатаНачала + ПериодПроверки;
	//		ИначеЕсли НЕ ТребуетсяВыполнение И ПериодПроверки > 1 Тогда
	//			//Дата выше в диапазоне
	//			ДатаНачала = ДатаНачала + ПериодПроверки;
	//			//ПериодПроверки = Окр(ПериодПроверки/2, 0, РежимОкругления.Окр15как20);
	//			ПроверяемаяДата = ДатаНачала + ПериодПроверки; //Окр(ПериодПроверки/2, 0, РежимОкругления.Окр15как20);				
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЗапланироватьУслугуВЗаказКлиента(Услуга, УсловиеРасписания) Экспорт
	
	//
	Результат = Ложь;
	
	Хранилище = УсловиеРасписания.Расписание.Расписание;
	Расписание = Хранилище.Получить();
	ПлановаяДата = УзнатьСледующуюПлановуюДату(Услуга.Дата, Расписание);
	Если ПлановаяДата <> Неопределено Тогда
		МЗ = РегистрыСведений.ПодготовитьДляФормированияДокументов.СоздатьМенеджерЗаписи();
		МЗ.Услуга = Услуга;
		МЗ.ДатаФормирования = ПлановаяДата;
		МЗ.Расписание = УсловиеРасписания.Расписание;
		МЗ.УсловияФормирования = УсловиеРасписания.УсловияОтбора;
		МЗ.Записать(Истина);
		
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции


Процедура ЗаполнитьОтборПоОтборуКомпоновщика(Отбор, ОтборКомпоновщика) Экспорт
		
    ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
    
    Если ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
        Отбор.ВидСравнения = ВидСравнения.Больше;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.ВИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
        Отбор.ВидСравнения = ВидСравнения.ВСписке;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
        Отбор.ВидСравнения = ВидСравнения.Меньше;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВСписке;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
        Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
        Отбор.ВидСравнения = ВидСравнения.НеРавно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
        Отбор.ВидСравнения = ВидСравнения.НеСодержит;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
        Отбор.ВидСравнения = ВидСравнения.Равно;
    ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
        Отбор.ВидСравнения = ВидСравнения.Содержит;
    Иначе
       // Не нашли соответствие - не применяем отбор
 
        Отбор.Использование = Ложь;
        Возврат;
    КонецЕсли;
    
    //Отбор.Установить(ОтборКомпоновщика.ПравоеЗначение, Истина);
	Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;
    
КонецПроцедуры


Функция ВычислитьЗначениеЭлементаОтбора(Знач Ссылка, Знач ВхПостроительЗапроса, Знач МенеджерВременныхТаблиц, Знач ЭлементОтбора)
	
	//ПостроительЗапроса = Новый ПостроительЗапроса;
	Результат = Неопределено;
	
	СпецПостроительЗапроса = Новый ПостроительЗапроса;
	СпецПостроительЗапроса.Текст = ВхПостроительЗапроса.Текст;
	СпецПостроительЗапроса.ЗаполнитьНастройки();
	
	ПутьКДанным = ЭлементОтбора.Имя;
	
	ИскомоеПоле = СпецПостроительЗапроса.ВыбранныеПоля.Найти(ПутьКДанным);
	СпецПостроительЗапроса.ВыбранныеПоля.Очистить();
	СпецПостроительЗапроса.ВыбранныеПоля.Добавить(ИскомоеПоле.ПутьКДанным, ИскомоеПоле.Имя);
	
	СпецПостроительЗапроса.Отбор.Сбросить();
		
	Запрос = СпецПостроительЗапроса.ПолучитьЗапрос();
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.Услуга") ИЛИ ТипЗнч(Ссылка) = Тип("ДокументОбъект.Услуга") Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПолучитьТекстЗаглушки(), "");
	Иначе   
		ПараметрЗапроса = Ссылка;
		Если ТипЗнч(Ссылка) <> Тип("Массив") Тогда
			ПараметрЗапроса = Новый Массив;
			ПараметрЗапроса.Добавить(Ссылка);
		КонецЕсли;	
		Запрос.УстановитьПараметр("Ссылка", ПараметрЗапроса);
	КонецЕсли;
	Выгрузка = Запрос.Выполнить().Выгрузить();

	Значения = Выгрузка.ВыгрузитьКолонку(ПутьКДанным);
	
	Состояние = Ложь;
	Для Каждого Значение ИЗ Значения Цикл 
		Связь = Новый Структура("УсловиеСвязи", ЭлементОтбора.Значение);
		Рез = ПолучитьЗначениеСвязи(Значение, Связь);
		
		Если НЕ Рез.Состояние И Состояние <> Истина Тогда
			Состояние = Истина;
			Результат = Значение;
		КонецЕсли;
	КонецЦикла;
	
	
	//Если Результат Тогда
	//	Результат = Ссылка;
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПодходящееУсловие(Заказ, RLS, ДЗ, Условие = "", Расшифровка = Неопределено) Экспорт
	
	Если RLS = "" И ТипЗнч(ДЗ) = Тип("ОтборКомпоновкиДанных") Тогда
		
		СписокУслуг = Новый Массив;
		ПройденоТП = Истина;
		ПрекратитьСмотреть = Ложь;		
		МенеджерВременныхТаблиц = ПолучитьМенеджерВременныхТаблиц(Заказ);
		
		ТекстЗапроса = ПолучитьЗапросДляУсловий(Заказ);				
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = ТекстЗапроса;
		ПостроительЗапроса.ЗаполнитьНастройки();
		Для Каждого ЭлементОтбораКомпоновкиДанных ИЗ ДЗ.Элементы Цикл
			
			Если ЭлементОтбораКомпоновкиДанных.Использование Тогда
				ИмяПоляОтбора = Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение);
				ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяПоляОтбора);
				Если ДоступноеПоле <> Неопределено Тогда
					ОписаниеТипов = Метаданные.ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Тип;
					ДоступноеПоле.ТипЗначения = ОписаниеТипов; 
				КонецЕсли;
				
				Если НЕ ПрекратитьСмотреть Тогда
					Попытка
						ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);			
						ЗаполнитьОтборПоОтборуКомпоновщика(ЭлементОтбора, ЭлементОтбораКомпоновкиДанных);
						
						Если ТипЗнч(ЭлементОтбораКомпоновкиДанных.ПравоеЗначение) = Тип("СправочникСсылка.ЭлементОтбора") Тогда		
							ЭлементОтбора.Значение = ВычислитьЗначениеЭлементаОтбора(Заказ, ПостроительЗапроса, МенеджерВременныхТаблиц, ЭлементОтбора);
						КонецЕсли;
					Исключение						
						ПрекратитьСмотреть = Истина;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПрекратитьСмотреть Тогда
			Запрос = ПостроительЗапроса.ПолучитьЗапрос();
			Если ТипЗнч(Заказ) = Тип("Массив") ИЛИ ТипЗнч(Заказ) = Тип("ДокументСсылка.Услуга") ИЛИ ТипЗнч(Заказ) = Тип("ДокументОбъект.Услуга") Тогда
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Текст = СтрЗаменить(Запрос.Текст, ПолучитьТекстЗаглушки(), "");
			Иначе
				//Запрос.Параметры.Очистить();
				ПараметрЗапроса = Заказ;
				Если ТипЗнч(Заказ) <> Тип("Массив") Тогда
					ПараметрЗапроса = Новый Массив;
					ПараметрЗапроса.Добавить(Заказ);
				КонецЕсли;	
				Запрос.УстановитьПараметр("Ссылка", ПараметрЗапроса);				
			КонецЕсли;
			Выгрузка = Запрос.Выполнить().Выбрать();
					
			ОбработанныеУслуги = Новый Массив;
			Если Выгрузка.Количество() >0 Тогда
				Пока Выгрузка.Следующий() Цикл
					//ВсеЗаписи = Выгрузка.ВсеЗаписи;
					СПолитикой = Выгрузка.Количество();
					// "" - запрещено "НЕ" - разрешено
					Если СокрЛП(Условие) = "" И СПолитикой > 0 Тогда
						//Запрещено и это попало в политику, то всё плохо
						ПройденоТП = Ложь;
						Если ОбработанныеУслуги.Найти(Выгрузка.Услуга) = Неопределено Тогда 
							ОбработанныеУслуги.Добавить(Выгрузка.Услуга);
							СписокУслуг.Добавить(Новый Структура("Пройдено, Услуга, Расписание", ПройденоТП, Выгрузка.Услуга));
						КонецЕсли;
					 //ИначеЕсли СокрЛП(Условие) = "НЕ" И ВсеЗаписи - СПолитикой > 0 Тогда
						 //Запрещено и это попало в политику, то всё ОК
					 КонецЕсли;
				 КонецЦикла;			 
			ИначеЕсли СокрЛП(Условие) = "НЕ" Тогда
				//Разрешено только с указанной политикой
				ПройденоТП = Ложь;
			КонецЕсли;
			
		КонецЕсли;				
	Иначе
		Если RLS = " (  ) " Тогда RLS = " Истина " КонецЕсли;
		
		ИмяТаблицы = "ВТ"; 
		Политика = Символы.ПС + " ГДЕ " +Условие+ RLS; 
		Политика = СтрЗаменить(Политика, "[ВТ]", ИмяТаблицы);
		
		КоличествоСтрок =  ?(ДЗ.Строки.Количество() = 0, 1, ДЗ.Строки.Количество());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Заказ);
		Запрос.УстановитьПараметр("КоличестоПодходящихУсловий", КоличествоСтрок);
		
			
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКомандированногоБТ") Тогда
			Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика,
		               |	УслугаОписаниеУслуги.Значение,
		               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга
		               |ПОМЕСТИТЬ ЗаказКомандированногоБТОписаниеНоменклатуры
		               |ИЗ
		               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
		               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Услуга = УслугаОписаниеУслуги.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
		               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Услуга = РеквизитыУслуги.Услуга
		               |ГДЕ
		               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
		               |	И ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЗаказКомандированногоБТ.Ссылка,
		               |	ЗаказКомандированногоБТЭкстраПоля.Характеристика КАК ЭкстраПоле,
		               |	ЗаказКомандированногоБТЭкстраПоля.Значение КАК ЗначениеЭкстраПоле,
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры.ХарактеристикаНоменклатуры,
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры.Характеристика КАК Характеристика,
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры.Значение КАК Значение,
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры.Услуга
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры КАК ЗаказКомандированногоБТОписаниеНоменклатуры,
		               |	Документ.ЗаказКомандированногоБТ КАК ЗаказКомандированногоБТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКомандированногоБТ.ЭкстраПоля КАК ЗаказКомандированногоБТЭкстраПоля
		               |		ПО ЗаказКомандированногоБТ.Ссылка = ЗаказКомандированногоБТЭкстраПоля.Ссылка
		               |ГДЕ
		               |	ЗаказКомандированногоБТОписаниеНоменклатуры.Ссылка = &Ссылка
		               |	И ЗаказКомандированногоБТ.Ссылка = &Ссылка
		               |;";
		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументОбъект.ЗаказКомандированногоБТ") Тогда
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ДокументСсылка.ЗаказКомандированногоБТ"));
			ОписаниеТипаСсылка = Новый ОписаниеТипов(ЗК);
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляЭкстраПолей"));
			ОписаниеТипаЭкстраПоле = Новый ОписаниеТипов(ЗК);
			
			ОписаниеТипаЗначениеЭкстраПоле = ПланыВидовХарактеристик.НаборХарактеристикДляЭкстраПолей.СоздатьЭлемент().ТипЗначения;
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ОписаниеТипаХарактеристикаНоменклатуры = Новый ОписаниеТипов(ЗК);
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляНоменклатуры"));
			ОписаниеТипаХарактеристика = Новый ОписаниеТипов(ЗК);
			
			
			ОписаниеТипаЗначение = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.СоздатьЭлемент().ТипЗначения;
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ДокументСсылка.Услуга"));
			ОписаниеТипаУслуга = Новый ОписаниеТипов(ЗК);
			
			
			ВиртуальныйЗаказ = Новый ТаблицаЗначений;
			ВиртуальныйЗаказ.Колонки.Добавить("Ссылка", ОписаниеТипаСсылка);
			ВиртуальныйЗаказ.Колонки.Добавить("ЭкстраПоле", ОписаниеТипаЭкстраПоле);
			ВиртуальныйЗаказ.Колонки.Добавить("ЗначениеЭкстраПоле", ОписаниеТипаЗначениеЭкстраПоле);
			ВиртуальныйЗаказ.Колонки.Добавить("ХарактеристикаНоменклатуры", ОписаниеТипаХарактеристикаНоменклатуры);
			ВиртуальныйЗаказ.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
			ВиртуальныйЗаказ.Колонки.Добавить("Значение", ОписаниеТипаЗначение);
			ВиртуальныйЗаказ.Колонки.Добавить("Услуга", ОписаниеТипаУслуга);
			
			Для Каждого СтрокаЗаказа ИЗ Заказ.УслугиДляКлиента Цикл
				
				Для Каждого ХаракткристикаУслуги ИЗ СтрокаЗаказа.Услуга.ОписаниеУслуги Цикл
					
					СтрокаВЗ = ВиртуальныйЗаказ.Добавить();
					СтрокаВЗ.Ссылка = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
					СтрокаВЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаВЗ.Характеристика = ХаракткристикаУслуги.Характеристика; 
					СтрокаВЗ.Значение = ХаракткристикаУслуги.Значение; 
					СтрокаВЗ.Услуга = СтрокаЗаказа.Услуга; 
						
					Для Каждого ЭкстраПоле ИЗ Заказ.ЭкстраПоля Цикл
						
						СтрокаВЗ = ВиртуальныйЗаказ.Добавить();
						СтрокаВЗ.Ссылка = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
						СтрокаВЗ.ЭкстраПоле = ЭкстраПоле.Характеристика;
						СтрокаВЗ.ЗначениеЭкстраПоле = ЭкстраПоле.Значение;
						СтрокаВЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						СтрокаВЗ.Характеристика = ХаракткристикаУслуги.Характеристика; 
						СтрокаВЗ.Значение = ХаракткристикаУслуги.Значение; 
						СтрокаВЗ.Услуга = СтрокаЗаказа.Услуга; 
						
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;
		Запрос.УстановитьПараметр("ВиртуальныйЗаказ", ВиртуальныйЗаказ);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТ.Ссылка,
		               |	ЗаказКомандированногоБТ.ЭкстраПоле КАК ЭкстраПоле,
		               |	ЗаказКомандированногоБТ.ЗначениеЭкстраПоле КАК ЗначениеЭкстраПоле,
		               |	ЗаказКомандированногоБТ.ХарактеристикаНоменклатуры,
		               |	ЗаказКомандированногоБТ.Характеристика КАК Характеристика,
		               |	ЗаказКомандированногоБТ.Значение КАК Значение,
		               |	ЗаказКомандированногоБТ.Услуга
		               |ПОМЕСТИТЬ ПредВТ
		               |ИЗ
		               |	&ВиртуальныйЗаказ КАК ЗаказКомандированногоБТ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПредВТ.Ссылка,
		               |	ПредВТ.ЭкстраПоле,
		               |	ПредВТ.ЗначениеЭкстраПоле,
		               |	ПредВТ.ХарактеристикаНоменклатуры,
		               |	ПредВТ.Характеристика,
		               |	ПредВТ.Значение,
		               |	ПредВТ.Услуга
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	ПредВТ КАК ПредВТ
					   |;";

		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументОбъект.Услуга") Тогда
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ДокументСсылка.ЗаказКомандированногоБТ"));
			ОписаниеТипаСсылка = Новый ОписаниеТипов(ЗК);
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляЭкстраПолей"));
			ОписаниеТипаЭкстраПоле = Новый ОписаниеТипов(ЗК);
			
			ОписаниеТипаЗначениеЭкстраПоле = ПланыВидовХарактеристик.НаборХарактеристикДляЭкстраПолей.СоздатьЭлемент().ТипЗначения;
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
			ОписаниеТипаХарактеристикаНоменклатуры = Новый ОписаниеТипов(ЗК);
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ПланВидовХарактеристикСсылка.НаборХарактеристикДляНоменклатуры"));
			ОписаниеТипаХарактеристика = Новый ОписаниеТипов(ЗК);
			
			
			ОписаниеТипаЗначение = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.СоздатьЭлемент().ТипЗначения;
			
			ЗК = Новый Массив;
			ЗК.Добавить(Тип("ДокументСсылка.Услуга"));
			ОписаниеТипаУслуга = Новый ОписаниеТипов(ЗК);
			
			
			ВиртуальныйЗаказ = Новый ТаблицаЗначений;
			ВиртуальныйЗаказ.Колонки.Добавить("Ссылка", ОписаниеТипаСсылка);
			ВиртуальныйЗаказ.Колонки.Добавить("ЭкстраПоле", ОписаниеТипаЭкстраПоле);
			ВиртуальныйЗаказ.Колонки.Добавить("ЗначениеЭкстраПоле", ОписаниеТипаЗначениеЭкстраПоле);
			ВиртуальныйЗаказ.Колонки.Добавить("ХарактеристикаНоменклатуры", ОписаниеТипаХарактеристикаНоменклатуры);
			ВиртуальныйЗаказ.Колонки.Добавить("Характеристика", ОписаниеТипаХарактеристика);
			ВиртуальныйЗаказ.Колонки.Добавить("Значение", ОписаниеТипаЗначение);
			ВиртуальныйЗаказ.Колонки.Добавить("Услуга", ОписаниеТипаУслуга);
			
			//Для Каждого СтрокаЗаказа ИЗ Заказ.УслугиДляКлиента Цикл
			
			    СтрокаЗаказа = Новый Структура("Услуга", Заказ.Ссылка);
				
				Для Каждого ХаракткристикаУслуги ИЗ СтрокаЗаказа.Услуга.ОписаниеУслуги Цикл
					
					СтрокаВЗ = ВиртуальныйЗаказ.Добавить();
					СтрокаВЗ.Ссылка = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
					СтрокаВЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
					СтрокаВЗ.Характеристика = ХаракткристикаУслуги.Характеристика; 
					СтрокаВЗ.Значение = ХаракткристикаУслуги.Значение; 
					СтрокаВЗ.Услуга = СтрокаЗаказа.Услуга; 
						
					Для Каждого ЭкстраПоле ИЗ Заказ.ЭкстраПоля Цикл
						
						СтрокаВЗ = ВиртуальныйЗаказ.Добавить();
						СтрокаВЗ.Ссылка = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
						СтрокаВЗ.ЭкстраПоле = ЭкстраПоле.Характеристика;
						СтрокаВЗ.ЗначениеЭкстраПоле = ЭкстраПоле.Значение;
						СтрокаВЗ.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
						СтрокаВЗ.Характеристика = ХаракткристикаУслуги.Характеристика; 
						СтрокаВЗ.Значение = ХаракткристикаУслуги.Значение; 
						СтрокаВЗ.Услуга = СтрокаЗаказа.Услуга; 
						
					КонецЦикла;
				КонецЦикла;
				
			//КонецЦикла;
		Запрос.УстановитьПараметр("ВиртуальныйЗаказ", ВиртуальныйЗаказ);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказКомандированногоБТ.Ссылка,
		               |	ЗаказКомандированногоБТ.ЭкстраПоле КАК ЭкстраПоле,
		               |	ЗаказКомандированногоБТ.ЗначениеЭкстраПоле КАК ЗначениеЭкстраПоле,
		               |	ЗаказКомандированногоБТ.ХарактеристикаНоменклатуры,
		               |	ЗаказКомандированногоБТ.Характеристика КАК Характеристика,
		               |	ЗаказКомандированногоБТ.Значение КАК Значение,
		               |	ЗаказКомандированногоБТ.Услуга
		               |ПОМЕСТИТЬ ПредВТ
		               |ИЗ
		               |	&ВиртуальныйЗаказ КАК ЗаказКомандированногоБТ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПредВТ.Ссылка,
		               |	ПредВТ.ЭкстраПоле,
		               |	ПредВТ.ЗначениеЭкстраПоле,
		               |	ПредВТ.ХарактеристикаНоменклатуры,
		               |	ПредВТ.Характеристика,
		               |	ПредВТ.Значение,
		               |	ПредВТ.Услуга
		               |ПОМЕСТИТЬ ВТ
		               |ИЗ
		               |	ПредВТ КАК ПредВТ
					   |;";
					   
		Конецесли;
		
		Запрос.Текст = Запрос.Текст + "
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(ВТ.Ссылка) КАК Ссылка,
		               |	ВТ.Услуга КАК Услуга,
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.Характеристика) КАК Характеристика
		               |ПОМЕСТИТЬ СТревелПолитикой
		               |ИЗ
		               |	ВТ КАК ВТ
		               |
					   |"+Политика+"
					   |
					   |СГРУППИРОВАТЬ ПО
		               |	ВТ.Услуга
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.Характеристика) >= &КоличестоПодходящихУсловий
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(ВТ.Ссылка) КАК Ссылка,
		               |	ВТ.Услуга
		               |ПОМЕСТИТЬ ВсеЗаписи
		               |ИЗ
		               |	ВТ КАК ВТ
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ.Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВсеЗаписи.Ссылка КАК ВсеЗаписи,
		               |	СТревелПолитикой.Ссылка КАК СПолитикой,
		               |	ВсеЗаписи.Услуга
		               |ИЗ
		               |	ВсеЗаписи КАК ВсеЗаписи
		               |		ПОЛНОЕ СОЕДИНЕНИЕ СТревелПолитикой КАК СТревелПолитикой
		               |		ПО ВсеЗаписи.Услуга = СТревелПолитикой.Услуга
		               |ГДЕ
		               |	НЕ СТревелПолитикой.Ссылка ЕСТЬ NULL ";				   
		               					   
		ПройденоТП = Истина;			   
		Выгрузка = Запрос.Выполнить().Выбрать();
		
		СписокУслуг = Новый Массив;
		
		Если Выгрузка.Количество() >0 Тогда
			
			Пока Выгрузка.Следующий() Цикл
				ВсеЗаписи = Выгрузка.ВсеЗаписи;
				СПолитикой = Выгрузка.СПолитикой;
				// "" - запрещено "НЕ" - разрешено
				Если СокрЛП(Условие) = "" И СПолитикой > 0 Тогда
					//Запрещено и это попало в политику, то всё плохо
					//Сообщить("Тревел Политика нарушена!!!");
					ПройденоТП = Ложь;
					СписокУслуг.Добавить(Новый Структура("Пройдено, Услуга, Расписание", ПройденоТП, Выгрузка.Услуга));
				ИначеЕсли СокрЛП(Условие) = "НЕ" И ВсеЗаписи - СПолитикой > 0 Тогда
					 //Запрещено и это попало в политику, то всё ОК
				 КонецЕсли;
			 КонецЦикла;
			 
		ИначеЕсли СокрЛП(Условие) = "НЕ" Тогда
			//Разрешено только с указанной политикой
			ПройденоТП = Ложь;
			//Сообщить("Тревел Политика нарушена!!!");
		КонецЕсли;
	КонецЕсли;
	
	Расшифровка = СписокУслуг;
	Возврат ПройденоТП;
КонецФункции


Функция ЗаполнитьПоляПостроителя(ПостроительЗапроса, Элементы)

	ПрекратитьСмотреть = Ложь;
	Для Каждого ЭлементОтбораКомпоновкиДанных ИЗ Элементы Цикл
		Если ТипЗнч(ЭлементОтбораКомпоновкиДанных) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбораКомпоновкиДанных.Использование Тогда
			
				//ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение));
				//ЗаполнитьОтборПоОтборуКомпоновщика(ЭлементОтбора, ЭлементОтбораКомпоновкиДанных);
				//ПостроительЗапроса.ВыбранныеПоля.Добавить(Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение));
				
				ИмяПоляОтбора = Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение);
				ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяПоляОтбора);
				Если ДоступноеПоле <> Неопределено Тогда
					ОписаниеТипов = Метаданные.ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Тип;
					ДоступноеПоле.ТипЗначения = ОписаниеТипов; 
				КонецЕсли;
				
				Если НЕ ПрекратитьСмотреть Тогда
					Попытка
						ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);			
						ЗаполнитьОтборПоОтборуКомпоновщика(ЭлементОтбора, ЭлементОтбораКомпоновкиДанных);
						ПостроительЗапроса.ВыбранныеПоля.Добавить(Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение));
					Исключение						
						ПрекратитьСмотреть = Истина;
					КонецПопытки;
				КонецЕсли;
			
			КонецЕсли;
			
			
		Иначе
		    ЗаполнитьПоляПостроителя(ПостроительЗапроса, ЭлементОтбораКомпоновкиДанных.Элементы)
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция СобратьПрименение(ТЗВыгрузка, Элементы, Приминение)
	//
	Для Каждого СтрокаВыгрузки ИЗ ТЗВыгрузка Цикл
		Для Каждого ЭлементОтбораКомпоновкиДанных ИЗ Элементы Цикл
			Если ТипЗнч(ЭлементОтбораКомпоновкиДанных) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ИмяКолонки = СтрЗаменить(Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение), ".", "");
				
				Если ТЗВыгрузка.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
					Приминение.Вставить(ИмяКолонки, СтрокаВыгрузки[ИмяКолонки]);
				КонецЕсли;
				
			Иначе 
				ПрименениеВнутриГруппы = Новый Структура;
				СобратьПрименение(ТЗВыгрузка, ЭлементОтбораКомпоновкиДанных.Элементы, ПрименениеВнутриГруппы);
				
				Если ЭлементОтбораКомпоновкиДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
					СуммаГруппы = 0;
					Для Каждого КлючЗначение ИЗ ПрименениеВнутриГруппы Цикл
						СуммаГруппы = СуммаГруппы - КлючЗначение.Значение;
					КонецЦикла;
					Приминение.Вставить("ГруппаНЕ", СуммаГруппы);
				ИначеЕсли ЭлементОтбораКомпоновкиДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
					СуммаГруппы = 0;
					Для Каждого КлючЗначение ИЗ ПрименениеВнутриГруппы Цикл
						Если КлючЗначение.Значение <> 0 Тогда
							СуммаГруппы = КлючЗначение.Значение;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Приминение.Вставить("ГруппаИли", СуммаГруппы);
				ИначеЕсли ЭлементОтбораКомпоновкиДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
					СуммаГруппы = 0;
					Для Каждого КлючЗначение ИЗ ПрименениеВнутриГруппы Цикл
						СуммаГруппы = СуммаГруппы + КлючЗначение.Значение;
					КонецЦикла;
					Приминение.Вставить("ГруппаИ", СуммаГруппы);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецФункции


Функция ПодходящееУсловияПриминенияК(Заказ, RLS, ДЗ, Условие = "", Расшифровка = Неопределено, ОбъектУсловий = Неопределено) Экспорт
	
	Приминение = Новый Структура;
	СписокУслуг = Новый Массив;

	Если RLS = "" И ТипЗнч(ДЗ) = Тип("ОтборКомпоновкиДанных") Тогда
		
		ПройденоТП = Истина;
		
		Услуги = Новый Массив;
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказКомандированногоБТ") ИЛИ ТипЗнч(Заказ) = Тип("ДокументОбъект.ЗаказКомандированногоБТ") Тогда
			Для Каждого СтрокаСУслугойКлиента ИЗ Заказ.УслугиДляКлиента Цикл
				Если СтрокаСУслугойКлиента.ВключеноВ = "" Тогда
					Услуги.Добавить(СтрокаСУслугойКлиента.Услуга);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Услуги.Добавить(Заказ.Ссылка);
		КонецЕсли;
		
		ТекстЗапроса = ПолучитьЗапросДляУсловий(Заказ);//ОбъектУсловий);
		ТекстЗаглушки = УправлениеБТСервер.ПолучитьТекстЗаглушки();
		НовыйТекстЗаглушки = "ВЫБРАТЬ
		               |	УслугаОписаниеУслуги.Ссылка КАК Ссылка,
		               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
		               |	УслугаОписаниеУслуги.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаОписаниеУслугиВТ
		               |ИЗ
		               |	Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
		               |ГДЕ
		               |	УслугаОписаниеУслуги.Ссылка В (&Ссылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	УслугаЭкстраПоля.Ссылка КАК Ссылка,
		               |	УслугаЭкстраПоля.Характеристика КАК Характеристика,
		               |	УслугаЭкстраПоля.Значение КАК Значение
		               |ПОМЕСТИТЬ УслугаЭкстраПоляВТ
		               |ИЗ
		               |	Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
		               |ГДЕ
		               |	УслугаЭкстраПоля.Ссылка В (&Ссылка)
					   |;";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗаглушки, НовыйТекстЗаглушки);
	
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = ТекстЗапроса;
		ПостроительЗапроса.ЗаполнитьНастройки();
		
		ЗаполнитьПоляПостроителя(ПостроительЗапроса, ДЗ.Элементы);

		ПостроительЗапроса.Параметры.Вставить("Ссылка", Услуги);
		ПостроительЗапроса.Выполнить();
		Выгрузка = ПостроительЗапроса.Результат.Выбрать();
		
		ТЗВыгрузка = ПостроительЗапроса.Результат.Выгрузить();
		СобратьПрименение(ТЗВыгрузка, ДЗ.Элементы, Приминение);		
		
		ОбработанныеУслуги = Новый Массив;
		Если Выгрузка.Количество() >0 Тогда
			Пока Выгрузка.Следующий() Цикл
				//ВсеЗаписи = Выгрузка.ВсеЗаписи;
				СПолитикой = Выгрузка.Количество();
				// "" - запрещено "НЕ" - разрешено
				Если СокрЛП(Условие) = "" И СПолитикой > 0 Тогда
					//Запрещено и это попало в политику, то всё плохо
					ПройденоТП = Ложь;
					Если ОбработанныеУслуги.Найти(Выгрузка.Услуга) = Неопределено Тогда 
						ОбработанныеУслуги.Добавить(Выгрузка.Услуга);
						СписокУслуг.Добавить(Новый Структура("Пройдено, Услуга, Расписание", ПройденоТП, Выгрузка.Услуга));
					КонецЕсли;
				 //ИначеЕсли СокрЛП(Условие) = "НЕ" И ВсеЗаписи - СПолитикой > 0 Тогда
					 //Запрещено и это попало в политику, то всё ОК
				 КонецЕсли;
			 КонецЦикла;			 
		ИначеЕсли СокрЛП(Условие) = "НЕ" Тогда
			//Разрешено только с указанной политикой
			ПройденоТП = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Расшифровка = Приминение;  //СписокУслуг
	Возврат ПройденоТП;
КонецФункции





Функция ПолучитьЗапросПоТЗ(ТЗ, СписокДобавляемыхТаблиц)
	
	ДобавляемТаблицуКомандируемых = Ложь;
	ДобавляемТаблицуКомандируемых = СписокДобавляемыхТаблиц.Командируемые;
	
	Колонки = "";
	Для Каждого КолонкаИЗТЗ ИЗ ТЗ.Колонки Цикл
		Колонки = Колонки + ?(Колонки = "", "", ",") + " ВременнаяТаблицаВх."+КолонкаИЗТЗ.Имя  + Символы.ПС;
	КонецЦикла;
	КолонкиВых = Колонки;
	
	ЗапросТекст = "ВЫБРАТЬ " + Колонки + Символы.ПС + " ПОМЕСТИТЬ ВременнаяТаблицаВх ИЗ " + Символы.ПС + " &ВременнаяТаблица КАК ВременнаяТаблицаВх; " + Символы.ПС + Символы.ПС;
	
	Если ДобавляемТаблицуКомандируемых Тогда		
		КолонкиВых =  КолонкиВых + ",
			|	УслугаКомандируемые.НомерСтроки КАК НомерСтроки,
			|	УслугаКомандируемые.Командируемый КАК Командируемый";
	КонецЕсли;	
	ЗапросТекст = ЗапросТекст + "ВЫБРАТЬ " + КолонкиВых + Символы.ПС + " ИЗ " + Символы.ПС + " ВременнаяТаблицаВх КАК ВременнаяТаблицаВх";
	
	Если ДобавляемТаблицуКомандируемых Тогда		
		ЗапросТекст = ЗапросТекст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Услуга.Командируемые КАК УслугаКомандируемые
		|		ПО ВременнаяТаблицаВх.Услуга = УслугаКомандируемые.Ссылка";
	КонецЕсли;
	
	Возврат ЗапросТекст;
	
КонецФункции

Функция ПолучитьТаблицуПоУсловиям(Заказ, RLS, ДЗ, Условие = "", Расшифровка = Неопределено) Экспорт
	
	Если ТипЗнч(ДЗ) = Тип("ОтборКомпоновкиДанных") Тогда
		
		ДобавляемТаблицуКомандируемых = Ложь;
		СписокКолонок = Новый Массив;
		
		МенеджерВременныхТаблиц = ПолучитьМенеджерВременныхТаблиц(Заказ);
		
		ТекстЗапроса = ПолучитьЗапросДляУсловий();				
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = ТекстЗапроса;
		ПостроительЗапроса.ЗаполнитьНастройки();
		Для Каждого ЭлементОтбораКомпоновкиДанных ИЗ ДЗ.Элементы Цикл
			
			ИмяПоляОтбора = Строка(ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение);
			ДоступноеПоле = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяПоляОтбора);
			Если ДоступноеПоле <> Неопределено Тогда
				КЧ = Новый КвалификаторыЧисла(15,2);
				КС = Новый КвалификаторыСтроки(255);
				Массив = Новый Массив;
				Массив.Добавить(Тип("Строка"));
				Массив.Добавить(Тип("Число"));
				ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС, КЧ);
				ДоступноеПоле.ТипЗначения = ОписаниеТипов; 
			КонецЕсли;
			
			ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ИмяПоляОтбора);			
			ЗаполнитьОтборПоОтборуКомпоновщика(ЭлементОтбора, ЭлементОтбораКомпоновкиДанных);
			
			Если СтрНайти(ИмяПоляОтбора,"Услуга.Командируемые.") >0 Тогда
				//Надо добавить постобработку и вытащить Командируемых
				ДобавляемТаблицуКомандируемых = Истина;
			КонецЕсли;
			Если ЭлементОтбораКомпоновкиДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено ИЛИ
				ЭлементОтбораКомпоновкиДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				СписокКолонок.Добавить(ЭлементОтбораКомпоновкиДанных);	
			КонецЕсли;
		КонецЦикла;
		
		
		Запрос = ПостроительЗапроса.ПолучитьЗапрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ПолучитьТекстЗаглушки(), "");
		ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
		
		ЗапросСРезультатами = Новый Запрос;
		ЗапросСРезультатами.УстановитьПараметр("ВременнаяТаблица", ВременнаяТаблица);
		
	    СписокДобавляемыхТаблиц = Новый Структура("Командируемые", ДобавляемТаблицуКомандируемых);
		ЗапросСРезультатами.Текст = ПолучитьЗапросПоТЗ(ВременнаяТаблица, СписокДобавляемыхТаблиц);

		Выгрузка = ЗапросСРезультатами.Выполнить().Выгрузить();

	КонецЕсли;
	
КонецФункции






#Область СозданиеСвязанныхУслуг

Функция СобратьСуммыПоУсловию(УслугаВладелец, НоваяУслуга, ЭлементОтбора, ТипСравнения = Неопределено, РассчитаныеЗначения = Неопределено, Обработчик = Неопределено)
	
	Если Обработчик = Неопределено Тогда
		Обработчик = Справочники.ФункцииОписания.ПустаяСсылка();
	КонецЕсли;
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСравнения);
	ОписаниеТ = Новый ОписаниеТипов(МассивТипов,,,КЧ);
	Результат = ОписаниеТ.ПривестиЗначение();	
	
	Если РассчитаныеЗначения <> Неопределено  Тогда
		Значение = РассчитаныеЗначения.Получить(ЭлементОтбора);
		Если НЕ Значение = Неопределено Тогда	
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПрименяетсяК = Новый Массив;
	Если ТипЗнч(ЭлементОтбора) = Тип("СправочникСсылка.ФункцииОписания") Тогда
		ПараметрыФункции = Новый Структура("Объект", УслугаВладелец);
		ПрименяетсяК = ВыполнитьПростуюФункцию(ЭлементОтбора, ПараметрыФункции);
		
		Результат = 0;
		Для Каждого КлючЗначениеПрименения ИЗ ПрименяетсяК Цикл
			Если ТипЗнч(КлючЗначениеПрименения.Значение) = Тип("Число") Тогда
				Результат = Результат + КлючЗначениеПрименения.Значение;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ЭлементОтбора.Условие) Тогда		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ЭлементОтбора.Условие);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		
		Условие = "";
		Расшифровка = Неопределено;
		ДЗПрименяетсяК = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ПодходящееУсловияПриминенияК(УслугаВладелец, "", ДЗПрименяетсяК, Условие, ПрименяетсяК);
		
		Если ПрименяетсяК <> Неопределено И ПрименяетсяК.Количество() > 0 Тогда
			Для Каждого ТекСтрокаПрименяетсяК Из ПрименяетсяК Цикл
				Если ТипСравнения = Неопределено Тогда
					Результат = Результат + Строка(ТекСтрокаПрименяетсяК.Значение); //Чтобы не сложить число и строку
				ИначеЕсли ТипСравнения = Тип("Дата") Тогда
					Результат = ТекСтрокаПрименяетсяК.Значение;
				Иначе
					Если ТипЗнч(ТекСтрокаПрименяетсяК.Значение) = ТипСравнения Тогда
						Результат = Результат + ТекСтрокаПрименяетсяК.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Обработчик <> Справочники.ФункцииОписания.ПустаяСсылка() Тогда
		ПараметрыФункции = Новый Структура("УслугаВладелец, НоваяУслуга, Сумма", УслугаВладелец, НоваяУслуга, Результат);
		Результат = ВыполнитьПростуюФункцию(Обработчик, ПараметрыФункции);
	КонецЕсли;
	
	Если РассчитаныеЗначения <> Неопределено Тогда
		РассчитаныеЗначения.Вставить(ЭлементОтбора, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьФункциюПоУсловию(УслугаВладелец, ЭлементОтбора, НовыйОбъект, РассчитаныеЗначения = Неопределено, Обработчик = Неопределено)
	
	Если Обработчик = Неопределено Тогда
		Обработчик = Справочники.ФункцииОписания.ПустаяСсылка();
	КонецЕсли;
	
	КЧ = Новый КвалификаторыЧисла(15,2);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТ = Новый ОписаниеТипов(МассивТипов,,,КЧ);
	Результат = ОписаниеТ.ПривестиЗначение();	
	
	Если РассчитаныеЗначения <> Неопределено  Тогда
		Значение = РассчитаныеЗначения.Получить(ЭлементОтбора);
		Если НЕ Значение = Неопределено Тогда	
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПараматрыФункции = Новый Структура("УслугаВладелец, НовыйОбъект", УслугаВладелец, НовыйОбъект);
	Результат = ВыполнитьПростуюФункцию(ЭлементОтбора, ПараматрыФункции);		
	
	Если Обработчик <> Справочники.ФункцииОписания.ПустаяСсылка() Тогда
		Результат = ВыполнитьПростуюФункцию(Обработчик, Результат);
	КонецЕсли;
	
	
	Если РассчитаныеЗначения <> Неопределено Тогда
		РассчитаныеЗначения.Вставить(ЭлементОтбора, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеПоЭлементуОтбора(УслугаВладелец, ЭлементОтбора)
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ЭлементОтбора.Условие) Тогда		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ЭлементОтбора.Условие);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		
		Условие = "";
		Расшифровка = Неопределено;
		ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ПолучитьТаблицуПоУсловиям(УслугаВладелец, "", ДЗ, Условие, Расшифровка);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции


Функция СоздатьУслугуПоШаблону(Шаблон, НоваяУслуга = Неопределено, УслугаВладелец = Неопределено, Обработчик = Неопределено) Экспорт
	
	Результат = НоваяУслуга;
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		РассчитаныеЗначения = Новый Соответствие;
		НовыйОбъект = УправлениеБТВызовСервера.ИзJSON(Шаблон);
		
		//ДатаДокумента = ИИСервер.СоздатьОбъект(НовыйОбъект.Дата);
		Если ТипЗнч(НовыйОбъект.Дата) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.Дата);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Дата"), РассчитаныеЗначения);
			НовыйОбъект.Дата = Сумма;			
		КонецЕсли;
		
		//Поставщик
		Если ТипЗнч(НовыйОбъект.Цена) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.Цена);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.Цена = Сумма;	
		КонецЕсли;
		Если ТипЗнч(НовыйОбъект.СуммаНДС) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.СуммаНДС);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.СуммаНДС = Сумма;			
		КонецЕсли;
		Если ТипЗнч(НовыйОбъект.Сумма) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.Сумма);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.Сумма = Сумма;			
		КонецЕсли;
		
		//Клиент
		Если ТипЗнч(НовыйОбъект.ЦенаКлиента) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.ЦенаКлиента);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.ЦенаКлиента = Сумма;			
		КонецЕсли;
		Если ТипЗнч(НовыйОбъект.КоличествоКлиента) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.КоличествоКлиента);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.КоличествоКлиента = Сумма;			
		КонецЕсли;
		Если ТипЗнч(НовыйОбъект.СуммаНДСКлиента) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.СуммаНДСКлиента);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.СуммаНДСКлиента = Сумма;			
		КонецЕсли;
		Если ТипЗнч(НовыйОбъект.СуммаКлиента) = Тип("Структура") Тогда
			ЭлементОтбора = ИИСервер.ПолучитьСсылку(НовыйОбъект.СуммаКлиента);
			Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			НовыйОбъект.СуммаКлиента = Сумма;			
		КонецЕсли;
		
		//Командируемые
		Если ТипЗнч(НовыйОбъект.Командируемые) = Тип("Структура") Тогда
			КомандируемыеМассив = НовыйОбъект.Командируемые.СУсловиями;
			НовыйОбъект.Командируемые = Новый Массив;
			Для Каждого СтрокаТЗ ИЗ КомандируемыеМассив Цикл
				НомерСтроки = СтрокаТЗ.НомерСтроки;
				СтрокаСКомандируемым = УслугаВладелец.Командируемые.Найти(НомерСтроки, "НомерСтроки");
				Если СтрокаСКомандируемым <> Неопределено Тогда
					НоваяСтрока = Новый Структура("Командируемый");
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСКомандируемым); 
					НовыйОбъект.Командируемые.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтатусУслуги = Перечисления.СтатусыУслуг.УслугаРеализована;
		Если НовыйОбъект.Свойство("СтатусУслуги") И ТипЗнч(НовыйОбъект.СтатусУслуги) = Тип("Структура") Тогда
			СтатусУслуги = ИИСервер.ПолучитьСсылку(НовыйОбъект.СтатусУслуги);
			НовыйОбъект.Удалить("СтатусУслуги");
			//Сумма = СобратьСуммыПоУсловию(УслугаВладелец, НовыйОбъект, ЭлементОтбора, Тип("Число"), РассчитаныеЗначения, Обработчик);
			//НовыйОбъект.СуммаКлиента = Сумма;			
		КонецЕсли;
		
		НоваяУслугаОбъект = ИИСервер.СоздатьОбъект(НовыйОбъект, НоваяУслуга, Истина);
		
		Если НоваяУслугаОбъект.Поставщик = Справочники.Контрагенты.ПустаяСсылка() Тогда 
			НоваяУслугаОбъект.Поставщик = УслугаВладелец.Поставщик;
		КонецЕсли;
		Если НоваяУслугаОбъект.ДоговорСПоставщиком = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда 
			НоваяУслугаОбъект.ДоговорСПоставщиком = УслугаВладелец.ДоговорСПоставщиком;
		КонецЕсли;
		
		Если НоваяУслугаОбъект.Партнер = Справочники.Партнеры.ПустаяСсылка() Тогда 
			НоваяУслугаОбъект.Партнер = УслугаВладелец.Партнер;
		КонецЕсли;
		Если НоваяУслугаОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда 
			НоваяУслугаОбъект.Контрагент = УслугаВладелец.Контрагент;
		КонецЕсли;
		Если НоваяУслугаОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			НоваяУслугаОбъект.Договор = УслугаВладелец.Договор;
		КонецЕсли;
		
		Для Каждого ЭлементЭкстраПоля ИЗ УслугаВладелец.ЭкстраПоля Цикл
			СтрокаСХарактеристикой = НоваяУслугаОбъект.ЭкстраПоля.Найти(ЭлементЭкстраПоля.Характеристика, "Характеристика");
			Если СтрокаСХарактеристикой<>Неопределено И НЕ ЗначениеЗаполнено(СтрокаСХарактеристикой.Значение) Тогда
				СтрокаСХарактеристикой.Значение = ЭлементЭкстраПоля.Значение; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОписания ИЗ УслугаВладелец.ОписаниеУслуги Цикл
			СтрокаСХарактеристикой = НоваяУслугаОбъект.ОписаниеУслуги.Найти(ЭлементОписания.Характеристика, "Характеристика");
			Если СтрокаСХарактеристикой<>Неопределено И НЕ ЗначениеЗаполнено(СтрокаСХарактеристикой.Значение) Тогда
				СтрокаСХарактеристикой.Значение = ЭлементОписания.Значение; 
			КонецЕсли;
		КонецЦикла;
		
		Если НоваяУслугаОбъект.Командируемые.Количество() = 0 Тогда
			НоваяУслугаОбъект.Командируемые.Загрузить(УслугаВладелец.Командируемые.Выгрузить());
		КонецЕсли;
		
	Иначе
		НоваяУслугаОбъект = НоваяУслуга;
	КонецЕсли;
	
	Возврат Новый Структура("Услуга, Допы", НоваяУслугаОбъект, Новый Структура("СтатусУслуги", СтатусУслуги) );
КонецФункции

Функция УстановитьСуммуВПроцентах(Основание, Процент, СтрокаСвязи)
	
	УстанавливаемаяСумма = Основание/100*Процент;
	Если УстанавливаемаяСумма < СтрокаСвязи.НеМенееЧем И СтрокаСвязи.НеМенееЧем <> 0 Тогда
		УстанавливаемаяСумма = СтрокаСвязи.НеМенееЧем;
	ИначеЕсли УстанавливаемаяСумма > СтрокаСвязи.НеБолееЧем И СтрокаСвязи.НеБолееЧем <> 0 Тогда
		УстанавливаемаяСумма = СтрокаСвязи.НеБолееЧем;
	КонецЕсли;
	
	Возврат УстанавливаемаяСумма; 
КонецФункции

Функция НайтиЗагруженнуюУслугу(УслугаВладелец, СтрокаСвязи, УслугаВложенаВ = Неопределено, ПрименяетсяК = Неопределено) Экспорт
	
	Результат = Документы.Услуга.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Услуга.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Услуга КАК Услуга
	               |ГДЕ
	               |	Услуга.ПометкаУдаления = ЛОЖЬ
	               |	И Услуга.УслугаВладелец = &УслугаВладелец
	               |	И Услуга.ТипДочернейУслуги = ЗНАЧЕНИЕ(Перечисление.ТипДочернейУслуги.Загруженная)
	               |	И Услуга.НоменклатураБТ = &НоменклатураБТ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Услуга.Ссылка.Номер";
	Запрос.УстановитьПараметр("УслугаВладелец", УслугаВладелец);
	Запрос.УстановитьПараметр("НоменклатураБТ", СтрокаСвязи.НоменклатураПриемник);
	Выгрузка = Запрос.Выполнить().Выбрать();

	Если Выгрузка.Следующий() Тогда
		УслугаОбъект = Выгрузка.Ссылка.ПолучитьОбъект();
		//УслугаОбъект = Документы.Услуга.СоздатьДокумент();
		УслугаОбъект.ВложеноВ = УслугаВложенаВ;
		УслугаОбъект.Партнер = УслугаВладелец.Партнер;
		УслугаОбъект.Контрагент = УслугаВладелец.Контрагент;
		УслугаОбъект.Договор = УслугаВладелец.Договор;
		УслугаОбъект.Командируемые.Загрузить(УслугаВладелец.Командируемые.Выгрузить());
		УслугаОбъект.ЭкстраПоля.Загрузить(УслугаВладелец.ЭкстраПоля.Выгрузить());
		
		ЭкстраПоля = УслугаОбъект.ЭкстраПоля.Выгрузить();			
		Характеристики = УслугаОбъект.ОписаниеУслуги.Выгрузить();
		ПолноеНаименованиеУслуги = УправлениеБТСервер.ПолучитьОписание(УслугаОбъект, УслугаОбъект.НоменклатураБТ, Характеристики, ЭкстраПоля);
		УслугаОбъект.ПолноеНаименованиеУслуги = ПолноеНаименованиеУслуги;
		
		УслугаОбъект.Записать(?(УслугаОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Результат = УслугаОбъект.Ссылка;
	КонецЕсли;
	
	Возврат Результат; 
КонецФункции

Функция НайтиСоздатьУслугу(УслугаВладелец, СтрокаСвязи, УслугаВложенаВ = Неопределено, ПрименяетсяК = Неопределено, СуммаПрименяетсяК = 0) Экспорт
	
	ПрименяетсяК = ?(ПрименяетсяК = Неопределено, Новый Массив, ПрименяетсяК);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Услуга.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Услуга КАК Услуга
	               |ГДЕ
	               |	Услуга.ПометкаУдаления = ИСТИНА
	               |	И Услуга.УслугаВладелец = &УслугаВладелец
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка.Номер";
	Запрос.УстановитьПараметр("УслугаВладелец", УслугаВладелец);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		УслугаОбъект = Выгрузка[0].Ссылка.ПолучитьОбъект(); 
		УправлениеБТСервер.УстановитьСтатусУслуги(Выгрузка[0].Ссылка, Перечисления.СтатусыУслуг.УслугаРеализована);
	Иначе
		УслугаОбъект = Документы.Услуга.СоздатьДокумент();
	КонецЕсли;
	
	УслугаОбъект.ПометкаУдаления = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаСвязи.ШаблонСвязаннойУслуги) Тогда
		//Это пользовательский режим
		ДанныеПоУслуге = СоздатьУслугуПоШаблону(СтрокаСвязи.ШаблонСвязаннойУслуги, УслугаОбъект, УслугаВладелец, СтрокаСвязи.Обработчик);
		УслугаОбъект = ДанныеПоУслуге.Услуга;
		
		Если НЕ ЗначениеЗаполнено(УслугаОбъект.Дата) Тогда
			УслугаОбъект.Дата = УслугаВладелец.Дата;
		КонецЕсли;
		
		Если УслугаВложенаВ <> Неопределено Тогда
			УслугаОбъект.ВложеноВ = УслугаВложенаВ;
		КонецЕсли;	
		
		УслугаОбъект.УслугаВладелец = УслугаВладелец;
		СсылкаНаВладельца = УслугаВладелец;
		Пока ЗначениеЗаполнено(СсылкаНаВладельца.УслугаВладелец) Цикл
			СсылкаНаВладельца = СсылкаНаВладельца.УслугаВладелец; 
			УслугаОбъект.УслугаВладелец = СсылкаНаВладельца;
		КонецЦикла;
		УслугаОбъект.ТипДочернейУслуги = Перечисления.ТипДочернейУслуги.Автоматическая;
		
		ОписаниеУслуги = ПолучитьОписание(УслугаОбъект, УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги, УслугаОбъект.ЭкстраПоля);
		УслугаОбъект.ПолноеНаименованиеУслуги = ОписаниеУслуги;
		
		Если НЕ СтрокаСвязи.ФиксированнаяСумма Тогда
			Если СуммаПрименяетсяК = 0 Тогда
				УслугаОбъект.Цена = УстановитьСуммуВПроцентах(УслугаВладелец.Цена, УслугаОбъект.Цена, СтрокаСвязи);
				УслугаОбъект.Сумма = УстановитьСуммуВПроцентах(УслугаВладелец.Сумма, УслугаОбъект.Сумма, СтрокаСвязи);
				УслугаОбъект.ЦенаКлиента = УстановитьСуммуВПроцентах(УслугаВладелец.ЦенаКлиента, УслугаОбъект.ЦенаКлиента, СтрокаСвязи);
				УслугаОбъект.СуммаКлиента = УстановитьСуммуВПроцентах(УслугаВладелец.СуммаКлиента, УслугаОбъект.СуммаКлиента, СтрокаСвязи);
			Иначе
				УслугаОбъект.Цена = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.Цена, СтрокаСвязи);
				УслугаОбъект.Сумма = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.Сумма, СтрокаСвязи);
				УслугаОбъект.ЦенаКлиента = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.ЦенаКлиента, СтрокаСвязи);
				УслугаОбъект.СуммаКлиента = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.СуммаКлиента, СтрокаСвязи);			
			КонецЕсли;
			
		Иначе
			//
			Если УслугаОбъект.СуммаКлиента = 0 Тогда
				УслугаОбъект.СуммаКлиента = УслугаОбъект.ЦенаКлиента * УслугаОбъект.КоличествоКлиента; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УслугаОбъект.СтавкаНДСКлиента) И НЕ ЗначениеЗаполнено(УслугаОбъект.СуммаНДСКлиента) Тогда
			УслугаОбъект.СуммаНДСКлиента = УправлениеБТСервер.ВычислитьСуммуНДС(УслугаОбъект.ЦенаКлиента * УслугаОбъект.КоличествоКлиента, УслугаОбъект.СтавкаНДСКлиента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(УслугаОбъект.СтавкаНДС) И НЕ ЗначениеЗаполнено(УслугаОбъект.СуммаНДС) Тогда
			УслугаОбъект.СуммаНДС = УправлениеБТСервер.ВычислитьСуммуНДС(УслугаОбъект.Сумма, УслугаОбъект.СтавкаНДС);	
		КонецЕсли;
		
		УслугаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		УправлениеБТСервер.УстановитьСтатусУслуги(УслугаОбъект.Ссылка, ДанныеПоУслуге.Допы.СтатусУслуги);

	Иначе	
		УслугаОбъект.Дата = УслугаВладелец.Дата;
		УслугаОбъект.ПометкаУдаления = Ложь;
		УслугаОбъект.НоменклатураБТ = СтрокаСвязи.НоменклатураПриемник;
		УслугаОбъект.ЗаказИзКорзины = УслугаВладелец.ЗаказИзКорзины;
		УслугаОбъект.СтавкаНДС = СтрокаСвязи.СтавкаНДС;
		УслугаОбъект.СтавкаНДСКлиента = СтрокаСвязи.СтавкаНДС;
		УслугаОбъект.УслугаВладелец = УслугаВладелец;
		УслугаОбъект.ТипДочернейУслуги = Перечисления.ТипДочернейУслуги.Автоматическая;

		Если УслугаВложенаВ <> Неопределено Тогда
			УслугаОбъект.ВложеноВ = УслугаВложенаВ;
		КонецЕсли;	
		
		УслугаОбъект.Поставщик = УслугаВладелец.Поставщик;
		УслугаОбъект.ДоговорСПоставщиком = УслугаВладелец.ДоговорСПоставщиком;
		
		УслугаОбъект.Партнер = УслугаВладелец.Партнер;
		УслугаОбъект.Контрагент = УслугаВладелец.Контрагент;
		УслугаОбъект.Договор = УслугаВладелец.Договор;
		
		Если СтрокаСвязи.ФиксированнаяСумма Тогда
			
			РасчетнаяСумма = 0;
			Если ПрименяетсяК <> Неопределено И ПрименяетсяК.Количество() > 0 Тогда
				Для Каждого ТекСтрокаПрименяетсяК Из ПрименяетсяК Цикл
					Если ТипЗнч(ТекСтрокаПрименяетсяК.Значение) = Тип("Число") Тогда
						РасчетнаяСумма = РасчетнаяСумма + ТекСтрокаПрименяетсяК.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(СтрокаСвязи.Обработчик) И СтрокаСвязи.Обработчик <> Справочники.ФункцииОписания.ПустаяСсылка() Тогда
					РасчетнаяСумма = ВыполнитьПростуюФункцию(СтрокаСвязи.Обработчик, РасчетнаяСумма);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаСвязи.РеквизитУстановкиЦены) И СтрокаСвязи.РеквизитУстановкиЦены <> "Цена" Тогда
					//ВычислитьСуммуСНДС  - Временный костыль
					
					Если СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС18" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС18;
					ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС18118" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС18118;
						
					ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС10" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС10;//Перечисления.СтавкиНДС.НДС10;	
					ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС10110" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС10110;//Перечисления.СтавкиНДС.НДС10_110;
					ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС20" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС20;//Перечисления.СтавкиНДС.НДС10_110;
					ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС20120" Тогда
						СтавкаНДС = Справочники.СтавкиНДСБТ.НДС20120;//Перечисления.СтавкиНДС.НДС10_110;
					Иначе
						СтавкаНДС = СтрокаСвязи.СтавкаНДС;
					КонецЕсли;
					
					УслугаОбъект.СуммаНДС = РасчетнаяСумма;
					УслугаОбъект.Цена = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДС, СтавкаНДС);
					УслугаОбъект.Сумма = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДС, СтавкаНДС);
						
					УслугаОбъект.СуммаНДСКлиента = РасчетнаяСумма;
					УслугаОбъект.ЦенаКлиента = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДСКлиента, СтавкаНДС);
					УслугаОбъект.СуммаКлиента = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДСКлиента, СтавкаНДС);
				Иначе		
					УслугаОбъект.Цена = РасчетнаяСумма;
					УслугаОбъект.СуммаНДС = ВычислитьСуммуНДС(УслугаОбъект.Цена, УслугаОбъект.СтавкаНДС);
					УслугаОбъект.Сумма = РасчетнаяСумма;
					
					УслугаОбъект.ЦенаКлиента = РасчетнаяСумма;
					УслугаОбъект.СуммаНДСКлиента = ВычислитьСуммуНДС(УслугаОбъект.Цена, УслугаОбъект.СтавкаНДС);
					УслугаОбъект.СуммаКлиента = РасчетнаяСумма;
				КонецЕсли;			
				
			Иначе
				УслугаОбъект.Цена = СтрокаСвязи.Цена;
				УслугаОбъект.СуммаНДС = СтрокаСвязи.СуммаНДС;
				УслугаОбъект.Сумма = СтрокаСвязи.Сумма;
				
				УслугаОбъект.ЦенаКлиента = СтрокаСвязи.Цена;
				УслугаОбъект.СуммаНДСКлиента = СтрокаСвязи.СуммаНДС;
				УслугаОбъект.СуммаКлиента = СтрокаСвязи.Сумма;
			КонецЕсли;
			
		Иначе
			
			ПроцентЦены = 100;
			ПроцентНДС = 100;
			ПроцентСуммы = 100;
			РасчетнаяСумма = 0;
			Если ПрименяетсяК <> Неопределено И ПрименяетсяК.Количество() > 0 Тогда
				Для Каждого ТекСтрокаПрименяетсяК Из ПрименяетсяК Цикл
					Если ТипЗнч(ТекСтрокаПрименяетсяК.Значение) = Тип("Число") Тогда
						РасчетнаяСумма = РасчетнаяСумма + ТекСтрокаПрименяетсяК.Значение;
					КонецЕсли;
				КонецЦикла;
				ПроцентЦены = СтрокаСвязи.Цена;
				ПроцентСуммы = СтрокаСвязи.Сумма;
				ПроцентНДС = СтрокаСвязи.СуммаНДС;
					
			ИначеЕсли СтрокаСвязи.Цена = 0 Тогда 
				//По умолчанию - это сумма услуги поставщика
				РасчетнаяСумма = УслугаВладелец.СуммаКлиента;
			Иначе
				ПроцентЦены = СтрокаСвязи.Цена;
				ПроцентСуммы = СтрокаСвязи.Сумма;
				ПроцентНДС = СтрокаСвязи.СуммаНДС;
				РасчетнаяСумма = УслугаВладелец.Цена;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаСвязи.РеквизитУстановкиЦены) И СтрокаСвязи.РеквизитУстановкиЦены <> "Цена" Тогда
				
				Если СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС18" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС18;
				ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС18118" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС18118;
					
				ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС10" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС10;//Перечисления.СтавкиНДС.НДС10;	
				ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС10110" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС10110;//Перечисления.СтавкиНДС.НДС10_110;
				ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС20" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС20;//Перечисления.СтавкиНДС.НДС10_110;
				ИначеЕсли СтрокаСвязи.РеквизитУстановкиЦены = "СуммаНДС20120" Тогда
					СтавкаНДС = Справочники.СтавкиНДСБТ.НДС20120;//Перечисления.СтавкиНДС.НДС10_110;
				Иначе
					СтавкаНДС = СтрокаСвязи.СтавкаНДС;
				КонецЕсли;
				
				УслугаОбъект.СуммаНДС = РасчетнаяСумма / 100 * ПроцентНДС;
				УслугаОбъект.Цена = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДС, СтавкаНДС);
				УслугаОбъект.Сумма = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДС, СтавкаНДС);
					
				УслугаОбъект.СуммаНДСКлиента = РасчетнаяСумма / 100 * ПроцентНДС;
				УслугаОбъект.ЦенаКлиента = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДСКлиента, СтавкаНДС);
				УслугаОбъект.СуммаКлиента = ВычислитьСуммуСНДС(УслугаОбъект.СуммаНДСКлиента, СтавкаНДС);
			Иначе		
				
				Если СтрокаСвязи.НеМенееЧем > 0 И (РасчетнаяСумма / 100 * ПроцентЦены) < СтрокаСвязи.НеМенееЧем Тогда
					УстанавливаемаяЦена = СтрокаСвязи.НеМенееЧем;	
				ИначеЕсли СтрокаСвязи.НеБолееЧем > 0 И (РасчетнаяСумма / 100 * ПроцентЦены) > СтрокаСвязи.НеБолееЧем Тогда
					УстанавливаемаяЦена = СтрокаСвязи.НеБолееЧем;	
				Иначе
					УстанавливаемаяЦена = РасчетнаяСумма / 100 * ПроцентЦены;
				КонецЕсли;
				
				УслугаОбъект.Цена = УстанавливаемаяЦена;
				УслугаОбъект.СуммаНДС = ВычислитьСуммуНДС(УслугаОбъект.Цена, УслугаОбъект.СтавкаНДС);
				УслугаОбъект.Сумма = УстанавливаемаяЦена;//РасчетнаяСумма / 100 * ПроцентСуммы;
					
				УслугаОбъект.ЦенаКлиента = УстанавливаемаяЦена;//РасчетнаяСумма / 100 * ПроцентЦены;
				УслугаОбъект.СуммаНДСКлиента = ВычислитьСуммуНДС(УслугаОбъект.ЦенаКлиента, УслугаОбъект.СтавкаНДСКлиента);
				УслугаОбъект.СуммаКлиента = УстанавливаемаяЦена;//РасчетнаяСумма / 100 * ПроцентСуммы;
			КонецЕсли;
			
		КонецЕсли;	
		
		УправлениеБТСервер.ЗаполнитьХарактеристики(УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги);
		УслугаОбъект.Командируемые.Загрузить(УслугаВладелец.Командируемые.Выгрузить());
		
		Параметры = Новый Структура("УслугаОбъект, УслугаВладелец", УслугаОбъект, УслугаВладелец);
		РезультатСобытия = ВнешниеСобытия(СтрокаСвязи.УсловиеСвязи, Перечисления.СобытияБТ.ПриСозданииУслуги, Параметры);		
		Если НЕ РезультатСобытия.Отказ Тогда
			ОписаниеУслуги = ПолучитьОписание(УслугаОбъект, УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги, УслугаОбъект.ЭкстраПоля);
			УслугаОбъект.ПолноеНаименованиеУслуги = ОписаниеУслуги;
			УслугаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЕсли;

	Услуга = УслугаОбъект.Ссылка;
	
	Возврат Услуга;
КонецФункции


Функция ПолучитьАктуальныйДокумент(Партнер, Контрагент, Договор, АктуальнаяДата, ОтношениеУчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("АктуальнаяДата", АктуальнаяДата);
	Запрос.УстановитьПараметр("ОтношениеУчета", ОтношениеУчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	10 КАК Приоритет,
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Регистратор КАК Регистратор
	               |ПОМЕСТИТЬ СписокВсехНастроек
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументСвязанныхНоменклатурБТ.СрезПоследних(&АктуальнаяДата, ) КАК АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Договор = &Договор
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Контрагент = &Контрагент
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.ОтношениеУчета = &ОтношениеУчета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	20,
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументСвязанныхНоменклатурБТ.СрезПоследних(&АктуальнаяДата, ) КАК АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Контрагент = &Контрагент
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.ОтношениеУчета = &ОтношениеУчета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	30,
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументСвязанныхНоменклатурБТ.СрезПоследних(&АктуальнаяДата, ) КАК АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Партнер = &Партнер
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.ОтношениеУчета = &ОтношениеУчета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	40,
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.АктуальныйДокументСвязанныхНоменклатурБТ.СрезПоследних(&АктуальнаяДата, ) КАК АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних
	               |ГДЕ
	               |	АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И АктуальныйДокументСвязанныхНоменклатурБТСрезПоследних.ОтношениеУчета = &ОтношениеУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(СписокВсехНастроек.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ МаксимальныйПриоритет
	               |ИЗ
	               |	СписокВсехНастроек КАК СписокВсехНастроек
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокВсехНастроек.Приоритет КАК Приоритет,
	               |	СписокВсехНастроек.Регистратор КАК Регистратор
	               |ИЗ
	               |	СписокВсехНастроек КАК СписокВсехНастроек
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПриоритет КАК МаксимальныйПриоритет
	               |		ПО СписокВсехНастроек.Приоритет = МаксимальныйПриоритет.Приоритет";
	ВыгрузкаСвязанныхНоменклатур = Запрос.Выполнить().Выгрузить();
	
	
	Возврат ВыгрузкаСвязанныхНоменклатур;
	
КонецФункции


Функция ПолучитьЗначениеСвязи(Объект, Связь)
	
	Состояние = Ложь;
	Если ЗначениеЗаполнено(Связь.УсловиеСвязи.СложноеУсловие) Тогда
		Параметры = Новый Структура("Объект, Связь", Объект, Связь); 
		Расшифровка = ВыполнитьПростуюФункцию(Связь.УсловиеСвязи.СложноеУсловие, Параметры); 
		
	ИначеЕсли ЗначениеЗаполнено(Связь.УсловиеСвязи.Условие) Тогда
		
		Условие = "";
		Расшифровка = Неопределено;
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(Связь.УсловиеСвязи.Условие);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
		
		ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		Состояние = ПодходящееУсловие(Объект, "", ДЗ, Условие, Расшифровка);
		
	КонецЕсли;
	
	Возврат Новый Структура("Состояние, Расшифровка", Состояние, Расшифровка);	
	
КонецФункции	

Функция СоздатьСвязанныеНоменклатуры(Объект, ТаблицаУслугИНоменклатур) Экспорт
	
	
	Партнер = Объект.Партнер;
	Выполнять = Истина;
	Пока Выполнять Цикл
		ОтношениеУчета = Перечисления.ОтношениеУчетаСвязанныхНоменклатур.СервисныеСборы;
		ВыгрузкаСвязанныхНоменклатур = ПолучитьАктуальныйДокумент(Партнер, Объект.Контрагент, Объект.Договор, Объект.Дата, ОтношениеУчета);
		Если ВыгрузкаСвязанныхНоменклатур.Количество() > 0 Тогда
			Партнер = Справочники.Партнеры.ПустаяСсылка();
		Иначе
			Партнер = Партнер.Родитель;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Выполнять = Ложь;
		КонецЕсли;
	КонецЦикла;	
	ДокументСсылкаСС = ВыгрузкаСвязанныхНоменклатур.ВыгрузитьКолонку("Регистратор");
		
	Партнер = Объект.Партнер;
	Выполнять = Истина;
	Пока Выполнять Цикл
		ОтношениеУчета = Перечисления.ОтношениеУчетаСвязанныхНоменклатур.УчетнаяПолитика;
		ВыгрузкаСвязанныхНоменклатур = ПолучитьАктуальныйДокумент(Партнер, Объект.Контрагент, Объект.Договор, Объект.Дата, ОтношениеУчета);
		Если ВыгрузкаСвязанныхНоменклатур.Количество() > 0 Тогда
			Партнер = Справочники.Партнеры.ПустаяСсылка();
		Иначе
			Партнер = Партнер.Родитель;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Выполнять = Ложь;
		КонецЕсли;
	КонецЦикла;	
	ДокументСсылкаУП = ВыгрузкаСвязанныхНоменклатур.ВыгрузитьКолонку("Регистратор");
	
	ДокументСсылка = Новый Массив;
	Для Каждого ДокументСС ИЗ ДокументСсылкаСС Цикл
		ДокументСсылка.Добавить(ДокументСС);
	КонецЦикла;
	Для Каждого ДокументУП ИЗ ДокументСсылкаУП Цикл
		ДокументСсылка.Добавить(ДокументУП);
	КонецЦикла;

	
	
	Номенклатуры = ТаблицаУслугИНоменклатур.ВыгрузитьКолонку("Номенклатура");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("Номенклатуры", Номенклатуры);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеНоменклатуры.НоменклатураБТ КАК НоменклатураБТ,
	               |	СвязанныеНоменклатуры.НоменклатураПриемник КАК НоменклатураПриемник,
	               |	СвязанныеНоменклатуры.УсловиеСвязи КАК УсловиеСвязи,
	               |	СвязанныеНоменклатуры.ФиксированнаяСумма КАК ФиксированнаяСумма,
	               |	СвязанныеНоменклатуры.Цена КАК Цена,
	               |	СвязанныеНоменклатуры.СтавкаНДС КАК СтавкаНДС,
	               |	СвязанныеНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	СвязанныеНоменклатуры.Сумма КАК Сумма,
	               |	СвязанныеНоменклатуры.СворачиватьНаУслугуВладельца КАК СворачиватьНаУслугуВладельца,
	               |	СвязанныеНоменклатуры.ОтношениеУчетаСвязанныхНоменклатур КАК ОтношениеУчетаСвязанныхНоменклатур,
	               |	СвязанныеНоменклатуры.ПрименяетсяК КАК ПрименяетсяК,
	               |	СвязанныеНоменклатуры.Регистратор КАК Регистратор,
	               |	СвязанныеНоменклатуры.РеквизитУстановкиЦены КАК РеквизитУстановкиЦены,
	               |	СвязанныеНоменклатуры.НеМенееЧем КАК НеМенееЧем,
	               |	СвязанныеНоменклатуры.НеБолееЧем КАК НеБолееЧем,
	               |	СвязанныеНоменклатуры.Обработчик КАК Обработчик,
	               |	СвязанныеНоменклатуры.ШаблонСвязаннойУслуги КАК ШаблонСвязаннойУслуги
	               |ИЗ
	               |	РегистрСведений.СвязанныеНоменклатуры КАК СвязанныеНоменклатуры
	               |ГДЕ
	               |	СвязанныеНоменклатуры.Регистратор В (&Регистратор)
	               |	И СвязанныеНоменклатуры.НоменклатураБТ В (&Номенклатуры)";
	ВыгрузкаСвязанныхНоменклатур = Запрос.Выполнить().Выгрузить();	
	
	
	СписокУслуг = Новый ТаблицаЗначений;
	СписокУслуг.Колонки.Добавить("Услуга");
	СписокУслуг.Колонки.Добавить("Номенклатура");
	СписокУслуг.Колонки.Добавить("Цена");
	СписокУслуг.Колонки.Добавить("УслугаВладелец");
	СписокУслуг.Колонки.Добавить("СворачиватьНаУслугуВладельца");
	
	Если ВыгрузкаСвязанныхНоменклатур.Количество() > 0 Тогда
		
		ОшибкиПользователя = Новый Массив;
		Для Каждого Связь ИЗ ВыгрузкаСвязанныхНоменклатур Цикл
			
			ПрименяетсяК = Новый Массив;
			РасшифровкаПрименяетсяК = Неопределено;
							
			Если ТипЗнч(Связь.ПрименяетсяК) <> Тип("СправочникСсылка.ФункцииОписания") И ЗначениеЗаполнено(Связь.ПрименяетсяК.Условие) Тогда
				
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(Связь.ПрименяетсяК.Условие);
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
				ОбъектXDTO.Проверить();
				
				Условие = "";
				Расшифровка = Неопределено;
				ДЗПрименяетсяК = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				ПодходящееУсловияПриминенияК(Объект, "", ДЗПрименяетсяК, Условие, ПрименяетсяК);
			ИначеЕсли ТипЗнч(Связь.ПрименяетсяК) = Тип("СправочникСсылка.ФункцииОписания") Тогда
				//ФУНКЦИЯ
				ПараметрыФункции = Новый Структура("Объект, Связь", Объект, Связь);
				ПрименяетсяК = ВыполнитьПростуюФункцию(Связь.ПрименяетсяК, ПараметрыФункции);
			КонецЕсли;
			
			
			Если ЗначениеЗаполнено(Связь.УсловиеСвязи.СложноеУсловие) Тогда
				Параметры = Новый Структура("Объект, Связь", Объект, Связь); 
				Расшифровка = ВыполнитьПростуюФункцию(Связь.УсловиеСвязи.СложноеУсловие, Параметры); 
				
				Если Расшифровка <> Неопределено Тогда
					Для Каждого СтрокаДляОбработки ИЗ Расшифровка Цикл
						Параметры = Новый Структура("Командировка, УслугаВладелец", Объект, СтрокаДляОбработки.Услуга);									
						РезультатСобытия = ВнешниеСобытия(Связь.УсловиеСвязи, Перечисления.СобытияБТ.ПередСозданиемУслуги, Параметры);
						Если НЕ РезультатСобытия.Отказ Тогда
							НоваяУслуга = УправлениеБТСервер.НайтиСоздатьУслугу(СтрокаДляОбработки.Услуга, Связь);
							СтрокаСУслугой = СписокУслуг.Добавить();
							СтрокаСУслугой.Услуга = НоваяУслуга;
							СтрокаСУслугой.Номенклатура = НоваяУслуга.НоменклатураБТ;							
							СтрокаСУслугой.Цена = НоваяУслуга.Сумма;
							
							СтрокаСУслугой.УслугаВладелец = СтрокаДляОбработки.Услуга;
							СтрокаСУслугой.СворачиватьНаУслугуВладельца = Связь.СворачиватьНаУслугуВладельца;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(Связь.УсловиеСвязи.Условие) Тогда
				
				Условие = "";
				Расшифровка = Неопределено;
				
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(Связь.УсловиеСвязи.Условие);
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
				ОбъектXDTO.Проверить();
				
				ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				Состояние = ПодходящееУсловие(Объект, "", ДЗ, Условие, Расшифровка);
				
				Если НЕ Состояние Тогда
					Для Каждого СтрокаДляОбработки ИЗ Расшифровка Цикл
						Если СтрокаДляОбработки.Услуга.НоменклатураБТ = Связь.НоменклатураБТ Тогда
							
							Параметры = Новый Структура("Командировка, УслугаВладелец", Объект, СтрокаДляОбработки.Услуга);									
							РезультатСобытия = ВнешниеСобытия(Связь.УсловиеСвязи, Перечисления.СобытияБТ.ПередСозданиемУслуги, Параметры);
							Если НЕ РезультатСобытия.Отказ Тогда
								
								УслугаВложеннаяВ = Неопределено;
								Если Связь.СворачиватьНаУслугуВладельца Тогда
									УслугаВложеннаяВ = СтрокаДляОбработки.Услуга
								КонецЕсли;
								
								ЗагруженнаяУслуга = УправлениеБТСервер.НайтиЗагруженнуюУслугу(СтрокаДляОбработки.Услуга, Связь, УслугаВложеннаяВ, ПрименяетсяК);

								Если ЗагруженнаяУслуга = Документы.Услуга.ПустаяСсылка() Тогда
									
									СуммаПримененияК = 0;
									Для Каждого КлючЗначениеПрименения ИЗ ПрименяетсяК Цикл
										Если ТипЗнч(КлючЗначениеПрименения.Значение) = Тип("Число") Тогда
											СуммаПримененияК = СуммаПримененияК + КлючЗначениеПрименения.Значение;
										КонецЕсли;
									КонецЦикла;
									
									Если Связь.Цена <> 0 ИЛИ СуммаПримененияК <> 0 Тогда
										НоваяУслуга = УправлениеБТСервер.НайтиСоздатьУслугу(СтрокаДляОбработки.Услуга, Связь, УслугаВложеннаяВ, ПрименяетсяК, СуммаПримененияК);
										
										СтрокаСУслугой = СписокУслуг.Добавить();
										СтрокаСУслугой.Услуга = НоваяУслуга;
										СтрокаСУслугой.Номенклатура = НоваяУслуга.НоменклатураБТ;							
										СтрокаСУслугой.Цена = НоваяУслуга.Сумма;
										
										СтрокаСУслугой.УслугаВладелец = СтрокаДляОбработки.Услуга;
										СтрокаСУслугой.СворачиватьНаУслугуВладельца = Связь.СворачиватьНаУслугуВладельца;
									КонецЕсли;		
								КонецЕсли;

							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	
	КонецЕсли;	
	
	
	Возврат СписокУслуг;
	
КонецФункции

Процедура ЗаполнитьОписаниеНаСервере(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказИзКорзины",Объект.ЗаказИзКорзины);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УслугиДляЗаказовИзКорзины.Услуга
	               |ПОМЕСТИТЬ УслугиКорзины
	               |ИЗ
	               |	РегистрСведений.УслугиДляЗаказовИзКорзины КАК УслугиДляЗаказовИзКорзины
	               |ГДЕ
	               |	УслугиДляЗаказовИзКорзины.ЗаказИзКорзины = &ЗаказИзКорзины
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	УслугиДляЗаказовИзКорзины.Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвязанныеУслуги.ВложеннаяУслуга,
	               |	СвязанныеУслуги.УслугаРодитель
	               |ПОМЕСТИТЬ УслугиСвязанные
	               |ИЗ
	               |	УслугиКорзины КАК УслугиКорзины
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	               |		ПО УслугиКорзины.Услуга = СвязанныеУслуги.УслугаРодитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СвязанныеУслуги.ВложеннаяУслуга,
	               |	СвязанныеУслуги.УслугаРодитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УслугиКорзины.Услуга,
	               |	УслугиКорзины.Услуга.ВложеноВ,
	               |	NULL КАК УслугаРодитель
	               |ПОМЕСТИТЬ Услуги
	               |ИЗ
	               |	УслугиКорзины КАК УслугиКорзины
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УслугиСвязанные.ВложеннаяУслуга,
	               |	УслугиСвязанные.ВложеннаяУслуга.ВложеноВ,
	               |	УслугиСвязанные.УслугаРодитель
	               |ИЗ
	               |	УслугиСвязанные КАК УслугиСвязанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УникальныеИдентификаторы.GUID КАК ГУИД,
	               |	УникальныеИдентификаторы_ВложеноВ.GUID КАК ВключеноВ,
	               |	Услуги.Услуга.НоменклатураБТ КАК Номенклатура,
	               |	Услуги.Услуга,
	               |	Услуги.Услуга.ПолноеНаименованиеУслуги КАК ОписаниеУслуги,
	               |	Услуги.Услуга.СуммаКлиента КАК Цена,
	               |	0 КАК ЦенаВложенныхУслуг,
	               |	Услуги.Услуга.СуммаКлиента КАК СуммаИтого,
	               |	ЛОЖЬ КАК Отменено
	               |ИЗ
	               |	Услуги КАК Услуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УникальныеИдентификаторы КАК УникальныеИдентификаторы
	               |		ПО Услуги.Услуга = УникальныеИдентификаторы.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УникальныеИдентификаторы КАК УникальныеИдентификаторы_ВложеноВ
	               |		ПО Услуги.УслугаРодитель = УникальныеИдентификаторы_ВложеноВ.Объект
	               |ГДЕ
	               |	НЕ Услуги.Услуга ЕСТЬ NULL";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Объект.УслугиДляКлиента.Загрузить(Выгрузка);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеНаСервереПоУслуге(Объект, Услуга) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Услуга);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Услуга.Ссылка КАК Услуга
	               |ПОМЕСТИТЬ УслугиКорзины
	               |ИЗ
	               |	Документ.Услуга КАК Услуга
	               |ГДЕ
	               |	Услуга.Ссылка В(&Ссылки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Услуга.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвязанныеУслуги.ВложеннаяУслуга
	               |ПОМЕСТИТЬ УслугиСвязанные
	               |ИЗ
	               |	УслугиКорзины КАК УслугиКорзины
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	               |		ПО УслугиКорзины.Услуга = СвязанныеУслуги.УслугаРодитель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СвязанныеУслуги.ВложеннаяУслуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УслугиКорзины.Услуга,
	               |	NULL КАК ВложеннаяУслугаУслугаВладелец
	               |ПОМЕСТИТЬ Услуги
	               |ИЗ
	               |	УслугиКорзины КАК УслугиКорзины
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УслугиСвязанные.ВложеннаяУслуга,
	               |	УслугиСвязанные.ВложеннаяУслуга.УслугаВладелец
	               |ИЗ
	               |	УслугиСвязанные КАК УслугиСвязанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УникальныеИдентификаторы.GUID КАК ГУИД,
	               |	УникальныеИдентификаторыВложеноВ.GUID КАК ВключеноВ,
	               |	Услуги.Услуга.НоменклатураБТ КАК Номенклатура,
	               |	Услуги.Услуга,
	               |	Услуги.Услуга.ПолноеНаименованиеУслуги КАК ОписаниеУслуги,
	               |	Услуги.Услуга.СуммаКлиента КАК Цена,
	               |	0 КАК ЦенаВложенныхУслуг,
	               |	Услуги.Услуга.СуммаКлиента КАК СуммаИтого,
	               |	ЛОЖЬ КАК Отменено
	               |ИЗ
	               |	Услуги КАК Услуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УникальныеИдентификаторы КАК УникальныеИдентификаторы
	               |		ПО Услуги.Услуга = УникальныеИдентификаторы.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УникальныеИдентификаторы КАК УникальныеИдентификаторыВложеноВ
	               |		ПО Услуги.ВложеннаяУслугаУслугаВладелец = УникальныеИдентификаторыВложеноВ.Объект
	               |ГДЕ
	               |	НЕ Услуги.Услуга ЕСТЬ NULL";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
		
		Если Объект.УслугиДляКлиента.Найти(СтрокаВыгрузки.Услуга, "Услуга" ) = Неопределено Тогда
			НоваяСтрока = Объект.УслугиДляКлиента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыгрузки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеУслугиНаСервере(Объект) Экспорт
	
	Если Объект.Ссылка <> Документы.Услуга.ПустаяСсылка() Тогда
		//Удалить все вложенные услуги
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Услуга.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.Услуга КАК Услуга
		               |ГДЕ
		               |	Услуга.ПометкаУдаления = ЛОЖЬ
		               |	И Услуга.УслугаВладелец = &УслугаВладелец
		               |	И Услуга.ТипДочернейУслуги = ЗНАЧЕНИЕ(Перечисление.ТипДочернейУслуги.Автоматическая)
		               |	И Услуга.НоменклатураБТ.КомиссионнаяУслуга = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Ссылка";
		Запрос.УстановитьПараметр("УслугаВладелец", Объект.Ссылка);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
			ОбъектУслуги = СтрокаВыгрузки.Ссылка.ПолучитьОбъект(); //Документы.Услуга.СоздатьДокумент();//
			ОбъектУслуги.ВложеноВ = Документы.Услуга.ПустаяСсылка();
			ОбъектУслуги.ПометкаУдаления = Истина;
			ОбъектУслуги.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЕсли;	
	
	
	ЭкстраПоля = Объект.ЭкстраПоля.Выгрузить();			
	
	ТаблицаСУслугами = Новый ТаблицаЗначений;
	ТаблицаСУслугами.Колонки.Добавить("Услуга");
	ТаблицаСУслугами.Колонки.Добавить("Номенклатура");
	ТаблицаСУслугами.Колонки.Добавить("Цена");	
	
	СтрокаСУслугой = ТаблицаСУслугами.Добавить();
	СтрокаСУслугой.Услуга = Объект.Ссылка;
	СтрокаСУслугой.Номенклатура = Объект.НоменклатураБТ;
	СтрокаСУслугой.Цена = Объект.Сумма;
	
	СтрокиПоКоторымНужноСоздатьСкидкиНаценки = Новый Массив;
	Для Каждого СтрокаСУслугой ИЗ ТаблицаСУслугами Цикл
		Характеристики = СтрокаСУслугой.Услуга.ОписаниеУслуги.Выгрузить();
 		ОписаниеУслуги = УправлениеБТСервер.ПолучитьОписание(Объект, СтрокаСУслугой.Услуга, Характеристики, ЭкстраПоля);		
		УстановитьОписаниеУслуги(СтрокаСУслугой.Услуга, ОписаниеУслуги);
		
		НайденнаяСтрока = Характеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.СуммаУслуги, "Характеристика");		
		Если ЗначениеЗаполнено(НайденнаяСтрока) И НайденнаяСтрока.Значение = 0 Тогда 
			НайденнаяСтрока = Неопределено;
		КонецЕсли;
		
		СуммаКлиента = Объект.Сумма;
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Значение <> Неопределено Тогда
			СуммаКлиента = НайденнаяСтрока.Значение; 
			
			НоваяСтрока = Новый Структура("ЦенаВложенныхУслуг, Услуга, ГУИД", СуммаКлиента - Объект.Сумма, СтрокаСУслугой.Услуга, Новый УникальныйИдентификатор);
			СтрокиПоКоторымНужноСоздатьСкидкиНаценки.Добавить(НоваяСтрока); 
		КонецЕсли; 
		
		Объект.ЦенаКлиента = СуммаКлиента / ?(ЗначениеЗаполнено(Объект.КоличествоКлиента), Объект.КоличествоКлиента, 1);   
		Объект.СуммаКлиента = СуммаКлиента;
		
		ПереноситьСтавкуНДСКлиентаВУслугиПриФормированииСвязанныхУслуг = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ПереноситьСтавкуНДСКлиентаВУслугиПриФормированииСвязанныхУслуг);
		Если ПереноситьСтавкуНДСКлиентаВУслугиПриФормированииСвязанныхУслуг = Истина Тогда 
			Объект.СтавкаНДСКлиента = Объект.СтавкаНДС;
		КонецЕсли;
		
	КонецЦикла;
		
	//Создадим связанные номенклатуры, если они нужны
	ТаблицаДляНоменклатур = ТаблицаСУслугами;
	ТаблицаДляНоменклатур.Свернуть("Услуга, Номенклатура");
	ТаблицаСвязанныхУслуг = УправлениеБТСервер.СоздатьСвязанныеНоменклатуры(Объект, ТаблицаДляНоменклатур);//СоздатьСвязанныеНоменклатуры(ТаблицаДляНоменклатур);
	
	
	ФормироватьСвязанныеУслугиНаКомиссии = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ФормироватьСвязанныеУслугиНаКомиссии);
	Если ФормироватьСвязанныеУслугиНаКомиссии = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КомиссииАгентств.ВложеннаяУслуга КАК Услуга,
		               |	КомиссииАгентств.ВложеннаяУслуга.НоменклатураБТ КАК Номенклатура,
		               |	КомиссииАгентств.ВложеннаяУслуга.Цена КАК Цена
		               |ИЗ
		               |	РегистрСведений.КомиссииАгентств КАК КомиссииАгентств
		               |ГДЕ
		               |	КомиссииАгентств.УслугаРодитель = &УслугаРодитель";
		Запрос.УстановитьПараметр("УслугаРодитель", Объект.Ссылка);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Выгрузка.Количество() > 0 Тогда
			Комиссия = Выгрузка[0].Услуга;
			ТаблицаДляНоменклатур = Выгрузка;
			ТаблицаДляНоменклатур.Свернуть("Услуга, Номенклатура");
			ТаблицаСвязанныхУслуг = УправлениеБТСервер.СоздатьСвязанныеНоменклатуры(Комиссия, ТаблицаДляНоменклатур);//СоздатьСвязанныеНоменклатуры(ТаблицаДляНоменклатур);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

Функция ВычислитьСуммуСНДС(СуммаНДС, Ставка) Экспорт
	
	СуммуСНДС = 0;
	Если ТипЗнч(Ставка) = Тип("СправочникСсылка.СтавкиНДСБТ") Тогда
		//Ставка = Справочники.СтавкиНДСБТ.ПустаяСсылка();
		Если Ставка.СуммаВключаетНДС Тогда 
			СуммуСНДС = СуммаНДС / Ставка.СтавкаНДСЧислом * 100;
		Иначе
			СуммуСНДС = СуммаНДС / Ставка.СтавкаНДСЧислом * (100+Ставка.СтавкаНДСЧислом);
		КонецЕсли;
	Иначе
		//Обратная совместимость
		Если Ставка = Перечисления.СтавкиНДС.НДС18 Тогда
			СуммуСНДС = СуммаНДС / 18 * 100;	
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10 Тогда
			СуммуСНДС = СуммаНДС / 10 * 100;
			
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СуммуСНДС = СуммаНДС / 18 * 118;	
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10_110 Тогда
			СуммуСНДС = СуммаНДС / 10 * 110;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат СуммуСНДС;
	
КонецФункции

Функция ВычислитьСуммуНДС(Сумма, Ставка) Экспорт
	
	СтавкаНДС = 0;
	Если ТипЗнч(Ставка) = Тип("СправочникСсылка.СтавкиНДСБТ") Тогда
		Если Ставка.СуммаВключаетНДС Тогда 
			СтавкаНДС = Сумма / (100 + Ставка.СтавкаНДСЧислом) * Ставка.СтавкаНДСЧислом;
		Иначе
			СтавкаНДС = Сумма / (100) * Ставка.СтавкаНДСЧислом;
		КонецЕсли;
		
	Иначе
		Если Ставка = Перечисления.СтавкиНДС.НДС18 Тогда
			СтавкаНДС = Сумма / 100 * 18;	
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС20 Тогда
			СтавкаНДС = Сумма / 100 * 10;
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10 Тогда
			СтавкаНДС = Сумма / 100 * 10;
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС10_110 Тогда
			СтавкаНДС = Сумма / 110 * 10;
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СтавкаНДС = Сумма / 118 * 18;
		ИначеЕсли Ставка = Перечисления.СтавкиНДС.НДС20_120 Тогда
			СтавкаНДС = Сумма / 120 * 20;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтавкаНДС;
	
КонецФункции

Функция СоздатьСкидкиНаценки(Объект, СтрокиПоКоторымНужноСоздатьСкидкиНаценки) Экспорт
	
	СписокУслуг = Новый ТаблицаЗначений;
	СписокУслуг.Колонки.Добавить("ГУИДВладелец");
	СписокУслуг.Колонки.Добавить("Услуга");
	СписокУслуг.Колонки.Добавить("Номенклатура");
	СписокУслуг.Колонки.Добавить("Цена");
	

	Для Каждого СтрокаМассива ИЗ СтрокиПоКоторымНужноСоздатьСкидкиНаценки Цикл
		//
		СтрокаСвязи = Новый Структура("НоменклатураБТ, НоменклатураПриемник, УсловиеСвязи, ФиксированнаяСумма, Цена, СтавкаНДС, СуммаНДС, Сумма"); 
		Если СтрокаМассива.ЦенаВложенныхУслуг < 0 Тогда
			СтрокаСвязи.НоменклатураПриемник = Справочники.НоменклатураБТ.Скидка;			
		Иначе
			СтрокаСвязи.НоменклатураПриемник = Справочники.НоменклатураБТ.Наценка;
		КонецЕсли;
		СтрокаСвязи.ФиксированнаяСумма = Истина;		
		СтрокаСвязи.Цена = СтрокаМассива.ЦенаВложенныхУслуг;
		СтрокаСвязи.СтавкаНДС = СтрокаМассива.Услуга.СтавкаНДС;
		СтрокаСвязи.СуммаНДС = ВычислитьСуммуНДС(СтрокаСвязи.Цена, СтрокаМассива.Услуга.СтавкаНДС);
		СтрокаСвязи.Сумма = СтрокаСвязи.Цена;
		
		НоваяУслуга = УправлениеБТСервер.НайтиСоздатьУслугу(СтрокаМассива.Услуга, СтрокаСвязи, СтрокаМассива.Услуга);
		
		СтрокаСУслугой = СписокУслуг.Добавить();
		СтрокаСУслугой.Услуга = НоваяУслуга;
		СтрокаСУслугой.Номенклатура = НоваяУслуга.НоменклатураБТ;
		СтрокаСУслугой.Цена = НоваяУслуга.Сумма;
		СтрокаСУслугой.ГУИДВладелец = СтрокаМассива.ГУИД;
	КонецЦикла;
	
	Возврат СписокУслуг;
	
КонецФункции


Функция ВыполнитьВыгрузкуОбъектаСервер(СсылкаНаНастройку, ВхПараметры) Экспорт
	
	ИсхРезультат = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = СсылкаНаНастройку.ЗапросВыгрузки;
	Для Каждого ЭлементСтруктуры ИЗ ВхПараметры Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);	
	КонецЦикла;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
		ПараметрыЗапроса = Новый Структура;
		Для Каждого Колонка ИЗ Выгрузка.Колонки Цикл
			ПараметрыЗапроса.Вставить(Колонка.Имя, СтрокаВыгрузки[Колонка.Имя]);
		КонецЦикла;	
		
		ИсхРезультат = СформироватьВыгрузкуОбъекта(СсылкаНаНастройку, ВхПараметры, ПараметрыЗапроса);
	КонецЦикла;	
	
	Возврат ИсхРезультат;
КонецФункции

Функция СформироватьВыгрузкуОбъекта(СсылкаНаНастройку, ВхПараметрыЗапроса, ВхПараметры) Экспорт
	
	ИсхРезультат = Новый Массив;
	Если ТипЗнч(ВхПараметры) = Тип("Массив") Тогда  
		ВхПараметрыОписания = ВхПараметры;
	Иначе
		ВхПараметрыОписания = Новый Массив;
		ВхПараметрыОписания.Добавить(ВхПараметры);
	КонецЕсли;
	
	Для Каждого ПараметрыОписания ИЗ ВхПараметрыОписания Цикл
		Результат = Неопределено;
		ШаблонТекста = СсылкаНаНастройку.ШаблонВыгрузки;
		
		КоличествоФункций = СтрЧислоВхождений(ШаблонТекста,"f[");
		
		МассивФункций = Новый Структура; 
		ШаблонТекста2 = ШаблонТекста;
		ШаблонПоиска = ШаблонТекста;
		Для Индекс = 1 ПО КоличествоФункций Цикл
			ИндексНачалаФункции = СтрНайти(ШаблонТекста,"f[",,,Индекс);
			ШаблонПоиска = Сред(ШаблонТекста, ИндексНачалаФункции+2, СтрДлина(ШаблонТекста));
			ИндексКонцаФункции = СтрНайти(ШаблонПоиска,"]");
			ВызовФункции = Сред(ШаблонТекста, ИндексНачалаФункции+2, ИндексКонцаФункции-1);
			//
			Если СтрЧислоВхождений(ВызовФункции,"(")>0 Тогда
				ИмяФункции = Лев(ВызовФункции,СтрНайти(ВызовФункции,"(")-1);
			Иначе
				ИмяФункции = ВызовФункции;
			КонецЕсли;
			
			Если МассивФункций.Свойство(ИмяФункции) Тогда
				ИндексИмени = 1;
				Пока МассивФункций.Свойство(ИмяФункции+Строка(ИндексИмени)) Цикл
					ИндексИмени = ИндексИмени + 1;
				КонецЦикла;
				ИмяФункции = ИмяФункции+Строка(ИндексИмени);
			КонецЕсли;
			
			МассивФункций.Вставить(ИмяФункции, ВызовФункции);		
			ШаблонТекста2 = СтрЗаменить(ШаблонТекста2, "f["+ВызовФункции+"]", "["+ИмяФункции+"]"); 
		КонецЦикла;
		
		ТабДок = Новый ТекстовыйДокумент;	
		ТабДок.УстановитьТекст(ШаблонТекста2);
			
		СписокРезультатовФунк = Новый Структура();
		Для Каждого ВнешняяФункция ИЗ МассивФункций Цикл
			СсылкаНаФункцию = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", ВнешняяФункция.Ключ);
			Результат = ВыполнитьПростуюФункцию(СсылкаНаФункцию, ПараметрыОписания);
			СписокРезультатовФунк.Вставить(ВнешняяФункция.Ключ, Результат);
		КонецЦикла;
		
		ТабДок.Параметры.Заполнить(СписокРезультатовФунк);	
		Результат = ТабДок.ПолучитьТекст();
		
		Для Каждого ПараметрДок ИЗ ВхПараметры Цикл
			Результат = СтрЗаменить(Результат, "["+НРег(ПараметрДок.Ключ)+"]", ПараметрДок.Значение); 
		КонецЦикла;
		
		Для Каждого ПараметрДок ИЗ СписокРезультатовФунк Цикл
			Результат = СтрЗаменить(Результат, "["+НРег(ПараметрДок.Ключ)+"]", ПараметрДок.Значение); 
		КонецЦикла;
		
		ИсхРезультат.Добавить(Результат);
	КонецЦикла;	
		
	Возврат ИсхРезультат;
	
КонецФункции



Функция ИсторияАвтозаполнения(Характеристика, Слово) Экспорт
	
	СловоИНГ = УправлениеБТВызовСервера.СменитьРаскладкуRUEN(Слово);
	СловоРУС = УправлениеБТВызовСервера.СменитьРаскладкуENRU(Слово);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтозаполнениеХарактеристик.Характеристика,
	               |	ВЫРАЗИТЬ(АвтозаполнениеХарактеристик.Значение КАК СТРОКА(550)) КАК ЗначениеСтрокой
	               |ПОМЕСТИТЬ ВсеЗначения
	               |ИЗ
	               |	РегистрСведений.АвтозаполнениеХарактеристик КАК АвтозаполнениеХарактеристик
	               |ГДЕ
	               |	АвтозаполнениеХарактеристик.Характеристика = &Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ВсеЗначения.Характеристика,
	               |	ВсеЗначения.ЗначениеСтрокой КАК Значение
	               |ПОМЕСТИТЬ ВсеСлова
	               |ИЗ
	               |	ВсеЗначения КАК ВсеЗначения
	               |ГДЕ
	               |	ВсеЗначения.ЗначениеСтрокой ПОДОБНО &ЗначениеСтрокой
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ВсеЗначения.Характеристика,
	               |	ВсеЗначения.ЗначениеСтрокой
	               |ИЗ
	               |	ВсеЗначения КАК ВсеЗначения
	               |ГДЕ
	               |	ВсеЗначения.ЗначениеСтрокой ПОДОБНО &ЗначениеСтрокойИНГ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 10
	               |	ВсеЗначения.Характеристика,
	               |	ВсеЗначения.ЗначениеСтрокой
	               |ИЗ
	               |	ВсеЗначения КАК ВсеЗначения
	               |ГДЕ
	               |	ВсеЗначения.ЗначениеСтрокой ПОДОБНО &ЗначениеСтрокойРУС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10
	               |	ВсеСлова.Характеристика,
	               |	ВсеСлова.Значение
	               |ИЗ
	               |	ВсеСлова КАК ВсеСлова
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ЗначениеСтрокой", "%"+Слово+"%");
	Запрос.УстановитьПараметр("ЗначениеСтрокойИНГ", "%"+СловоИНГ+"%");
	Запрос.УстановитьПараметр("ЗначениеСтрокойРУС", "%"+СловоРУС+"%");
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка;
КонецФункции	


Функция ВнешниеСобытия(Объект, Событие, Параметры)
	
	РезультатСобытия = Новый Структура("Результат, Отказ", Неопределено, Ложь);
	МЗ = РегистрыСведений.СобытияОбъектов.СоздатьМенеджерЗаписи();
	МЗ.ОбъектСобытия = Объект;
	МЗ.Событие = Событие;
	МЗ.Прочитать();
	Если МЗ.Выбран() Тогда
		Обработчик = МЗ.Обработчик;
		РезультатВыполнения = ВыполнитьПростуюФункцию(Обработчик, Параметры); 
		
		Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда 
			Если РезультатВыполнения.Свойство("Отказ") Тогда
				РезультатСобытия.Отказ = РезультатВыполнения.Отказ;
			КонецЕсли;
		
			Если РезультатВыполнения.Свойство("Результат") Тогда
				РезультатСобытия.Результат = РезультатВыполнения.Результат;			
			КонецЕсли;
		Иначе
			РезультатСобытия.Результат = РезультатВыполнения;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат	РезультатСобытия;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////
//				СОХРАНЕНИЕ И ВОССТАНОВЛЕНИЕ НАСТРОЕК ДИН. СПИСКАМ
//					  	https://infostart.ru/public/88010/
#Область СохранениеИВосстановлениеДинамическогоСписка


Процедура СохранитьНастройкиСписка( пФорма, пИмяСписка = "" ) Экспорт

	Настройки = Новый Соответствие;
	ПриСохраненииДанныхВНастройках( Настройки, пФорма, пИмяСписка );
	ХранилищеНастроекДанныхФорм.Сохранить( пФорма.ИмяФормы,, Настройки );

КонецПроцедуры

Процедура ВосстановитьНастройкиСписка( пФорма, пИмяСписка = "" ) Экспорт

	Настройки = ХранилищеНастроекДанныхФорм.Загрузить( пФорма.ИмяФормы );
	Если ТипЗнч( Настройки ) = Тип( "Соответствие" ) Тогда
		ПриЗагрузкеДанныхИзНастроек( Настройки, пФорма, пИмяСписка );
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриСохраненииДанныхВНастройках( Настройки , пФорма, пИмяСписка = "" ) Экспорт
	имяСписка = "Список";
	Если ЗначениеЗаполнено( пИмяСписка ) Тогда
		имяСписка = пИмяСписка;
	КонецЕсли;
	УстановитьНастройкиДинСпискаВСоответствиие( Настройки, пФорма[имяСписка], пИмяСписка );
КонецПроцедуры

Процедура УстановитьНастройкиДинСпискаВСоответствиие( пСоответствие, пСписок, пИмяСписка = "" )

префиксКлюча = ПрефиксКлючаНастроекСписка( пИмяСписка );

пСоответствие.Вставить( префиксКлюча + "Группировка" , СериализоватьГруппировки( пСписок.Группировка ) );
пСоответствие.Вставить( префиксКлюча + "Отбор" , СериализоватьОтбор( пСписок.Отбор ) );
пСоответствие.Вставить( префиксКлюча + "Порядок" , СериализоватьПорядок( пСписок.Порядок ) );
пСоответствие.Вставить( префиксКлюча + "УсловноеОформление", СериализоватьУсловноеОформление( пСписок.УсловноеОформление ) );

КонецПроцедуры

Функция ПрефиксКлючаНастроекСписка( пИмяСписка )

префиксКлюча = "";

Если ЗначениеЗаполнено( пИмяСписка ) Тогда

префиксКлюча = пИмяСписка + "_";

КонецЕсли;

Возврат префиксКлюча;

КонецФункции

Процедура ПриЗагрузкеДанныхИзНастроек( Настройки , пФорма, пИмяСписка = "" ) Экспорт

имяСписка = "Список";

Если ЗначениеЗаполнено( пИмяСписка ) Тогда

имяСписка = пИмяСписка;

КонецЕсли;

УстановитьНастройкиИзСоответствияВДинСписок( Настройки, пФорма[имяСписка], пИмяСписка );

КонецПроцедуры

Процедура УстановитьНастройкиИзСоответствияВДинСписок( пСоответствие, пСписок, пИмяСписка = "" )

префиксКлюча = ПрефиксКлючаНастроекСписка( пИмяСписка );

ДесериализоватьГруппировки( пСоответствие[ префиксКлюча + "Группировка" ] , пСписок.Группировка);
ДесериализоватьОтбор( пСоответствие[ префиксКлюча + "Отбор" ] , пСписок.Отбор);
ДесериализоватьПорядок( пСоответствие[ префиксКлюча + "Порядок" ] , пСписок.Порядок);
ДесериализоватьУсловноеОформление( пСоответствие[ префиксКлюча + "УсловноеОформление" ] , пСписок.УсловноеОформление);

КонецПроцедуры

// Группировки
Функция СериализоватьГруппировки(пГруппировки)

ЗаписьXML = Новый ЗаписьXML();
ЗаписьXML.УстановитьСтроку();
ЗаписьXML.ЗаписатьНачалоЭлемента("Группировки");
Для Каждого цЭлементГруппировки Из пГруппировки.Элементы Цикл
СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементГруппировки);
КонецЦикла;
ЗаписьXML.ЗаписатьКонецЭлемента();
Возврат ЗаписьXML.Закрыть();

КонецФункции // СериализоватьГруппировки()

Процедура ДесериализоватьГруппировки(пНастройки_Группировка, пГруппировка)

пГруппировка.Элементы.Очистить();
Если пНастройки_Группировка <> Неопределено Тогда
ЧтениеXML = Новый ЧтениеXML();
ЧтениеXML.УстановитьСтроку(пНастройки_Группировка);
ЧтениеXML.ПерейтиКСодержимому();
Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Группировки" Тогда
ЧтениеXML.Прочитать();
Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "Группировки" Цикл
ПолеГруппировкиXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
ПолеГруппировки = пГруппировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
ЗаполнитьЗначенияСвойств(ПолеГруппировки, ПолеГруппировкиXML);
КонецЦикла;
КонецЕсли;
КонецЕсли;

КонецПроцедуры // ДесериализоватьГруппировки()

// Порядок

Функция СериализоватьПорядок(пПорядок)

ЗаписьXML = Новый ЗаписьXML();
ЗаписьXML.УстановитьСтроку();
ЗаписьXML.ЗаписатьНачалоЭлемента("Порядок");
Для Каждого цЭлементПорядка Из пПорядок.Элементы Цикл
СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементПорядка);
КонецЦикла;
ЗаписьXML.ЗаписатьКонецЭлемента();
Возврат ЗаписьXML.Закрыть();

КонецФункции // СериализоватьПорядок()

Функция ДесериализоватьПорядок(пНастройки_Порядок, пПорядок)

пПорядок.Элементы.Очистить();
Если пНастройки_Порядок <> Неопределено Тогда
ЧтениеXML = Новый ЧтениеXML();
ЧтениеXML.УстановитьСтроку(пНастройки_Порядок);
ЧтениеXML.ПерейтиКСодержимому();
Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Порядок" Тогда
ЧтениеXML.Прочитать();
Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "Порядок" Цикл
ПолеПорядкаXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
ПолеПорядка = пПорядок.Элементы.Добавить(ТипЗнч(ПолеПорядкаXML));
ЗаполнитьЗначенияСвойств(ПолеПорядка, ПолеПорядкаXML);
КонецЦикла;
КонецЕсли;
КонецЕсли;

КонецФункции // ДесериализоватьПорядок()

// Отборы

Функция СериализоватьОтбор(пОтбор)

ЗаписьXML = Новый ЗаписьXML();
ЗаписьXML.УстановитьСтроку();
ЗаписьXML.ЗаписатьНачалоЭлемента("Отборы");
Для Каждого цЭлементОтбора Из пОтбор.Элементы Цикл
СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементОтбора);
КонецЦикла;
ЗаписьXML.ЗаписатьКонецЭлемента();
Возврат ЗаписьXML.Закрыть();

КонецФункции // СериализоватьОтбор()

Процедура ДесериализоватьОтбор(пНастройки_Отбор, пОтбор)

пОтбор.Элементы.Очистить();
Если пНастройки_Отбор <> Неопределено Тогда
ЧтениеXML = Новый ЧтениеXML();
ЧтениеXML.УстановитьСтроку(пНастройки_Отбор);
ЧтениеXML.ПерейтиКСодержимому();
Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Отборы" Тогда
ЧтениеXML.Прочитать();
Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "Отборы" Цикл
ПолеОтбораXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
ПолеОтбора = пОтбор.Элементы.Добавить(ТипЗнч(ПолеОтбораXML));
СкопироватьЭлементыОтбораРекурсивно(ПолеОтбораXML, ПолеОтбора);
//ПолеОтбора.Поле = ПолеОтбораXML.Поле;
КонецЦикла;
КонецЕсли;
КонецЕсли;

КонецПроцедуры // ДесериализоватьОтбор()

Процедура СкопироватьЭлементыОтбораРекурсивно(пОтборОткуда, пОтборКуда);

ЗаполнитьЗначенияСвойств(пОтборКуда, пОтборОткуда);
Если ТипЗнч(пОтборОткуда) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
Для Каждого ЭлементОтбора Из пОтборОткуда.Элементы Цикл
НовыйЭлементОтбора = пОтборКуда.Элементы.Добавить(ТипЗнч(ЭлементОтбора));
СкопироватьЭлементыОтбораРекурсивно(ЭлементОтбора, НовыйЭлементОтбора);
КонецЦикла;
КонецЕсли;

КонецПроцедуры // СкопироватьЭлементыОтбораРекурсивно()

// Условное оформление

Функция СериализоватьУсловноеОформление(пУсловноеОформление)

ЗаписьXML = Новый ЗаписьXML();
ЗаписьXML.УстановитьСтроку();
ЗаписьXML.ЗаписатьНачалоЭлемента("УсловноеОформление");
Для Каждого цЭлементУсловногоОформления Из пУсловноеОформление.Элементы Цикл
СериализаторXDTO.ЗаписатьXML(ЗаписьXML, цЭлементУсловногоОформления);
КонецЦикла;
ЗаписьXML.ЗаписатьКонецЭлемента();
Возврат ЗаписьXML.Закрыть();

КонецФункции // СериализоватьУсловноеОформление()

Функция ДесериализоватьУсловноеОформление(пНастройки_УсловноеОформление, пУсловноеОформление)

	пУсловноеОформление.Элементы.Очистить();
	Если пНастройки_УсловноеОформление <> Неопределено Тогда
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(пНастройки_УсловноеОформление);
		ЧтениеXML.ПерейтиКСодержимому();
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "УсловноеОформление" Тогда
			ЧтениеXML.Прочитать();
			Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя <> "УсловноеОформление" Цикл
				ПолеУсловногоОформленияXML = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
				ПолеУсловногоОформления = пУсловноеОформление.Элементы.Добавить();
				ЗаполнитьЗначенияСвойств(ПолеУсловногоОформления, ПолеУсловногоОформленияXML);
				Для Индекс = 0 по ПолеУсловногоОформленияXML.Оформление.ДоступныеПараметры.Элементы.Количество()-1 Цикл
					//ЗаполнитьЗначенияСвойств(ПолеУсловногоОформления.Оформление.ДоступныеПараметры.Элементы[Индекс], ПолеУсловногоОформленияXML.Оформление.ДоступныеПараметры.Элементы[Индекс]);
				КонецЦикла;
				Для Индекс = 0 по ПолеУсловногоОформленияXML.Оформление.Элементы.Количество()-1 Цикл
					ЗаполнитьЗначенияСвойств(
						ПолеУсловногоОформления.Оформление.Элементы[Индекс],
						ПолеУсловногоОформленияXML.Оформление.Элементы[Индекс]
						);
				КонецЦикла;
				Для каждого ЭлементОтбораXML ИЗ ПолеУсловногоОформленияXML.Отбор.Элементы Цикл
					ЭлементОтбора = ПолеУсловногоОформления.Отбор.Элементы.Добавить(ТипЗнч(ЭлементОтбораXML));
					СкопироватьЭлементыОтбораРекурсивно(ЭлементОтбораXML, ЭлементОтбора);
				КонецЦикла;
				Для каждого ПолеXML ИЗ ПолеУсловногоОформленияXML.Поля.Элементы Цикл
					Поле = ПолеУсловногоОформления.Поля.Элементы.Добавить();
					ЗаполнитьЗначенияСвойств(Поле, ПолеXML);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ДесериализоватьУсловноеОформление()

#КонецОбласти



Функция СоздатьФайл(СтруктураФайла)
	
	ОписаниеФайла = Новый Структура;	
	
	ОписаниеФайла.Вставить("ПутьКФайлу", ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение));
	ОписаниеФайла.Вставить("Имя", СтруктураФайла.ИмяФайла);
	ТипФайла = Неопределено;
	СтруктураФайла.Свойство("ТипФайла", ТипФайла);	
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(СтруктураФайла.Содержание);	
	ТД.Записать(ОписаниеФайла.ПутьКФайлу, ТипФайла);
		
	Возврат ОписаниеФайла;
	
КонецФункции

Функция НайтиНастойку(КлючПоиска)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючПоиска", КлючПоиска);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиВыгрузкиОбъектов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиВыгрузкиОбъектов КАК НастройкиВыгрузкиОбъектов
	               |ГДЕ
	               |	НастройкиВыгрузкиОбъектов.КлючПоиска = &КлючПоиска";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()>0 Тогда 
		Выборка.Следующий();
		Результат = Выборка.Ссылка;
	Иначе
		Результат = Справочники.НастройкиВыгрузкиОбъектов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузитьПоНастройке(НастройкаВыгрузкиОбъектов, ОбъектВыгрузки)
	
	Выгрузка = Неопределено;
	Если ЗначениеЗаполнено(НастройкаВыгрузкиОбъектов.ДополнительныйФункционал) Тогда
		ДополнительныйФункционал = НастройкаВыгрузкиОбъектов.ДополнительныйФункционал; 
		Если ЗначениеЗаполнено(ДополнительныйФункционал.ПутьКФайлуОтладки) Тогда
			ВОбработка = ВнешниеОбработки.Создать(ДополнительныйФункционал.ПутьКФайлуОтладки, Ложь);
		Иначе
			НавигационнаяССылка = ПолучитьНавигационнуюСсылку(ДополнительныйФункционал, "ВнешняяОбработка");
			ОбъектОписанияЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
			ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
			ИмяОбработки = ВнешниеОбработки.Подключить(НавигационнаяССылка,,Ложь,ОбъектОписанияЗащиты);
			ВОбработка = ВнешниеОбработки.Создать(ИмяОбработки);
		КонецЕсли;	
		Выгрузка = ВОбработка.СформироватьВыходныеДанные(ОбъектВыгрузки);
		ВнешняяОбработка = Неопределено;
		
	ИначеЕсли НастройкаВыгрузкиОбъектов.ВнешняяОбработка Тогда
		
		Имя = ПолучитьИмяВременногоФайла("epf");
		ХЗ = НастройкаВыгрузкиОбъектов.ВнешняяОбработкаВыгрузки;
		ДД = ХЗ.Получить();		
		ДД.Записать(Имя);
		ВнешняяОбработка = ВнешниеОбработки.Создать(Имя);
		Выгрузка = ВнешняяОбработка.СформироватьВыходныеДанные(ОбъектВыгрузки);
		ВнешняяОбработка = Неопределено;
		УдалитьФайлы(Имя);
	Иначе
		//Типовое формирование
		Запрос = Новый Запрос;
		Запрос.Текст = НастройкаВыгрузкиОбъектов.ЗапросВыгрузки;
		Запрос.УстановитьПараметр("ОбъектВыгрузки", ОбъектВыгрузки);
		Выборка = Запрос.Выполнить().Выгрузить();
		
		ИндексВыгрузки = 0; 
		Выгрузка = Новый Массив;
		МассивЗначений = УправлениеБТВызовСервера.ТаблицаВМассив(Выборка);
		Для Каждого СтрокаВыборки ИЗ МассивЗначений Цикл
			
			ТекстШаблона = НастройкаВыгрузкиОбъектов.ШаблонВыгрузки;
			
			ИндексВыгрузки = ИндексВыгрузки +1;
			НовыйЭлемент = Новый Структура("Расширение, ИмяФайла, ТипФайла, Содержание");
			
			//Сперва обработаем реквизиты, чтобы можно было передать их как параметры
			Для Каждого ИмяСтолбца ИЗ Выборка.Колонки Цикл
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "["+ИмяСтолбца.Имя+"]", ""+СтрокаВыборки[ИмяСтолбца.Имя]+"");
			КонецЦикла;
			
			РезультатРазбора = ПолучитьМассивПеременныхВШаблоне(ТекстШаблона);
			ТекстШаблона = РезультатРазбора.ШаблонТекста;
			
			
			//ОбработаемНастройки
			Если РезультатРазбора.Настройки.Количество() > 0 Тогда
				Для Каждого КлючЗначение ИЗ РезультатРазбора.Настройки Цикл
					
					ТекРезультата = "";
					НастройкаДочернейВыгрузкиОбъектов = НайтиНастойку(КлючЗначение.Ключ);
					Если ЗначениеЗаполнено(НастройкаДочернейВыгрузкиОбъектов) Тогда 
						РезультатВыгрузки = ВыгрузитьПоНастройке(НастройкаДочернейВыгрузкиОбъектов, ОбъектВыгрузки);
						Если ТипЗнч(РезультатВыгрузки) = Тип("Массив") Тогда
							Для Каждого РезультатЗапроса ИЗ РезультатВыгрузки Цикл
								ТекРезультата = ТекРезультата + 
												РезультатЗапроса.Содержание+
												?(РезультатВыгрузки.Найти(РезультатЗапроса) <> РезультатВыгрузки.ВГраница(), НастройкаДочернейВыгрузкиОбъектов.РазделительДочернихЭлементов, "")+
												Символы.ПС;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					ТекстШаблона = СтрЗаменить(ТекстШаблона, "["+КлючЗначение.Ключ+"]", ТекРезультата);
	
				КонецЦикла;
			КонецЕсли;
			
			//ОбработаемФункции
			Если РезультатРазбора.Функции.Количество() > 0 Тогда
				Для Каждого КлючЗначение ИЗ РезультатРазбора.Функции Цикл
					ТекРезультата = ВыполнитьПростуюФункцию(КлючЗначение.Ключ, КлючЗначение.Значение.ПараметрыФункции);
				КонецЦикла;
				
				ТекстШаблона = СтрЗаменить(ТекстШаблона, "["+КлючЗначение.Ключ+"]", ТекРезультата);
			КонецЕсли;
			
			
			
			НовыйЭлемент.Расширение = НастройкаВыгрузкиОбъектов.РасширениеИсходящегоФайла;
			НовыйЭлемент.ТипФайла = НастройкаВыгрузкиОбъектов.КодировкаФайла;
			НовыйЭлемент.ИмяФайла = НастройкаВыгрузкиОбъектов.Наименование + Строка(ИндексВыгрузки)+"."+НовыйЭлемент.Расширение;
			НовыйЭлемент.Содержание = ТекстШаблона;			
			
			Выгрузка.Добавить(НовыйЭлемент);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Выгрузка <> Неопределено Тогда
		Если ТипЗнч(НастройкаВыгрузкиОбъектов.НастройкаВыгрузки) = Тип("СправочникСсылка.ЗагрузкиВыгрузкиФайловИзДиректорий") Тогда
			МассивВыгрузки = Выгрузка;
			Если ТипЗнч(Выгрузка) = Тип("Структура") Тогда
				МассивВыгрузки = Новый Массив;
				МассивВыгрузки.Добавить(Выгрузка);
			КонецЕсли;
			Для Каждого ЭлементВыгрузки ИЗ МассивВыгрузки Цикл 
				ОписаниеФайла = СоздатьФайл(ЭлементВыгрузки);
				ВыгрузкаВКаталог(НастройкаВыгрузкиОбъектов.НастройкаВыгрузки, ОписаниеФайла);
				УдалитьФайлы(ОписаниеФайла.ПутьКФайлу);
			КонецЦикла;
		ИначеЕсли ТипЗнч(НастройкаВыгрузкиОбъектов.НастройкаВыгрузки) = Тип("СправочникСсылка.СервераШины") Тогда
			
			СерверШины = НастройкаВыгрузкиОбъектов.НастройкаВыгрузки; 
			Сервер = СерверШины.URL;
			Адрес = Выгрузка.Скрипт;
			ВхТело = Выгрузка.Значение;
			Параметры = Новый Структура("Пользователь, Пароль", СерверШины.Логин, СерверШины.Пароль);
			РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, ВхТело, Параметры);
			
			Если РезультатЗапроса.Результат = Ложь Тогда
				Если РезультатЗапроса.Свойство("ВхОбъект") Тогда
					ТекстОшибки = РезультатЗапроса.ВхОбъект;
				Иначе
					ТекстОшибки = "Неизвестная ошибка";
				КонецЕсли;
				РегистрыСведений.ИсторияОбъектов.ВставитьСообщение(ОбъектВыгрузки, ОписаниеОшибки());			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Выгрузка;
	
КонецФункции

Процедура УдалитьИЗИстории(ДатаВыгрузки, НастройкаВыгрузкиОбъектов, ОбъектВыгрузки) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаВыгрузкиОбъектов", НастройкаВыгрузкиОбъектов);
	Запрос.УстановитьПараметр("ОбъектВыгрузки", ОбъектВыгрузки);
	Запрос.УстановитьПараметр("Период", ДатаВыгрузки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмененияДляВыгрузки.Период КАК Период,
	               |	ИзмененияДляВыгрузки.НастройкаВыгрузкиОбъектов,
	               |	ИзмененияДляВыгрузки.ОбъектВыгрузки
	               |ИЗ
	               |	РегистрСведений.ИзмененияДляВыгрузки КАК ИзмененияДляВыгрузки
	               |ГДЕ
	               |	ИзмененияДляВыгрузки.НастройкаВыгрузкиОбъектов = &НастройкаВыгрузкиОбъектов
	               |	И ИзмененияДляВыгрузки.ОбъектВыгрузки = &ОбъектВыгрузки
	               |	И ИзмененияДляВыгрузки.Период <= &Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";	
	ЭлементВыборки = Запрос.Выполнить().Выбрать();
	Пока ЭлементВыборки.Следующий() Цикл
		
		МЗ = РегистрыСведений.ИзмененияДляВыгрузки.СоздатьМенеджерЗаписи();
		МЗ.Период = ЭлементВыборки.Период;
		МЗ.НастройкаВыгрузкиОбъектов = ЭлементВыборки.НастройкаВыгрузкиОбъектов;
		МЗ.ОбъектВыгрузки = ЭлементВыборки.ОбъектВыгрузки;
		МЗ.Удалить();	
		
	КонецЦикла;	
		
КонецПроцедуры

Функция ВыгрузкаДанныхВПапки(НастройкаВыгрузкиОбъектов = Неопределено) Экспорт
	
	ДатаВыгрузки = ТекущаяДата();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмененияДляВыгрузки.НастройкаВыгрузкиОбъектов КАК НастройкаВыгрузкиОбъектов,
	               |	ИзмененияДляВыгрузки.ОбъектВыгрузки КАК ОбъектВыгрузки
	               |ИЗ
	               |	РегистрСведений.ИзмененияДляВыгрузки КАК ИзмененияДляВыгрузки
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &НастройкаВыгрузкиОбъектов = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ИзмененияДляВыгрузки.НастройкаВыгрузкиОбъектов = &НастройкаВыгрузкиОбъектов
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИзмененияДляВыгрузки.НастройкаВыгрузкиОбъектов,
	               |	ИзмененияДляВыгрузки.ОбъектВыгрузки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкаВыгрузкиОбъектов";	
	Запрос.УстановитьПараметр("НастройкаВыгрузкиОбъектов", НастройкаВыгрузкиОбъектов);
	ЭлементВыборки = Запрос.Выполнить().Выбрать();
	
	Пока ЭлементВыборки.Следующий() Цикл
		
		Попытка
			ВыгрузитьПоНастройке(ЭлементВыборки.НастройкаВыгрузкиОбъектов, ЭлементВыборки.ОбъектВыгрузки);		
			УдалитьИЗИстории(ДатаВыгрузки, ЭлементВыборки.НастройкаВыгрузкиОбъектов, ЭлементВыборки.ОбъектВыгрузки);
		Исключение
			РегистрыСведений.ИсторияОбъектов.ВставитьСообщение(ЭлементВыборки.ОбъектВыгрузки, ОписаниеОшибки());
			//ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации();	
		КонецПопытки
		
	КонецЦикла;	
	
КонецФункции



Процедура ЗарегестрироватьИзменение(НастройкаВыгрузкиОбъектов, ОбъектВыгрузки) Экспорт
	
	МЗ = РегистрыСведений.ИзмененияДляВыгрузки.СоздатьМенеджерЗаписи();
	МЗ.Период = ТекущаяДата();
	МЗ.НастройкаВыгрузкиОбъектов = НастройкаВыгрузкиОбъектов;
	МЗ.ОбъектВыгрузки = ОбъектВыгрузки;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Процедура НаблюдениеЗаОбъектамиПриЗаписи(Источник, Отказ) Экспорт
	
	СсылкаНаИсточник = Источник.Ссылка;
	//Источник = Справочники.Контрагенты.ПустаяСсылка();	
	ПолноеИмяМетаданных = СсылкаНаИсточник.Метаданные().ПолноеИмя();	
	СсылкаНаМетаданные = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", ПолноеИмяМетаданных);
	Если ЗначениеЗаполнено(СсылкаНаМетаданные) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СсылкаНаМетаданные",СсылкаНаМетаданные);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НастройкиВыгрузкиОбъектовОбъектыВыгрузки.Ссылка КАК Ссылка,
		               |	НастройкиВыгрузкиОбъектовОбъектыВыгрузки.СсылкаНаМетаданные КАК СсылкаНаМетаданные,
		               |	НастройкиВыгрузкиОбъектовОбъектыВыгрузки.УсловиеОтбора КАК УсловиеОтбора
		               |ИЗ
		               |	Справочник.НастройкиВыгрузкиОбъектов.ОбъектыВыгрузки КАК НастройкиВыгрузкиОбъектовОбъектыВыгрузки
		               |ГДЕ
		               |	НастройкиВыгрузкиОбъектовОбъектыВыгрузки.СсылкаНаМетаданные = &СсылкаНаМетаданные
		               |	И НастройкиВыгрузкиОбъектовОбъектыВыгрузки.Ссылка.Использовать = ИСТИНА";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.УсловиеОтбора) И Выборка.УсловиеОтбора <> Справочники.ЭлементОтбора.ПустаяСсылка() Тогда
				//Проверим отбор
				ПрименяетсяК = Новый Массив;
				
				Попытка
					ЧтениеJSON = Новый ЧтениеJSON; 
					ЧтениеJSON.УстановитьСтроку(Выборка.УсловиеОтбора.Условие);
					ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
					ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
					ОбъектXDTO.Проверить();
				Исключение  
				КонецПопытки;
				
				Условие = "";
				Расшифровка = Неопределено;
				ДЗПрименяетсяК = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				ПройденоУсловие = ПодходящееУсловияПриминенияК(СсылкаНаИсточник, "", ДЗПрименяетсяК, Условие, ПрименяетсяК, Выборка.СсылкаНаМетаданные);
				Если НЕ ПройденоУсловие Тогда
					ЗарегестрироватьИзменение(Выборка.Ссылка, СсылкаНаИсточник);
				КонецЕсли;
			Иначе
				ЗарегестрироватьИзменение(Выборка.Ссылка, СсылкаНаИсточник);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НаблюдениеЗаЗаписямиПриЗаписи(Источник, Отказ, Замещение) Экспорт
	// Вставить содержимое обработчика.
КонецПроцедуры





Функция ПолучитьСтатусПакетаДокументов(Командировка, МассивУслуг =  Неопределено) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКомандированного", Командировка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка КАК Командировка,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга
	               |ПОМЕСТИТЬ УслугиВКомандиовке
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &ЗаказКомандированного
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ПодготовитьДляФормированияДокументов.ВЗаказе = ЗНАЧЕНИЕ(Документ.ЗаказКлиентаБТ.ПустаяСсылка)
	               |				ИЛИ ПодготовитьДляФормированияДокументов.ВЗаказе = НЕОПРЕДЕЛЕНО
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПодготовитьДляФормированияДокументов.Расписание = ЗНАЧЕНИЕ(Справочник.РегламентныеЗадачи.ПустаяСсылка)
	               |						ТОГДА 2
	               |					ИНАЧЕ 3
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПодготовитьДляФормированияДокументов.ВЗаказе ЕСТЬ NULL 
	               |					ТОГДА 0
	               |				ИНАЧЕ 1
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтатусЧисловой,
	               |	УслугиВКомандиовке.Командировка,
	               |	УслугиВКомандиовке.Услуга
	               |ПОМЕСТИТЬ СтатусыУслуг
	               |ИЗ
	               |	УслугиВКомандиовке КАК УслугиВКомандиовке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ПО УслугиВКомандиовке.Командировка = ПодготовитьДляФормированияДокументов.ЗаказКомандированного
	               |			И УслугиВКомандиовке.Услуга = ПодготовитьДляФормированияДокументов.Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтатусыУслуг.СтатусЧисловой
	               |ИЗ
	               |	СтатусыУслуг КАК СтатусыУслуг
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтатусыУслуг.СтатусЧисловой";   
				   
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Статус = "Ошибка статуса";
	Если Выгрузка.Количество()>1 Тогда
		Статус = "Частично сформирован";
	ИначеЕсли Выгрузка.Количество() = 1 Тогда
		СтатусЧисловой = Выгрузка[0].СтатусЧисловой;
		Если СтатусЧисловой = 0 Тогда
			Статус = "Несформирован";
		ИначеЕсли СтатусЧисловой = 1 Тогда
			Статус = "Сформирован";
		ИначеЕсли СтатусЧисловой = 2 Тогда
			Статус = "Неизвестный статус";
		ИначеЕсли СтатусЧисловой = 3 Тогда
			Статус = "Подготовлен";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции


Функция УОбъектаЕстьСобытия(Объект, Событие) Экспорт
	
	Результат = Справочники.ФункцииОписания.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектСобытия", Объект);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СобытияОбъектов.ОбъектСобытия,
	               |	СобытияОбъектов.Событие,
	               |	СобытияОбъектов.Обработчик
	               |ИЗ
	               |	РегистрСведений.СобытияОбъектов КАК СобытияОбъектов
	               |ГДЕ
	               |	СобытияОбъектов.ОбъектСобытия = &ОбъектСобытия
	               |	И СобытияОбъектов.Событие = &Событие";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Обработчик;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции



Функция УдалитьУслугуИзПакетаДокументов(ВхУслуга, ОставитьУслугу = Ложь) Экспорт
	
	Результат = Новый Структура("Отказ, СписокУслуг, ЗатронутыеДокументы", Ложь, Новый Массив, Новый Массив);
	
	ЗатронутыеДокументы = Новый Массив;
	СписокУслуг = Новый Массив;
	
	//
	НачатьТранзакцию();
	Попытка
		
		//Описание Услуги
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Услуга", ВхУслуга);
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	РеквизитыУслуги.Услуга КАК Услуга,
		               |	РеквизитыУслуги.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	УслугиВЗаказеКлиента.Регистратор КАК ДокументВКоторомИспользуется
		               |ПОМЕСТИТЬ ДанныеПоУслугам
		               |ИЗ
		               |	РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УслугиВЗаказеКлиента КАК УслугиВЗаказеКлиента
		               |		ПО РеквизитыУслуги.Услуга = УслугиВЗаказеКлиента.Услуга
		               |ГДЕ
		               |	РеквизитыУслуги.Услуга = &Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ДанныеПоУслугам.Услуга КАК Услуга,
		               |	ЗаказКлиентаБТТовары.Ссылка КАК ЗаказКлиентаБТ,
		               |	ЗаказКлиентаБТТовары.Услуга КАК ДочерняяУслуга,
		               |	ЗаказКлиентаБТТовары.Характеристика КАК Характеристика
		               |ПОМЕСТИТЬ СтарыеУслугиВЗаказеКлиентаБТ
		               |ИЗ
		               |	ДанныеПоУслугам КАК ДанныеПоУслугам
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиентаБТ.Товары КАК ЗаказКлиентаБТТовары
		               |		ПО ДанныеПоУслугам.ДокументВКоторомИспользуется = ЗаказКлиентаБТТовары.Ссылка
		               |			И ДанныеПоУслугам.Услуга = ЗаказКлиентаБТТовары.Услуга.УслугаВладелец
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ДанныеПоУслугам.Услуга КАК ВложеннаяУслуга,
		               |	ДанныеПоУслугам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ДанныеПоУслугам.ДокументВКоторомИспользуется КАК ВЗаказе
		               |ИЗ
		               |	ДанныеПоУслугам КАК ДанныеПоУслугам
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СтарыеУслугиВЗаказеКлиентаБТ.ДочерняяУслуга,
		               |	СтарыеУслугиВЗаказеКлиентаБТ.Характеристика,
		               |	СтарыеУслугиВЗаказеКлиентаБТ.ЗаказКлиентаБТ
		               |ИЗ
		               |	СтарыеУслугиВЗаказеКлиентаБТ КАК СтарыеУслугиВЗаказеКлиентаБТ";
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		//СсылкаНаСФ = Документы.СчетФактураВыданный.ПустаяСсылка();
		//СсылкаНаТекущийАкт = Документы.АктВыполненныхРабот.ПустаяСсылка();
		//СсылкаНаТекущийЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
		СсылкаНаТекущийЗаказКлиентаБТ = Документы.ЗаказКлиентаБТ.ПустаяСсылка();
		СсылкаНаКомандировку = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
		СсылкаНаТекущуюУслугу = Документы.Услуга.ПустаяСсылка();
		
		ДокументыСтруктура = Новый Структура("ЗаказКлиентаБТ, Командировка, Услуга", Новый Массив, Новый Массив, Новый Массив);
		
		//СФ = Неопределено;
		//АктОбъект = Неопределено;
		//ЗаказКлиента = Неопределено;
		ЗаказКлиентаБТ = Неопределено;
		Командировка = Неопределено;
		Услуга = Неопределено;
		
		Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
			
			Если СсылкаНаТекущийЗаказКлиентаБТ <> СтрокаВыгрузки.ВЗаказе И ЗначениеЗаполнено(СтрокаВыгрузки.ВЗаказе) Тогда
				СсылкаНаТекущийЗаказКлиентаБТ = СтрокаВыгрузки.ВЗаказе;
				ЗаказКлиентаБТ = СтрокаВыгрузки.ВЗаказе.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаТекущийЗаказКлиентаБТ) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаТекущийЗаказКлиентаБТ);
					Если ТипЗнч(ЗаказКлиентаБТ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда
						ДокументыСтруктура.ЗаказКлиентаБТ.Добавить( Новый Структура("Объект, Проводить", ЗаказКлиентаБТ, ЗаказКлиентаБТ.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ЗаказКлиентаБТ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда
				СтрокаСУслугой = ЗаказКлиентаБТ.Товары.Найти(СтрокаВыгрузки.ВложеннаяУслуга, "Услуга");
				Если СтрокаСУслугой <> НЕопределено Тогда
					ЗаказКлиентаБТ.Товары.Удалить(СтрокаСУслугой);
					Если Результат.ЗатронутыеДокументы.Найти(ЗаказКлиентаБТ.Ссылка) = Неопределено Тогда
						Результат.ЗатронутыеДокументы.Добавить(ЗаказКлиентаБТ.Ссылка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
						
		КонецЦикла;	
		
				
		Для Каждого ЗаказКлиентаБТ ИЗ ДокументыСтруктура.ЗаказКлиентаБТ Цикл
			Если ЗаказКлиентаБТ.Проводить И ЗаказКлиентаБТ.Объект.ПометкаУдаления = Ложь Тогда
				Если ЗаказКлиентаБТ.Объект.Товары.Количество() > 0 Тогда
					ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;	
			Иначе
				ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


Функция ДобавитьУслугуВЗаказКлиентаБТ(ВхЗаказКлиентаБТ = Неопределено, Услуга) Экспорт
	
	//Услуга = Документы.Услуга.ПустаяСсылка();
	ЭтоОбъект = Ложь;
	Если ВхЗаказКлиентаБТ <> Неопределено Тогда
		Если ТипЗнч(ВхЗаказКлиентаБТ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда 
			ЗаказКлиентаБТ = ВхЗаказКлиентаБТ;
			ЭтоОбъект = Истина;
		ИначеЕсли ТипЗнч(ВхЗаказКлиентаБТ) = Тип("ДокументСсылка.ЗаказКлиентаБТ") Тогда
			ЗаказКлиентаБТ = ВхЗаказКлиентаБТ.ПолучитьОбъект();
		КонецЕсли;	
	Иначе
		ЗаказКлиентаБТ = Документы.ЗаказКлиентаБТ.СоздатьДокумент();
		
		ЗаказКлиентаБТ.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ЗаказКлиентаБТ.Контрагент = Услуга.Контрагент;
		ЗаказКлиентаБТ.Партнер = Услуга.Партнер;
		ЗаказКлиентаБТ.Договор = Услуга.Договор;
		ЗаказКлиентаБТ.Дата = ТекущаяДата();
	КонецЕсли;
	
	МЗ = РегистрыСведений.РеквизитыУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();
	ХаракткристикаУслуги = МЗ.ХарактеристикаНоменклатуры;
	
	ОтборСреза = Новый Структура("Услуга", Услуга);
	МЗ = РегистрыСведений.СтатусУслугиПродажа.ПолучитьПоследнее(ТекущаяДата(), ОтборСреза);
	СтатусУслуги = МЗ.Статус;
	
	НоваяСтрока = ЗаказКлиентаБТ.Товары.Добавить();
	НоваяСтрока.Услуга = Услуга;
	НоваяСтрока.Номенклатура = Услуга.НоменклатураБТ.Номенклатура;
	НоваяСтрока.Содержание = Услуга.ПолноеНаименованиеУслуги;
	НоваяСтрока.Характеристика = ХаракткристикаУслуги;//	
	
	НоваяСтрока.Отменено = ?(СтатусУслуги = Перечисления.СтатусыУслуг.УслугаНеПродается, Истина, Ложь);
	НоваяСтрока.СтавкаНДС = Услуга.СтавкаНДСКлиента;
	
	Если НЕ НоваяСтрока.Отменено Тогда
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(Услуга.КоличествоКлиента), Услуга.КоличествоКлиента, 1);
		НоваяСтрока.Цена = Услуга.ЦенаКлиента;
		НоваяСтрока.Сумма = Услуга.СуммаКлиента;
		НоваяСтрока.СуммаНДС = Услуга.СуммаНДСКлиента;
		НоваяСтрока.СуммаСНДС = Услуга.СуммаКлиента;
		
		ОригинальнаяСуммаСНДС = Услуга.СуммаКлиента;
		ОригинальнаяСуммаНДС = Услуга.СуммаНДСКлиента;
		
		//Посчитаем все вложенные услуги.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УслугаРодитель", Услуга);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СвязанныеУслуги.ВложеннаяУслуга,
		               |	СвязанныеУслуги.УслугаРодитель
		               |ИЗ
		               |	РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
		               |ГДЕ
		               |	СвязанныеУслуги.УслугаРодитель = &УслугаРодитель
		               |	И СвязанныеУслуги.ВложенаВРодителя = ИСТИНА";	
		Выборка = Запрос.Выполнить().Выбрать();			   
		Пока Выборка.Следующий() Цикл
			НоваяСтрока.Сумма = НоваяСтрока.Сумма + Выборка.ВложеннаяУслуга.ЦенаКлиента;
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество; //Выборка.ВложеннаяУслуга.ЦенаКлиента;
			НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + Выборка.ВложеннаяУслуга.СуммаНДСКлиента;
			НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаСНДС + Выборка.ВложеннаяУслуга.СуммаКлиента;
		КонецЦикла;
		
		ВсеУслугиВЗаказеКлиентаБТБезНДС = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ВсеУслугиВЗаказеКлиентаБТБезНДС);
		Если ВсеУслугиВЗаказеКлиентаБТБезНДС = Истина Тогда
			НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДСБТ.БезНДС;
			НоваяСтрока.СуммаНДС = 0;
		КонецЕсли;
		
		ПересчитыватьСуммуНДСвЗаказеКлиентаБТ = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ПересчитыватьСуммуНДСвЗаказеКлиентаБТ);
		Если ПересчитыватьСуммуНДСвЗаказеКлиентаБТ = Истина Тогда
			//Если свернули услуги с разными суммами НДС
			Если ОригинальнаяСуммаСНДС <> НоваяСтрока.СуммаСНДС ИЛИ ОригинальнаяСуммаНДС <> НоваяСтрока.СуммаНДС Тогда
				СуммаНДС = УправлениеБТСервер.ВычислитьСуммуНДС(НоваяСтрока.СуммаСНДС, НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДС = СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
	
	//Включим все Номенклатуры которые дополняют эту.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УслугаРодитель", Услуга);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанныеУслуги.ВложеннаяУслуга,
	               |	СвязанныеУслуги.УслугаРодитель
	               |ИЗ
	               |	РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	               |ГДЕ
	               |	СвязанныеУслуги.УслугаРодитель = &УслугаРодитель
	               |	И СвязанныеУслуги.ВложенаВРодителя = ЛОЖЬ";	
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл
		ЗаказКлиентаБТ = ДобавитьУслугуВЗаказКлиентаБТ(ЗаказКлиентаБТ, Выборка.ВложеннаяУслуга);
	КонецЦикла;
	
	Если НЕ ЭтоОбъект Тогда
		Если ЗаказКлиентаБТ.Проведен Тогда
			ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);			
		Иначе
			Если ЗаказКлиентаБТ.Ссылка.Товары.Количество() = 0 Тогда
				ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаказКлиентаБТ;
КонецФункции



Функция ДобавитьУслугуВЗаказПоставщикуБТ(ВхЗаказПоставщикуБТ = Неопределено, Услуга) Экспорт
	
	//Услуга = Документы.Услуга.ПустаяСсылка();
	ЭтоОбъект = Ложь;
	Если ВхЗаказПоставщикуБТ <> Неопределено Тогда
		Если ТипЗнч(ВхЗаказПоставщикуБТ) = Тип("ДокументОбъект.ЗаказПоставщикуБТ") Тогда 
			ЗаказПоставщикуБТ = ВхЗаказПоставщикуБТ;
			ЭтоОбъект = Истина;
		ИначеЕсли ТипЗнч(ВхЗаказПоставщикуБТ) = Тип("ДокументСсылка.ЗаказПоставщикуБТ") Тогда
			ЗаказПоставщикуБТ = ВхЗаказПоставщикуБТ.ПолучитьОбъект();
		КонецЕсли;	
	Иначе
		ЗаказПоставщикуБТ = Документы.ЗаказПоставщикуБТ.СоздатьДокумент();
		
		ЗаказПоставщикуБТ.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ЗаказПоставщикуБТ.Контрагент = Услуга.Контрагент;
		ЗаказПоставщикуБТ.Партнер = Услуга.Партнер;
		ЗаказПоставщикуБТ.Договор = Услуга.Договор;
		ЗаказПоставщикуБТ.Дата = ТекущаяДата();
	КонецЕсли;
	
	МЗ = РегистрыСведений.РеквизитыУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();
	ХаракткристикаУслуги = МЗ.ХарактеристикаНоменклатуры;
	
	НоваяСтрока = ЗаказПоставщикуБТ.Товары.Добавить();
	НоваяСтрока.Услуга = Услуга;
	НоваяСтрока.Номенклатура = Услуга.НоменклатураБТ.Номенклатура;
	НоваяСтрока.Содержание = Услуга.ПолноеНаименованиеУслуги;
	НоваяСтрока.Характеристика = ХаракткристикаУслуги;//	
	
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Цена = Услуга.Цена;
	НоваяСтрока.Сумма = Услуга.Цена;
	НоваяСтрока.СтавкаНДС = Услуга.СтавкаНДС;
	НоваяСтрока.СуммаНДС = Услуга.СуммаНДС;
	НоваяСтрока.СуммаСНДС = Услуга.Сумма;
	
	////Посчитаем все вложенные услуги.
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("УслугаРодитель", Услуга);
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СвязанныеУслуги.ВложеннаяУслуга,
	//               |	СвязанныеУслуги.УслугаРодитель
	//               |ИЗ
	//               |	РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	//               |ГДЕ
	//               |	СвязанныеУслуги.УслугаРодитель = &УслугаРодитель
	//               |	И СвязанныеУслуги.ВложенаВРодителя = ИСТИНА";	
	//Выборка = Запрос.Выполнить().Выбрать();			   
	//Пока Выборка.Следующий() Цикл
	//	//Костыль
	//	Если Выборка.ВложеннаяУслуга.НоменклатураБТ = Справочники.НоменклатураБТ.Наценка ИЛИ
	//		Выборка.ВложеннаяУслуга.НоменклатураБТ = Справочники.НоменклатураБТ.Скидка Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	НоваяСтрока.Цена = НоваяСтрока.Цена + Выборка.ВложеннаяУслуга.ЦенаКлиента;
	//	НоваяСтрока.Сумма = НоваяСтрока.Сумма + Выборка.ВложеннаяУслуга.ЦенаКлиента;
	//	//НоваяСтрока.СтавкаНДС = Услуга.СтавкаНДСКлиента;
	//	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + Выборка.ВложеннаяУслуга.СуммаНДСКлиента;
	//	НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаСНДС + Выборка.ВложеннаяУслуга.СуммаКлиента;
	//КонецЦикла;
	
	
	////Включим все Номенклатуры которые дополняют эту.
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("УслугаРодитель", Услуга);
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	СвязанныеУслуги.ВложеннаяУслуга,
	//               |	СвязанныеУслуги.УслугаРодитель
	//               |ИЗ
	//               |	РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	//               |ГДЕ
	//               |	СвязанныеУслуги.УслугаРодитель = &УслугаРодитель
	//               |	И СвязанныеУслуги.ВложенаВРодителя = ЛОЖЬ";	
	//Выборка = Запрос.Выполнить().Выбрать();			   
	//Пока Выборка.Следующий() Цикл
	//	ЗаказКлиентаБТ = ДобавитьУслугуВЗаказКлиентаБТ(ЗаказКлиентаБТ, Выборка.ВложеннаяУслуга);
	//КонецЦикла;
	//
	//Если НЕ ЭтоОбъект Тогда
	//	Если ЗаказКлиентаБТ.Проведен Тогда
	//		ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);			
	//	Иначе
	//		Если ЗаказКлиентаБТ.Ссылка.Товары.Количество() = 0 Тогда
	//			ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);
	//		Иначе
	//			ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Запись);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ЗаказПоставщикуБТ;
КонецФункции



Процедура УстановитьСтатусУслуги(Услуга, Статус, ЗНАЧ Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	МЗ = РегистрыСведений.СтатусУслугиПродажа.СоздатьМенеджерЗаписи();
	МЗ.Период = Период; 
	МЗ.Услуга = Услуга;
	МЗ.Статус = Статус;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьСтатусУслуги(Услуга, ЗНАЧ Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	ОтборСтатуса = Новый Структура("Услуга", Услуга);
	МЗ = РегистрыСведений.СтатусУслугиПродажа.ПолучитьПоследнее(Период, ОтборСтатуса);
	
	Возврат МЗ.Статус;
КонецФункции


Процедура УстановитьАвтоматическийСтатусПроверки(Услуга, СтатусАвтоматический) Экспорт
		
	МЗ = РегистрыСведений.СтатусПроверкиУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();
	Если НЕ МЗ.Выбран() Тогда
		МЗ.Услуга = Услуга;
	КонецЕсли;
	МЗ.АвтоматическаяПроверка = СтатусАвтоматический;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Процедура УстановитьРучнойСтатусПроверки(Услуга, СтатусРучной) Экспорт
		
	МЗ = РегистрыСведений.СтатусПроверкиУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();	
	Если НЕ МЗ.Выбран() Тогда
		МЗ.Услуга = Услуга;
	КонецЕсли;
	МЗ.РучнаяПроверка = СтатусРучной;
	МЗ.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьСтатусыУслугиПроверки(Услуга) Экспорт
		
	ОтборСтатуса = Новый Структура("Услуга", Услуга);
	МЗ = РегистрыСведений.СтатусУслугиПродажа.Получить(ОтборСтатуса);
	
	Возврат Новый Структура("АвтоматическаяПроверка, РучнаяПроверка", МЗ.АвтоматическаяПроверка, МЗ.РучнаяПроверка);
КонецФункции


////////////////////////////////////////////////////////////////////////////////
//Комиссии поставщиков
Функция СформироватьКомиссииНаСервере(Объект) Экспорт
	
	//Удалить все вложенные услуги
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Услуга.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Услуга КАК Услуга
	               |ГДЕ
	               |	Услуга.ПометкаУдаления = ЛОЖЬ
	               |	И Услуга.УслугаВладелец = &УслугаВладелец
	               |	И Услуга.НоменклатураБТ.КомиссионнаяУслуга = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	Запрос.УстановитьПараметр("УслугаВладелец", Объект.Ссылка);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
		ОбъектУслуги = СтрокаВыгрузки.Ссылка.ПолучитьОбъект(); //Документы.Услуга.СоздатьДокумент();//
		ОбъектУслуги.ПометкаУдаления = Истина;
		ОбъектУслуги.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
	//Номенклатуры = ТаблицаУслугИНоменклатур.ВыгрузитьКолонку("Номенклатура");
	
	Партнер  			= Объект.Поставщик.Партнер  ;
	Поставщик   		= Объект.Поставщик          ;
	ДоговорПоставщика  	= Объект.ДоговорСПоставщиком;
	Клиент   			= Объект.Партнер            ;
	Контрагент   		= Объект.Контрагент         ;
	ДоговорКонтрагента  = Объект.Договор            ;
	
	Выполнять = Истина;
	Пока Выполнять Цикл 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Поставщик", Поставщик);
		Запрос.УстановитьПараметр("ДоговорПоставщика", ДоговорПоставщика);
		Запрос.УстановитьПараметр("Клиент", Клиент);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	10 КАК Приоритет,
		               |	КомиссииПоставщиковСрезПоследних.Условие КАК Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК КАК ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии КАК СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах КАК ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена КАК Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС КАК СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС КАК СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем КАК НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем КАК НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги КАК ШаблонСвязаннойУслуги
		               |ПОМЕСТИТЬ СписокВсехНастроек
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = &Поставщик
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = &ДоговорПоставщика
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = &Клиент
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = &Контрагент
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = &ДоговорКонтрагента
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	20,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = &Поставщик
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = &ДоговорПоставщика
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = &Клиент
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = &Контрагент
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	30,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = &Поставщик
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = &ДоговорПоставщика
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = &Клиент
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	40,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = &Поставщик
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = &ДоговорПоставщика
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	50,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = &Поставщик
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	60,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = &Партнер
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	70,
		               |	КомиссииПоставщиковСрезПоследних.Условие,
		               |	КомиссииПоставщиковСрезПоследних.ПрименяетсяК,
		               |	КомиссииПоставщиковСрезПоследних.СуммаКомиссии,
		               |	КомиссииПоставщиковСрезПоследних.ВПроцентах,
		               |	КомиссииПоставщиковСрезПоследних.Цена,
		               |	КомиссииПоставщиковСрезПоследних.СтавкаНДС,
		               |	КомиссииПоставщиковСрезПоследних.СуммаНДС,
		               |	КомиссииПоставщиковСрезПоследних.НеМенееЧем,
		               |	КомиссииПоставщиковСрезПоследних.НеБолееЧем,
		               |	КомиссииПоставщиковСрезПоследних.ШаблонСвязаннойУслуги
		               |ИЗ
		               |	РегистрСведений.КомиссииПоставщиков.СрезПоследних(&Дата, ) КАК КомиссииПоставщиковСрезПоследних
		               |ГДЕ
		               |	КомиссииПоставщиковСрезПоследних.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Поставщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорПоставщика = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Клиент = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И КомиссииПоставщиковСрезПоследних.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МИНИМУМ(СписокВсехНастроек.Приоритет) КАК Приоритет
		               |ПОМЕСТИТЬ МаксимальныйПриоритет
		               |ИЗ
		               |	СписокВсехНастроек КАК СписокВсехНастроек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокВсехНастроек.Приоритет КАК Приоритет,
		               |	СписокВсехНастроек.Условие КАК УсловиеСвязи,
		               |	СписокВсехНастроек.ПрименяетсяК КАК ПрименяетсяК,
		               |	СписокВсехНастроек.СуммаКомиссии КАК СуммаКомиссии,
		               |	СписокВсехНастроек.ВПроцентах КАК ВПроцентах,
		               |	СписокВсехНастроек.Цена КАК Цена,
		               |	СписокВсехНастроек.СтавкаНДС КАК СтавкаНДС,
		               |	СписокВсехНастроек.СуммаНДС КАК СуммаНДС,
		               |	СписокВсехНастроек.НеМенееЧем КАК НеМенееЧем,
		               |	СписокВсехНастроек.НеБолееЧем КАК НеБолееЧем,
		               |	СписокВсехНастроек.ШаблонСвязаннойУслуги КАК ШаблонСвязаннойУслуги
		               |ИЗ
		               |	СписокВсехНастроек КАК СписокВсехНастроек
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПриоритет КАК МаксимальныйПриоритет
		               |		ПО СписокВсехНастроек.Приоритет = МаксимальныйПриоритет.Приоритет";
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если Выгрузка.Количество() > 0 Тогда
			Партнер = Справочники.Партнеры.ПустаяСсылка();
			//Клиент = ??? надо?
		Иначе
			Партнер = Партнер.Родитель;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Партнер) Тогда
			Выполнять = Ложь;
		КонецЕсли;
	КонецЦикла;	
			
	ОписаниеУслуги =  Объект.ОписаниеУслуги.Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		
		ОшибкиПользователя = Новый Массив;
		Для Каждого Связь ИЗ Выгрузка Цикл
						
			ПрименяетсяК = Новый Массив;
			РасшифровкаПрименяетсяК = Неопределено;
				
			Если ЗначениеЗаполнено(Связь.ПрименяетсяК.Условие) Тогда
								
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(Связь.ПрименяетсяК.Условие);
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
				ОбъектXDTO.Проверить();
								
				Условие = "";
				Расшифровка = Неопределено;
				ДЗПрименяетсяК = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				ПодходящееУсловияПриминенияК(Объект, "", ДЗПрименяетсяК, Условие, ПрименяетсяК);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Связь.УсловиеСвязи.Условие) Тогда
			
				Условие = "";
				Расшифровка = Неопределено;
				
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(Связь.УсловиеСвязи.Условие);
				ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
				ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
				ОбъектXDTO.Проверить();
				
				ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
				Состояние = ПодходящееУсловие(Объект, "", ДЗ, Условие, Расшифровка);
					
				Если НЕ Состояние Тогда
					Для Каждого СтрокаДляОбработки ИЗ Расшифровка Цикл
						//Если СтрокаДляОбработки.Услуга.НоменклатураБТ = Связь.НоменклатураБТ Тогда
							
							Параметры = Новый Структура("Командировка, УслугаВладелец", Объект, СтрокаДляОбработки.Услуга);									
							РезультатСобытия = ВнешниеСобытия(Связь.УсловиеСвязи, Перечисления.СобытияБТ.ПередСозданиемУслуги, Параметры);
							Если НЕ РезультатСобытия.Отказ Тогда
								
								УслугаВложеннаяВ = СтрокаДляОбработки.Услуга;
								НоваяУслуга = УправлениеБТСервер.НайтиСоздатьУслугуКомиссияПоставщика(СтрокаДляОбработки.Услуга, Связь, УслугаВложеннаяВ, ПрименяетсяК, ОписаниеУслуги);
							
							КонецЕсли;
							
						//КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
	
	КонецЕсли;

	Возврат Истина
	
КонецФункции

Функция НайтиСоздатьУслугуКомиссияПоставщика(УслугаВладелец, СтрокаСвязи, УслугаВложенаВ = Неопределено, ПрименяетсяК, ОписаниеУслуги, СуммаПрименяетсяК = 0) Экспорт
	
	//СтрокаСвязи = [НоменклатураБТ, НоменклатураПриемник, УсловиеСвязи, ФиксированнаяСумма, Цена, СтавкаНДС, СуммаНДС, Сумма] 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Услуга.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Услуга КАК Услуга
	               |ГДЕ
	               |	Услуга.ПометкаУдаления = ИСТИНА
	               |	И Услуга.УслугаВладелец = &УслугаВладелец
	               |	И Услуга.НоменклатураБТ.КомиссионнаяУслуга = ИСТИНА
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	Запрос.УстановитьПараметр("УслугаВладелец", УслугаВладелец);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() > 0 Тогда
		УслугаОбъект = Выгрузка[0].Ссылка.ПолучитьОбъект(); 
		УправлениеБТСервер.УстановитьСтатусУслуги(Выгрузка[0].Ссылка, Перечисления.СтатусыУслуг.УслугаРеализована);
	Иначе
		УслугаОбъект = Документы.Услуга.СоздатьДокумент();
	КонецЕсли;
	
	СуммаПрименяетсяК = 0;                  
	Если ТипЗнч(ПрименяетсяК) = Тип("Структура") Тогда
		Для Каждого КлючЗначениеПрименения ИЗ ПрименяетсяК Цикл
			Если ТипЗнч(КлючЗначениеПрименения.Значение) = Тип("Число") Тогда
				СуммаПрименяетсяК = СуммаПрименяетсяК + КлючЗначениеПрименения.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
		
	////////////////
	УслугаОбъект.ПометкаУдаления = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаСвязи.ШаблонСвязаннойУслуги) Тогда
		//Это пользовательский режим
		ДанныеПоУслуге = СоздатьУслугуПоШаблону(СтрокаСвязи.ШаблонСвязаннойУслуги, УслугаОбъект, УслугаВладелец);
		УслугаОбъект = ДанныеПоУслуге.Услуга;
		
		Если НЕ ЗначениеЗаполнено(УслугаОбъект.Дата) Тогда
			УслугаОбъект.Дата = УслугаВладелец.Дата;
		КонецЕсли;
		
		Если УслугаВложенаВ <> Неопределено Тогда
			УслугаОбъект.ВложеноВ = УслугаВложенаВ;
		КонецЕсли;	
		
		УслугаОбъект.УслугаВладелец = УслугаВладелец;
		УслугаОбъект.ТипДочернейУслуги = Перечисления.ТипДочернейУслуги.Автоматическая;
		
		ОписаниеУслуги = ПолучитьОписание(УслугаОбъект, УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги, УслугаОбъект.ЭкстраПоля);
		УслугаОбъект.ПолноеНаименованиеУслуги = ОписаниеУслуги;
		
		Если СтрокаСвязи.ВПроцентах Тогда
			Если СуммаПрименяетсяК = 0 Тогда
				УслугаОбъект.Цена = УстановитьСуммуВПроцентах(УслугаВладелец.Цена, УслугаОбъект.Цена, СтрокаСвязи);
				УслугаОбъект.Сумма = УстановитьСуммуВПроцентах(УслугаВладелец.Сумма, УслугаОбъект.Сумма, СтрокаСвязи);
				УслугаОбъект.ЦенаКлиента = УстановитьСуммуВПроцентах(УслугаВладелец.ЦенаКлиента, УслугаОбъект.ЦенаКлиента, СтрокаСвязи);
				УслугаОбъект.СуммаКлиента = УстановитьСуммуВПроцентах(УслугаВладелец.СуммаКлиента, УслугаОбъект.СуммаКлиента, СтрокаСвязи);
			Иначе
				УслугаОбъект.Цена = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.Цена, СтрокаСвязи);
				УслугаОбъект.Сумма = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.Сумма, СтрокаСвязи);
				УслугаОбъект.ЦенаКлиента = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.ЦенаКлиента, СтрокаСвязи);
				УслугаОбъект.СуммаКлиента = УстановитьСуммуВПроцентах(СуммаПрименяетсяК, УслугаОбъект.СуммаКлиента, СтрокаСвязи);			
			КонецЕсли;
			
		Иначе
			//
			Если УслугаОбъект.СуммаКлиента = 0 Тогда
				УслугаОбъект.СуммаКлиента = УслугаОбъект.ЦенаКлиента * УслугаОбъект.КоличествоКлиента; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УслугаОбъект.СтавкаНДСКлиента) И НЕ ЗначениеЗаполнено(УслугаОбъект.СуммаНДСКлиента) Тогда
			УслугаОбъект.СуммаНДСКлиента = УправлениеБТСервер.ВычислитьСуммуНДС(УслугаОбъект.ЦенаКлиента * УслугаОбъект.КоличествоКлиента, УслугаОбъект.СтавкаНДСКлиента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(УслугаОбъект.СтавкаНДС) И НЕ ЗначениеЗаполнено(УслугаОбъект.СуммаНДС) Тогда
			УслугаОбъект.СуммаНДС = УправлениеБТСервер.ВычислитьСуммуНДС(УслугаОбъект.Сумма, УслугаОбъект.СтавкаНДС);	
		КонецЕсли;
		
		УслугаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		УправлениеБТСервер.УстановитьСтатусУслуги(УслугаОбъект.Ссылка, ДанныеПоУслуге.Допы.СтатусУслуги);

	Иначе	

	
	
		УслугаОбъект.Дата = УслугаВладелец.Дата;
		УслугаОбъект.ПометкаУдаления = Ложь;
		УслугаОбъект.НоменклатураБТ = Справочники.НоменклатураБТ.Комиссия;
		УслугаОбъект.ЗаказИзКорзины = УслугаВладелец.ЗаказИзКорзины;
		УслугаОбъект.СтавкаНДС = СтрокаСвязи.СтавкаНДС;
		УслугаОбъект.СтавкаНДСКлиента = УслугаВладелец.СтавкаНДСКлиента;
		УслугаОбъект.УслугаВладелец = УслугаВладелец;
		
		Если УслугаВложенаВ <> Неопределено Тогда
			УслугаОбъект.ВложеноВ = УслугаВложенаВ;
		КонецЕсли;	
		
		УслугаОбъект.Поставщик = УслугаВладелец.Поставщик;
		УслугаОбъект.ДоговорСПоставщиком = УслугаВладелец.ДоговорСПоставщиком;
		
		УслугаОбъект.Партнер = УслугаВладелец.Партнер;
		УслугаОбъект.Контрагент = УслугаВладелец.Контрагент;
		УслугаОбъект.Договор = УслугаВладелец.Договор;
		
		Если Не СтрокаСвязи.ВПроцентах Тогда
			
			РасчетнаяСумма = 0;
			Если ПрименяетсяК <> Неопределено И ПрименяетсяК.Количество() > 0 Тогда
				Для Каждого ТекСтрокаПрименяетсяК Из ПрименяетсяК Цикл
						Если ТипЗнч(ТекСтрокаПрименяетсяК.Значение) = Тип("Число") Тогда
							РасчетнаяСумма = РасчетнаяСумма + ТекСтрокаПрименяетсяК.Значение;
						КонецЕсли;
				КонецЦикла;
			Иначе 
				//По умолчанию это вся сумма поставщика
				РасчетнаяСумма = СтрокаСвязи.СуммаКомиссии;
			КонецЕсли;
			
			УслугаОбъект.Цена = РасчетнаяСумма;
			УслугаОбъект.СуммаНДС = ВычислитьСуммуНДС(РасчетнаяСумма, СтрокаСвязи.СтавкаНДС);  
			УслугаОбъект.Сумма = РасчетнаяСумма;
			
			УслугаОбъект.ЦенаКлиента = 0;
			УслугаОбъект.СуммаНДСКлиента = 0;
			УслугаОбъект.СуммаКлиента = 0;
		Иначе
			РасчетнаяСумма = 0;
			Если ПрименяетсяК <> Неопределено И ПрименяетсяК.Количество() > 0 Тогда
				Для Каждого ТекСтрокаПрименяетсяК Из ПрименяетсяК Цикл
						Если ТипЗнч(ТекСтрокаПрименяетсяК.Значение) = Тип("Число") Тогда
							РасчетнаяСумма = РасчетнаяСумма + ТекСтрокаПрименяетсяК.Значение;
						КонецЕсли;
				КонецЦикла;
			Иначе 
				//По умолчанию это вся сумма поставщика
				РасчетнаяСумма = УслугаВладелец.Сумма;
			КонецЕсли;
			
			Если СтрокаСвязи.НеМенееЧем > 0 И (РасчетнаяСумма / 100 * СтрокаСвязи.СуммаКомиссии) < СтрокаСвязи.НеМенееЧем Тогда
				УстанавливаемаяЦена = СтрокаСвязи.НеМенееЧем;	
			ИначеЕсли СтрокаСвязи.НеБолееЧем > 0 И (РасчетнаяСумма / 100 * СтрокаСвязи.СуммаКомиссии) > СтрокаСвязи.НеБолееЧем Тогда
				УстанавливаемаяЦена = СтрокаСвязи.НеБолееЧем;	
			Иначе
				УстанавливаемаяЦена = РасчетнаяСумма / 100 * СтрокаСвязи.СуммаКомиссии;
			КонецЕсли;
			
			УслугаОбъект.Цена = УстанавливаемаяЦена;
			УслугаОбъект.СуммаНДС = ВычислитьСуммуНДС(УстанавливаемаяЦена, УслугаВладелец.СтавкаНДС);
			УслугаОбъект.Сумма = УстанавливаемаяЦена;
			
			УслугаОбъект.ЦенаКлиента = 0;//УстанавливаемаяЦена;
			УслугаОбъект.СуммаНДС = 0;//ВычислитьСуммуНДС(УстанавливаемаяЦена, УслугаВладелец.СтавкаНДС);
			УслугаОбъект.СуммаКлиента = 0; //УстанавливаемаяЦена;
		КонецЕсли;	
		
		УправлениеБТСервер.ЗаполнитьХарактеристики(УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги);
		УслугаОбъект.Командируемые.Загрузить(УслугаВладелец.Командируемые.Выгрузить());
		
		Параметры = Новый Структура("УслугаОбъект, УслугаВладелец", УслугаОбъект, УслугаВладелец);
		РезультатСобытия = ВнешниеСобытия(СтрокаСвязи.УсловиеСвязи, Перечисления.СобытияБТ.ПриСозданииУслуги, Параметры);		
		Если НЕ РезультатСобытия.Отказ Тогда
			ОписаниеУслуги = ПолучитьОписание(УслугаОбъект, УслугаОбъект.НоменклатураБТ, УслугаОбъект.ОписаниеУслуги, УслугаОбъект.ЭкстраПоля);
			//Если УслугаОбъект.ПолноеНаименованиеУслуги <> ОписаниеУслуги Тогда
			УслугаОбъект.ПолноеНаименованиеУслуги = ОписаниеУслуги;
			УслугаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат УслугаОбъект.Ссылка
	
КонецФункции




Функция ВставитьВСметуУслугу(Смета, Услуга) Экспорт
	
	//Смета = Документы.Смета.ПустаяСсылка().ПолучитьОбъект();
	СтрокаВСмете = Смета.Услуги.Добавить();
	СтрокаВСмете.Услуга = Услуга;
	СтрокаВСмете.НоменклатураБТ = Услуга.НоменклатураБТ;
	СтрокаВСмете.Количество = 1;
	СтрокаВСмете.Цена = Услуга.Цена;
	СтрокаВСмете.СтавкаНДС = Услуга.СтавкаНДС;
	СтрокаВСмете.СуммаНДС = Услуга.СуммаНДС;
	СтрокаВСмете.Сумма = Услуга.Сумма;
	СтрокаВСмете.СуммаВсего = Услуга.Сумма;
	СтрокаВСмете.Наценка = 0;
	СтрокаВСмете.Скидка = 0;
		
КонецФункции

Функция ЗаполнитьСметуУслугамиПоПроекту(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИнформацияПоУслуге.Услуга КАК Услуга,
	               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |ГДЕ
	               |	ИнформацияПоУслуге.Характеристика = &Характеристика
	               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &ЗначениеХарактеристики";
	
	Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Проект);
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", Объект.Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		ВставитьВСметуУслугу(Объект, Выборка.Услуга);	
	КонецЦикла;
	
КонецФункции








Функция ПолучитьЗначениеРеквизита(Значение) Экспорт
	
	Возврат ИИСервер.ПолучитьЗначениеРеквизита(Значение);
	
КонецФункции

Функция ВернутьОписаниеСсылкиДонора(СсылкаНаОбъект, СписокИсключений = Неопределено) Экспорт
	
	Возврат ИИСервер.ВернутьОписаниеСсылкиДонора(СсылкаНаОбъект, СписокИсключений);
	
КонецФункции	

Функция ВернутьОписаниеСсылки(СсылкаНаОбъект, СписокИсключений = Неопределено) Экспорт
	
	Возврат ИИСервер.ВернутьОписаниеСсылки(СсылкаНаОбъект, СписокИсключений);
	
КонецФункции	

Функция ПолучитьСсылкуНаОбъект(Значение) Экспорт
	
	Возврат ИИСервер.ПолучитьСсылкуНаОбъект(Значение);

КонецФункции
	
Функция СоздатьОбъект(ВиртуальныйОбъект, ОсновнойОбъект = Неопределено) Экспорт
	
	ОбъектИлиСсылка = ИИСервер.СоздатьОбъект(ВиртуальныйОбъект, ОсновнойОбъект);	
	Возврат ОбъектИлиСсылка;
	
КонецФункции	



Функция ЭкспортНастройки(СсылкаНаНастройку) Экспорт		
	ТекстJSON = "{""НеВыгружать"": [
				|	""JSON"",
				|	""СерверШины"",
				|	""ВнешняяОбработка"",
				|	""ИспользоватьВнешнююОбработку""	
				|]}";	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	ОписаниеНастройки = ВернутьОписаниеСсылки(СсылкаНаНастройку, СтруктураЖСОН.НеВыгружать);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ОписаниеНастройки);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
КонецФункции

Функция ИмпортНастройки(СодержимоеФайла, НастройкаЗагрузкиУслуг = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(СодержимоеФайла);
		СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		НовыйОбъект = СоздатьОбъект(СтруктураЖСОН, НастройкаЗагрузкиУслуг);
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат НовыйОбъект;
	
КонецФункции





Функция СинхронизируемНастройкиЗагрузкиССервером() Экспорт
	//Дождемся когда разработчики шины сделают сервис
КонецФункции





Функция ЗарегистрироватьПодпискуНаЗагрузкуВШине(СерверШины, RESTЗапрос) Экспорт
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СерверШины) Тогда 
		Сервер = СерверШины.URL;
		ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
		Адрес = "/conversion/registerdb/"+ИдентификаторБД+"/"+RESTЗапрос+"/";
		Параметры = Новый Структура("Пользователь, Пароль", СерверШины.Логин, СерверШины.Пароль);
		РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
		Результат = РезультатЗапроса.Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УдалитьПодпискуЗагрузкиВШине(СерверШины, RESTЗапрос) Экспорт
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СерверШины) Тогда 
		Сервер = СерверШины.URL;
		ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
		Адрес = "/conversion/unregisterdb/"+ИдентификаторБД+"/"+RESTЗапрос+"/";
		Параметры = Новый Структура("Пользователь, Пароль", СерверШины.Логин, СерверШины.Пароль);
		РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);	
		Результат = РезультатЗапроса.Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СтатусПодпискиЗагрузкиВШине(СерверШины, RESTЗапрос) Экспорт
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(СерверШины) Тогда 
		Сервер = СерверШины.URL;
		ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
		Адрес = "/conversion/getstatusregisterdb/"+ИдентификаторБД+"/"+RESTЗапрос+"/";
		Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "GET", СерверШины.Логин, СерверШины.Пароль);
		РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
		Результат = РезультатЗапроса.Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



Функция УслугиПодходятПодУсловие(МассивУслугСсылка, ЭлементОтбораСсылка, Расшифровка=Неопределено) Экспорт
	
	Условие = "";
	Расшифровка = Неопределено;

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ЭлементОтбораСсылка.Условие);
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
		ОбъектXDTO.Проверить();
	Исключение	
	КонецПопытки;

	ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	Состояние = ПодходящееУсловие(МассивУслугСсылка, "", ДЗ, Условие, Расшифровка);

	Возврат НЕ Состояние;
	
КонецФункции

Функция ЗаполнитьДополнительныеНомераВЗаказеКлиента(ЗаказКлиентаБТОбъект) Экспорт
	
	ТаблицаОтборов = РегистрыСведений.УсловияЗаполненияЗаказаКлиентаБТ.ПолучитьАктуальныеНастройки(ЗаказКлиентаБТОбъект.Партнер, ЗаказКлиентаБТОбъект.Контрагент, ЗаказКлиентаБТОбъект.Договор);
	Для Каждого ПравилоОтбора ИЗ ТаблицаОтборов Цикл
		Если ЗначениеЗаполнено(ПравилоОтбора.УсловияОтбора) Тогда
			Услуги = ЗаказКлиентаБТОбъект.Товары.ВыгрузитьКолонку("Услуга");
			
			Расшифровка = Неопределено;
			Результат = УслугиПодходятПодУсловие(Услуги, ПравилоОтбора.УсловияОтбора, Расшифровка);
			Если ТипЗнч(Расшифровка) = Тип("Массив") Тогда
				Для Каждого СтрокаРасшифровки ИЗ Расшифровка Цикл 
					
					Отбор = Новый Структура();
					Отбор.Вставить("Услуга", СтрокаРасшифровки.Услуга);
					СтрокиТоваров = ЗаказКлиентаБТОбъект.Товары.НайтиСтроки(Отбор);

					Для Каждого СтрокаСТоваром ИЗ СтрокиТоваров Цикл 
						
						Если ПолучитьФункциональнуюОпцию("ИспользоватьРазделениеЗаказаКлиентаНаАкты") Тогда 
							СтрокаСТоваром.НомерАкта = МодульФункцийПереопределяемый.СформироватьСтрокуПоШаблону(ЗаказКлиентаБТОбъект, СтрокаРасшифровки.Услуга, ПравилоОтбора.ШаблонНомераАкта);
						КонецЕсли;
						
						Если ПолучитьФункциональнуюОпцию("ИспользоватьРазделениеЗаказаКлиентаНаСФ") Тогда 
							СтрокаСТоваром.НомерСчетФактуры = МодульФункцийПереопределяемый.СформироватьСтрокуПоШаблону(ЗаказКлиентаБТОбъект, СтрокаРасшифровки.Услуга, ПравилоОтбора.ШаблонНомераСчетФактуры);
						КонецЕсли;
						
						Если ПолучитьФункциональнуюОпцию("ИспользоватьРазделениеЗаказаКлиентаНаСчета") Тогда 
							СтрокаСТоваром.НомерСчета = МодульФункцийПереопределяемый.СформироватьСтрокуПоШаблону(ЗаказКлиентаБТОбъект, СтрокаРасшифровки.Услуга, ПравилоОтбора.ШаблонНомераСчета);
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции


#Область Согласования


Функция СоздатьСледующуюЗадачуСогласования(ЗадачаИлиСогласование) Экспорт

	Результат = Задачи.ЗадачаКлиента.ПустаяСсылка();
	
	СогласованиеКомандировки = ЗадачаИлиСогласование;
	Если ТипЗнч(ЗадачаИлиСогласование) = Тип("ЗадачаСсылка.ЗадачаКлиента") Тогда
		СогласованиеКомандировки = ЗадачаИлиСогласование.ОбъектЗадачи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СогласованиеКомандировки", СогласованиеКомандировки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СогласованиеКомандировокТочкиМаршрута.ЗадачаКлиента КАК ЗадачаКлиента,
	               |	СогласованиеКомандировокТочкиМаршрута.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	СогласованиеКомандировокТочкиМаршрута.СогласованиеКомандировки.СхемаСогласования КАК СхемаСогласования,
	               |	СогласованиеКомандировокТочкиМаршрута.ЗадачаКлиента.Дата КАК Дата
	               |ПОМЕСТИТЬ ПоследняяЗадача
	               |ИЗ
	               |	РегистрСведений.СогласованиеКомандировокТочкиМаршрута КАК СогласованиеКомандировокТочкиМаршрута
	               |ГДЕ
	               |	СогласованиеКомандировокТочкиМаршрута.СогласованиеКомандировки = &СогласованиеКомандировки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследняяЗадача.ЗадачаКлиента КАК ЗадачаКлиента,
	               |	ПоследняяЗадача.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ПоследняяЗадача.СхемаСогласования КАК СхемаСогласования,
	               |	ПоследовательностьЗадачСогл.НомерСтроки КАК НомерСтроки,
	               |	ПоследовательностьЗадачСогл.Идентификатор КАК Идентификатор,
	               |	ПоследовательностьЗадачСогл.ТипЗапроса КАК ТипЗапроса,
	               |	ПоследовательностьЗадачСогл.Представление КАК Представление,
	               |	ПоследовательностьЗадачСогл.СопровождающийТекст КАК СопровождающийТекст,
	               |	ПоследовательностьЗадачСогл.УсловиеПредшественника КАК УсловиеПредшественника,
	               |	ПоследовательностьЗадачСогл.Предшественник КАК Предшественник,
	               |	ПоследовательностьЗадачСогл.Следующий КАК Следующий
	               |ПОМЕСТИТЬ СледующийСогл
	               |ИЗ
	               |	ПоследняяЗадача КАК ПоследняяЗадача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УсловияСогласованияКомандировки.Последовательность КАК ПоследовательностьЗадачСогл
	               |		ПО ПоследняяЗадача.СхемаСогласования = ПоследовательностьЗадачСогл.Ссылка
	               |ГДЕ
	               |	ПоследняяЗадача.ТочкаМаршрута = ПоследовательностьЗадачСогл.Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследняяЗадача.ЗадачаКлиента КАК ЗадачаКлиента,
	               |	ПоследняяЗадача.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	ПоследняяЗадача.СхемаСогласования КАК СхемаСогласования,
	               |	ПоследовательностьЗадач.НомерСтроки КАК НомерСтроки,
	               |	ПоследовательностьЗадач.Идентификатор КАК Идентификатор,
	               |	ПоследовательностьЗадач.ТипЗапроса КАК ТипЗапроса,
	               |	ПоследовательностьЗадач.Представление КАК Представление,
	               |	ПоследовательностьЗадач.СопровождающийТекст КАК СопровождающийТекст,
	               |	ПоследовательностьЗадач.УсловиеПредшественника КАК УсловиеПредшественника,
	               |	10 КАК Приоритет
	               |ПОМЕСТИТЬ Предшественник
	               |ИЗ
	               |	ПоследняяЗадача КАК ПоследняяЗадача
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияСогласованияКомандировки.Последовательность КАК ПоследовательностьЗадач
	               |		ПО ПоследняяЗадача.СхемаСогласования = ПоследовательностьЗадач.Ссылка
	               |ГДЕ
	               |	ПоследовательностьЗадач.Предшественник = ПоследняяЗадача.ТочкаМаршрута
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СледующийСогл.ЗадачаКлиента,
	               |	СледующийСогл.ТочкаМаршрута,
	               |	СледующийСогл.СхемаСогласования,
	               |	ПоследовательностьСледующийСогл.НомерСтроки,
	               |	ПоследовательностьСледующийСогл.Идентификатор,
	               |	ПоследовательностьСледующийСогл.ТипЗапроса,
	               |	ПоследовательностьСледующийСогл.Представление,
	               |	ПоследовательностьСледующийСогл.СопровождающийТекст,
	               |	ПоследовательностьСледующийСогл.УсловиеПредшественника,
	               |	5
	               |ИЗ
	               |	СледующийСогл КАК СледующийСогл
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияСогласованияКомандировки.Последовательность КАК ПоследовательностьСледующийСогл
	               |		ПО СледующийСогл.СхемаСогласования = ПоследовательностьСледующийСогл.Ссылка
	               |			И СледующийСогл.Следующий = ПоследовательностьСледующийСогл.Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Предшественник.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ МаксимумПриоритет
	               |ИЗ
	               |	Предшественник КАК Предшественник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Предшественник.ЗадачаКлиента КАК ЗадачаКлиента,
	               |	Предшественник.ТочкаМаршрута КАК ТочкаМаршрута,
	               |	Предшественник.СхемаСогласования КАК СхемаСогласования,
	               |	Предшественник.НомерСтроки КАК НомерСтроки,
	               |	Предшественник.ТипЗапроса КАК ТипЗапроса,
	               |	Предшественник.Представление КАК Представление,
	               |	Предшественник.СопровождающийТекст КАК СопровождающийТекст,
	               |	Предшественник.УсловиеПредшественника КАК УсловиеПредшественника,
	               |	Предшественник.Приоритет КАК Приоритет,
	               |	Предшественник.ЗадачаКлиента.ОбъектЗадачи КАК ОбъектЗадачи,
	               |	Предшественник.Идентификатор КАК ТочкаМаршрутаЗадачи
	               |ИЗ
	               |	Предшественник КАК Предшественник
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимумПриоритет КАК МаксимумПриоритет
	               |		ПО Предшественник.Приоритет = МаксимумПриоритет.Приоритет";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//
		НоваяЗадача = Задачи.ЗадачаКлиента.СоздатьЗадачу();
		НоваяЗадача.Дата = ТекущаяДата();
		НоваяЗадача.ДатаНачала = ТекущаяДата();
		НоваяЗадача.Наименование = ?(ЗначениеЗаполнено(Выборка.СопровождающийТекст),Выборка.СопровождающийТекст, Выборка.Представление); 
		НоваяЗадача.ОбъектЗадачи = Выборка.ОбъектЗадачи;
		НоваяЗадача.ТочкаМаршрутаЗадачи = Выборка.ТочкаМаршрутаЗадачи;
		НоваяЗадача.Записать();
		
		Результат = НоваяЗадача.Ссылка;
		
		Если Выборка.ТипЗапроса = Перечисления.ТипЗапросаСхемы.Завершение Тогда
			//
			СогласованиеОбъект = Выборка.ОбъектЗадачи.ПолучитьОбъект();
			СогласованиеОбъект.Выполнено = Истина;
			СогласованиеОбъект.ДатаЗавершения = ТекущаяДата();
			СогласованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Иначе
		Если НЕ СогласованиеКомандировки.Выполнено Тогда
			//Возможно это первый запуск начнем задачи
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("СогласованиеКомандировки", СогласованиеКомандировки);
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	Последовательность.Ссылка КАК Ссылка,
			               |	Последовательность.НомерСтроки КАК НомерСтроки,
			               |	Последовательность.Идентификатор КАК ТочкаМаршрутаЗадачи,
			               |	Последовательность.ТипЗапроса КАК ТипЗапроса,
			               |	Последовательность.Представление КАК Представление,
			               |	Последовательность.СопровождающийТекст КАК СопровождающийТекст,
			               |	Последовательность.УсловиеПредшественника КАК УсловиеПредшественника,
			               |	Последовательность.Предшественник КАК Предшественник,
			               |	Последовательность.Следующий КАК Следующий,
			               |	СогласованиеКомандировки.Ссылка КАК ОбъектЗадачи
			               |ИЗ
			               |	Документ.СогласованиеКомандировки КАК СогласованиеКомандировки
			               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УсловияСогласованияКомандировки.Последовательность КАК Последовательность
			               |		ПО СогласованиеКомандировки.СхемаСогласования = Последовательность.Ссылка
			               |ГДЕ
			               |	СогласованиеКомандировки.Ссылка = &СогласованиеКомандировки
			               |	И Последовательность.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипЗапросаСхемы.Старт)";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НоваяЗадача = Задачи.ЗадачаКлиента.СоздатьЗадачу();
				НоваяЗадача.Дата = ТекущаяДата();
				НоваяЗадача.ДатаНачала = ТекущаяДата();
				НоваяЗадача.Наименование = ?(ЗначениеЗаполнено(Выборка.СопровождающийТекст),Выборка.СопровождающийТекст, Выборка.Представление); 
				НоваяЗадача.ОбъектЗадачи = Выборка.ОбъектЗадачи;
				НоваяЗадача.ТочкаМаршрутаЗадачи = Выборка.ТочкаМаршрутаЗадачи;
				НоваяЗадача.Записать();
				
				Результат = НоваяЗадача.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАктуальнуюСхемуСогласования(ПараметрыПоиска) Экспорт
	
	Результат = Документы.УсловияСогласованияКомандировки.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", ПараметрыПоиска.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыПоиска.Контрагент);
	Запрос.УстановитьПараметр("Договор", ПараметрыПоиска.Договор);
	Запрос.УстановитьПараметр("Командируемый", ПараметрыПоиска.Командируемый);
	Запрос.Текст = "ВЫБРАТЬ
	               |	УсловияСогласованийСрезПоследних.Период КАК Период,
	               |	УсловияСогласованийСрезПоследних.Регистратор КАК Регистратор,
	               |	УсловияСогласованийСрезПоследних.Партнер КАК Партнер,
	               |	УсловияСогласованийСрезПоследних.Контрагент КАК Контрагент,
	               |	УсловияСогласованийСрезПоследних.Договор КАК Договор,
	               |	УсловияСогласованийСрезПоследних.Командируемый КАК Командируемый,
	               |	50 КАК Приоритет
	               |ПОМЕСТИТЬ ВсеСогласования
	               |ИЗ
	               |	РегистрСведений.УсловияСогласований.СрезПоследних КАК УсловияСогласованийСрезПоследних
	               |ГДЕ
	               |	УсловияСогласованийСрезПоследних.Партнер = &Партнер
	               |	И УсловияСогласованийСрезПоследних.Контрагент = &Контрагент
	               |	И УсловияСогласованийСрезПоследних.Договор = &Договор
	               |	И УсловияСогласованийСрезПоследних.Командируемый = &Командируемый
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УсловияСогласованийСрезПоследних.Период,
	               |	УсловияСогласованийСрезПоследних.Регистратор,
	               |	УсловияСогласованийСрезПоследних.Партнер,
	               |	УсловияСогласованийСрезПоследних.Контрагент,
	               |	УсловияСогласованийСрезПоследних.Договор,
	               |	УсловияСогласованийСрезПоследних.Командируемый,
	               |	40
	               |ИЗ
	               |	РегистрСведений.УсловияСогласований.СрезПоследних КАК УсловияСогласованийСрезПоследних
	               |ГДЕ
	               |	УсловияСогласованийСрезПоследних.Партнер = &Партнер
	               |	И УсловияСогласованийСрезПоследних.Контрагент = &Контрагент
	               |	И УсловияСогласованийСрезПоследних.Договор = &Договор
	               |	И УсловияСогласованийСрезПоследних.Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УсловияСогласованийСрезПоследних.Период,
	               |	УсловияСогласованийСрезПоследних.Регистратор,
	               |	УсловияСогласованийСрезПоследних.Партнер,
	               |	УсловияСогласованийСрезПоследних.Контрагент,
	               |	УсловияСогласованийСрезПоследних.Договор,
	               |	УсловияСогласованийСрезПоследних.Командируемый,
	               |	30
	               |ИЗ
	               |	РегистрСведений.УсловияСогласований.СрезПоследних КАК УсловияСогласованийСрезПоследних
	               |ГДЕ
	               |	УсловияСогласованийСрезПоследних.Партнер = &Партнер
	               |	И УсловияСогласованийСрезПоследних.Контрагент = &Контрагент
	               |	И УсловияСогласованийСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И УсловияСогласованийСрезПоследних.Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	УсловияСогласованийСрезПоследних.Период,
	               |	УсловияСогласованийСрезПоследних.Регистратор,
	               |	УсловияСогласованийСрезПоследних.Партнер,
	               |	УсловияСогласованийСрезПоследних.Контрагент,
	               |	УсловияСогласованийСрезПоследних.Договор,
	               |	УсловияСогласованийСрезПоследних.Командируемый,
	               |	20
	               |ИЗ
	               |	РегистрСведений.УсловияСогласований.СрезПоследних КАК УсловияСогласованийСрезПоследних
	               |ГДЕ
	               |	УсловияСогласованийСрезПоследних.Партнер = &Партнер
	               |	И УсловияСогласованийСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И УсловияСогласованийСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И УсловияСогласованийСрезПоследних.Командируемый = ЗНАЧЕНИЕ(Справочник.Командированные.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ВсеСогласования.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ МаксимальныйПриоритет
	               |ИЗ
	               |	ВсеСогласования КАК ВсеСогласования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеСогласования.Регистратор КАК УсловияСогласованияКомандировки
	               |ИЗ
	               |	ВсеСогласования КАК ВсеСогласования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйПриоритет КАК МаксимальныйПриоритет
	               |		ПО ВсеСогласования.Приоритет = МаксимальныйПриоритет.Приоритет";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.УсловияСогласованияКомандировки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти


//ВЫПИЛИТЬ СТАРЬЕ
Функция УдалитьУслугу(ВхУслуга, ОставитьУслугу = Ложь) 
	
	Результат = Новый Структура("Отказ, СписокУслуг, ЗатронутыеДокументы", Ложь);
	
	ЗатронутыеДокументы = Новый Массив;
	СписокУслуг = Новый Массив;
	
	//
	НачатьТранзакцию();
	Попытка
		
		
		//Описание Услуги
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Услуга", ВхУслуга);
		Запрос.Текст = "ВЫБРАТЬ
		               |	РеквизитыУслуги.Услуга КАК Услуга,
		               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
		               |	ИспользованыеУслуги.Регистратор КАК ДокументВКоторомИспользуется
		               |ПОМЕСТИТЬ ДанныеПоУслугам
		               |ИЗ
		               |	РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
		               |		ПО РеквизитыУслуги.Услуга = ИспользованыеУслуги.Услуга
		               |ГДЕ
		               |	РеквизитыУслуги.Услуга = &Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ДанныеПоУслугам.Услуга,
		               |	ДанныеПоУслугам.ХарактеристикаНоменклатуры,
		               |	ДанныеПоУслугам.ДокументВКоторомИспользуется,
		               |	ПодготовитьДляФормированияДокументов.Расписание,
		               |	ПодготовитьДляФормированияДокументов.ВЗаказе,
		               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного,
		               |	100 КАК Приоритет
		               |ПОМЕСТИТЬ ОписаниеУслуги
		               |ИЗ
		               |	ДанныеПоУслугам КАК ДанныеПоУслугам
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УслугиДляЗаказовИзКорзины КАК УслугиДляЗаказовИзКорзины
		               |		ПО ДанныеПоУслугам.Услуга = УслугиДляЗаказовИзКорзины.ЗаказИзКорзины
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
		               |		ПО ДанныеПоУслугам.Услуга = ПодготовитьДляФормированияДокументов.Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СвязанныеУслуги.УслугаРодитель КАК Услуга,
		               |	СвязанныеУслуги.ВложеннаяУслуга,
		               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
		               |	ИспользованыеУслуги.Регистратор КАК ДокументВКоторомИспользуется
		               |ПОМЕСТИТЬ ДанныеПоУслугам2
		               |ИЗ
		               |	РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
		               |		ПО СвязанныеУслуги.ВложеннаяУслуга = РеквизитыУслуги.Услуга
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
		               |		ПО СвязанныеУслуги.ВложеннаяУслуга = ИспользованыеУслуги.Услуга
		               |ГДЕ
		               |	СвязанныеУслуги.УслугаРодитель = &Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ДанныеПоУслугам.Услуга,
		               |	ДанныеПоУслугам.ВложеннаяУслуга,
		               |	ДанныеПоУслугам.ХарактеристикаНоменклатуры,
		               |	ДанныеПоУслугам.ДокументВКоторомИспользуется,
		               |	ПодготовитьДляФормированияДокументов.Расписание,
		               |	ПодготовитьДляФормированияДокументов.ВЗаказе,
		               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного,
		               |	50 КАК Приоритет
		               |ПОМЕСТИТЬ ОписаниеВложенныхУслуг
		               |ИЗ
		               |	ДанныеПоУслугам2 КАК ДанныеПоУслугам
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УслугиДляЗаказовИзКорзины КАК УслугиДляЗаказовИзКорзины
		               |		ПО ДанныеПоУслугам.ВложеннаяУслуга = УслугиДляЗаказовИзКорзины.ЗаказИзКорзины
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
		               |		ПО ДанныеПоУслугам.ВложеннаяУслуга = ПодготовитьДляФормированияДокументов.Услуга
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ОписаниеУслуги.Услуга,
		               |	ОписаниеУслуги.ХарактеристикаНоменклатуры,
		               |	ОписаниеУслуги.ДокументВКоторомИспользуется,
		               |	ОписаниеУслуги.Расписание,
		               |	ОписаниеУслуги.ВЗаказе,
		               |	ОписаниеУслуги.ЗаказКомандированного,
		               |	ОписаниеУслуги.Приоритет,
		               |	ОписаниеУслуги.Услуга КАК ВложеннаяУслуга
		               |ПОМЕСТИТЬ ДокументыБТ
		               |ИЗ
		               |	ОписаниеУслуги КАК ОписаниеУслуги
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ОписаниеВложенныхУслуг.Услуга,
		               |	ОписаниеВложенныхУслуг.ХарактеристикаНоменклатуры,
		               |	ОписаниеВложенныхУслуг.ДокументВКоторомИспользуется,
		               |	ОписаниеВложенныхУслуг.Расписание,
		               |	ОписаниеВложенныхУслуг.ВЗаказе,
		               |	ОписаниеВложенныхУслуг.ЗаказКомандированного,
		               |	ОписаниеВложенныхУслуг.Приоритет,
		               |	ОписаниеВложенныхУслуг.ВложеннаяУслуга
		               |ИЗ
		               |	ОписаниеВложенныхУслуг КАК ОписаниеВложенныхУслуг
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ДокументыБТ.Услуга,
		               |	ДокументыБТ.ХарактеристикаНоменклатуры,
		               |	ДокументыБТ.ДокументВКоторомИспользуется,
		               |	ДокументыБТ.Расписание,
		               |	ДокументыБТ.ВЗаказе,
		               |	ДокументыБТ.ЗаказКомандированного,
		               |	ДокументыБТ.Приоритет,
		               |	ДокументыБТ.ВложеннаяУслуга,
		               |	ЗаказыКлиентовОбороты.ЗаказКлиента,
		               |	ЗаказыКлиентовОбороты.Регистратор
		               |ИЗ
		               |	ДокументыБТ КАК ДокументыБТ
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Обороты(, , Регистратор, ) КАК ЗаказыКлиентовОбороты
		               |		ПО ДокументыБТ.ХарактеристикаНоменклатуры = ЗаказыКлиентовОбороты.Характеристика
		               |			И ДокументыБТ.ХарактеристикаНоменклатуры.Владелец = ЗаказыКлиентовОбороты.Номенклатура
		               |ГДЕ
		               |	(ЗаказыКлиентовОбороты.Регистратор <> ЗаказыКлиентовОбороты.ЗаказКлиента
		               |			ИЛИ ЗаказыКлиентовОбороты.Регистратор ЕСТЬ NULL )";
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		СсылкаНаТекущийАкт = Документы.АктВыполненныхРабот.ПустаяСсылка();
		СсылкаНаТекущийЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
		СсылкаНаТекущийЗаказКлиентаБТ = Документы.ЗаказКлиентаБТ.ПустаяСсылка();
		СсылкаНаКомандировку = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
		СсылкаНаТекущуюУслугу = Документы.Услуга.ПустаяСсылка();
		
		ДокументыСтруктура = Новый Структура("Акт, ЗаказКлиента, ЗаказКлиентаБТ, Командировка, Услуга", Новый Массив, Новый Массив, Новый Массив, Новый Массив, Новый Массив);
		
		АктОбъект = Неопределено;
		ЗаказКлиента = Неопределено;
		ЗаказКлиентаБТ = Неопределено;
		Командировка = Неопределено;
		Услуга = Неопределено;
		
		Для Каждого СтрокаВыгрузки ИЗ Выгрузка Цикл
			
			Если СсылкаНаТекущийАкт <> СтрокаВыгрузки.Регистратор И ЗначениеЗаполнено(СтрокаВыгрузки.Регистратор) Тогда
				СсылкаНаТекущийАкт = СтрокаВыгрузки.Регистратор;
				АктОбъект = СтрокаВыгрузки.Регистратор.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаТекущийАкт) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаТекущийАкт);
					Если ТипЗнч(АктОбъект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
						ДокументыСтруктура.Акт.Добавить( Новый Структура("Объект, Проводить", АктОбъект, АктОбъект.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(АктОбъект) = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
				СтрокаСУслугой = АктОбъект.Услуги.Найти(СтрокаВыгрузки.ХарактеристикаНоменклатуры, "Характеристика");
				Если СтрокаСУслугой <> НЕопределено Тогда
					АктОбъект.Услуги.Удалить(СтрокаСУслугой);
				КонецЕсли;
			КонецЕсли;
			
			Если СсылкаНаТекущийЗаказКлиента <> СтрокаВыгрузки.ЗаказКлиента И ЗначениеЗаполнено(СтрокаВыгрузки.ЗаказКлиента) Тогда
				СсылкаНаТекущийЗаказКлиента = СтрокаВыгрузки.ЗаказКлиента;
				ЗаказКлиента = СтрокаВыгрузки.ЗаказКлиента.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаТекущийЗаказКлиента) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаТекущийЗаказКлиента);
					Если ТипЗнч(ЗаказКлиента) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
						ДокументыСтруктура.ЗаказКлиента.Добавить( Новый Структура("Объект, Проводить", ЗаказКлиента, ЗаказКлиента.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ЗаказКлиента) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
				СтрокаСУслугой = ЗаказКлиента.Товары.Найти(СтрокаВыгрузки.ХарактеристикаНоменклатуры, "Характеристика");
				Если СтрокаСУслугой <> НЕопределено Тогда
					ЗаказКлиента.Товары.Удалить(СтрокаСУслугой);
				КонецЕсли;
			КонецЕсли;
			
			Если СсылкаНаТекущийЗаказКлиентаБТ <> СтрокаВыгрузки.ВЗаказе И ЗначениеЗаполнено(СтрокаВыгрузки.ВЗаказе) Тогда
				СсылкаНаТекущийЗаказКлиентаБТ = СтрокаВыгрузки.ВЗаказе;
				ЗаказКлиентаБТ = СтрокаВыгрузки.ВЗаказе.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаТекущийЗаказКлиентаБТ) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаТекущийЗаказКлиентаБТ);
					Если ТипЗнч(ЗаказКлиентаБТ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда
						ДокументыСтруктура.ЗаказКлиентаБТ.Добавить( Новый Структура("Объект, Проводить", ЗаказКлиентаБТ, ЗаказКлиентаБТ.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(ЗаказКлиентаБТ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда
				СтрокаСУслугой = ЗаказКлиентаБТ.Товары.Найти(СтрокаВыгрузки.ВложеннаяУслуга, "Услуга");
				Если СтрокаСУслугой <> НЕопределено Тогда
					ЗаказКлиентаБТ.Товары.Удалить(СтрокаСУслугой);
				КонецЕсли;
			КонецЕсли;
			
			Если СсылкаНаКомандировку <> СтрокаВыгрузки.ДокументВКоторомИспользуется И ЗначениеЗаполнено(СтрокаВыгрузки.ДокументВКоторомИспользуется) Тогда
				СсылкаНаКомандировку = СтрокаВыгрузки.ДокументВКоторомИспользуется;
				Командировка = СтрокаВыгрузки.ДокументВКоторомИспользуется.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаКомандировку) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаКомандировку);
					Если ТипЗнч(Командировка) = Тип("ДокументОбъект.ЗаказКомандированногоБТ") Тогда
						ДокументыСтруктура.Командировка.Добавить( Новый Структура("Объект, Проводить", Командировка, Командировка.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Командировка) = Тип("ДокументОбъект.ЗаказКомандированногоБТ") Тогда
				СтрокаСУслугой = Командировка.УслугиДляКлиента.Найти(СтрокаВыгрузки.ВложеннаяУслуга, "Услуга");
				Если СтрокаСУслугой <> НЕопределено Тогда
					Командировка.УслугиДляКлиента.Удалить(СтрокаСУслугой);
				КонецЕсли;
			КонецЕсли;
			
			Если СсылкаНаТекущуюУслугу <> СтрокаВыгрузки.ВложеннаяУслуга И ЗначениеЗаполнено(СтрокаВыгрузки.ВложеннаяУслуга) Тогда
				СсылкаНаУслуга = СтрокаВыгрузки.ВложеннаяУслуга;
				Услуга = СтрокаВыгрузки.ВложеннаяУслуга.ПолучитьОбъект();
				Если ЗатронутыеДокументы.Найти(СсылкаНаУслуга) = Неопределено Тогда
					ЗатронутыеДокументы.Добавить(СсылкаНаУслуга);
					Если ТипЗнч(Услуга) = Тип("ДокументОбъект.Услуга") Тогда
						ДокументыСтруктура.Услуга.Добавить( Новый Структура("Объект, Проводить", Услуга, Услуга.Проведен) );
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТипЗнч(Услуга) = Тип("ДокументОбъект.Услуга") Тогда
				Услуга.Командируемые.Очистить();	
				Если Услуга.Ссылка <> ВхУслуга Тогда
					Услуга.ПометкаУдаления = Истина;
				КонецЕсли;
			КонецЕсли;
			
			
		КонецЦикла;	
		
		
		
		
		
		//ЗаказКлиента, ЗаказКлиентаБТ, Командировка, Услуга
		Для Каждого Акт ИЗ ДокументыСтруктура.Акт Цикл
			Акт.Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		Для Каждого ЗаказКлиента ИЗ ДокументыСтруктура.ЗаказКлиента Цикл
			ЗаказКлиента.Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		Для Каждого ЗаказКлиентаБТ ИЗ ДокументыСтруктура.ЗаказКлиентаБТ Цикл
			ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		Для Каждого Командировка ИЗ ДокументыСтруктура.Командировка Цикл
			Командировка.Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
		Для Каждого Услуга ИЗ ДокументыСтруктура.Услуга Цикл
			Если НЕ ОставитьУслугу Тогда
				Услуга.Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			ЗапросМЗ = Новый Запрос;
			ЗапросМЗ.УстановитьПараметр("Услуга", Услуга.Объект.Ссылка);
			ЗапросМЗ.Текст = "ВЫБРАТЬ
			                 |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного,
			                 |	ПодготовитьДляФормированияДокументов.Услуга,
			                 |	ПодготовитьДляФормированияДокументов.Расписание,
			                 |	ПодготовитьДляФормированияДокументов.ВЗаказе
			                 |ИЗ
			                 |	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
			                 |ГДЕ
			                 |	ПодготовитьДляФормированияДокументов.Услуга = &Услуга";
			Выборка = ЗапросМЗ.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл				
				МЗ = РегистрыСведений.ПодготовитьДляФормированияДокументов.СоздатьМенеджерЗаписи();
				МЗ.Услуга = Выборка.Услуга;			
				//МЗ.ЗаказКомандированного = Выборка.ЗаказКомандированного;
				МЗ.Прочитать();
				Если МЗ.Выбран() Тогда
					МЗ.Удалить();
				КонецЕсли;
			КонецЦикла;			
			
		КонецЦикла;
		
		
		
		Для Каждого Услуга ИЗ ДокументыСтруктура.Услуга Цикл
			Если Услуга.Проводить И Услуга.Объект.ПометкаУдаления = Ложь Тогда
				Услуга.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Услуга.Объект.Записать(РежимЗаписиДокумента.Запись);				
			КонецЕсли
		КонецЦикла;
		Для Каждого Командировка ИЗ ДокументыСтруктура.Командировка Цикл
			Если Командировка.Проводить И Командировка.Объект.ПометкаУдаления = Ложь Тогда
				Командировка.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Командировка.Объект.Записать(РежимЗаписиДокумента.Запись);				
			КонецЕсли
		КонецЦикла;
		Для Каждого ЗаказКлиентаБТ ИЗ ДокументыСтруктура.ЗаказКлиентаБТ Цикл
			Если ЗаказКлиентаБТ.Проводить И ЗаказКлиентаБТ.Объект.ПометкаУдаления = Ложь Тогда
				ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаказКлиентаБТ.Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли
		КонецЦикла;
		Для Каждого ЗаказКлиента ИЗ ДокументыСтруктура.ЗаказКлиента Цикл
			Если ЗаказКлиента.Проводить И ЗаказКлиента.Объект.ПометкаУдаления = Ложь Тогда
				ЗаказКлиента.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ЗаказКлиента.Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли
		КонецЦикла;
		Для Каждого Акт ИЗ ДокументыСтруктура.Акт Цикл
			Если Акт.Проводить И Акт.Объект.ПометкаУдаления = Ложь Тогда
				Акт.Объект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Акт.Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли
		КонецЦикла;
		
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
