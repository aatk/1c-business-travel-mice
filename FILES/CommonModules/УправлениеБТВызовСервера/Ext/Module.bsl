
#Область ВспомогательныеФункции

Функция ПолучитьВерисиюБТ() Экспорт
	Возврат "3.1.2.10";
КонецФункции

Функция ИдентификаторБД() Экспорт
	Возврат СтрЗаменить(НРег(MD5ХешСтрока(СтрокаСоединенияИнформационнойБазы())), " ","");
КонецФункции

Функция ПреобразоватьвСистему(Число10, Система)
	
	Если Система > 36 или Система < 2 тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 Цикл
		РезДеления = Число10/Система;
		ЧислоСистема = Цел(РезДеления);
		ОстатокОтДеления = Число10 - Система*(ЧислоСистема);
		СтрокаСистема = Сред(СтрокаЗначений, ОстатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - Цел(СтрДлина(СтрокаСистема)/2)*2;
	Если Нечётное тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции

Функция ПреобразоватьКURL(Стр) Экспорт
	
	Итог = КодироватьСтроку(Стр, СпособКодированияСтроки.КодировкаURL); 
	Возврат Итог;
	
КонецФункции

Функция ВJSON(Значение) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение); // сериализует ОтветМассив в формат JSON
	JSON = ЗаписьJSON.Закрыть();
	Возврат JSON;
КонецФункции

Функция ИзJSON(JSON, ВСтруктуру = Истина) Экспорт
	
	Если ЗначениеЗаполнено(JSON) Тогда
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(JSON);
		СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON, НЕ ВСтруктуру);
		ЧтениеJSON.Закрыть();
	Иначе
		СтруктураЖСОН = Новый Структура();
	КонецЕсли;
	
	Возврат СтруктураЖСОН;	
КонецФункции

Функция ТаблицаВМассив(ТаблицаЗ) Экспорт
	
	Массив = Новый Массив;
	Для Каждого СтрокаТЗ ИЗ ТаблицаЗ Цикл	
		НоваяСтрока = Новый Структура; 
		Для Каждого КолонкаТЗ ИЗ ТаблицаЗ.Колонки Цикл
			НоваяСтрока.Вставить(КолонкаТЗ.Имя, СтрокаТЗ[КолонкаТЗ.Имя]); 
		КонецЦикла;		
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат Массив; 
КонецФункции

Функция МассивВТаблицу(МассивСтруктур, ТипыКолонок = Неопределено) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	СтрокаТЗ = МассивСтруктур[0];
	Для Каждого КлючЗначение ИЗ СтрокаТЗ Цикл
		//ТипыКолонок = Новый Структура;
		Если ТипЗнч(ТипыКолонок) = Тип("Структура") И ТипыКолонок.Свойство(КлючЗначение.Ключ) Тогда
			ТаблицаЗначений.Колонки.Добавить(КлючЗначение.Ключ, ТипыКолонок[КлючЗначение.Ключ]);
		Иначе
			ТаблицаЗначений.Колонки.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого СтрокаТЗ ИЗ МассивСтруктур Цикл		
		СтрокаТЗСтруктура = УправлениеБТВызовСервера.СоответствиеВСтруктуру(СтрокаТЗ);
		НоваяСтрока = ТаблицаЗначений.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗСтруктура,); 
	КонецЦикла;
	
	Возврат ТаблицаЗначений; 
КонецФункции

Функция JSONВФильтр(ДеревоПравил) Экспорт

	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку(ДеревоПравил);
	ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Filter");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
	ОбъектXDTO.Проверить();
	ДЗ = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);

	Возврат ДЗ;
КонецФункции

Функция MD5ХешСтрока(тСтрока) Экспорт
	
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
   	Хеш.Добавить(тСтрока);
	Возврат Хеш.ХешСумма;
	
КонецФункции

Функция MD5ХешФайл(тСтрока) Экспорт
   Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
 
   Хеш.ДобавитьФайл(тСтрока);
 
   Возврат Хеш.ХешСумма; 
КонецФункции

Функция md5Стандарт(СтрокаМД5) Экспорт
	
	Возврат СтрЗаменить(НРег(СтрокаМД5), " ", "");
	
КонецФункции

Функция md5(тСтрока) Экспорт
	
	СтрокаМД5 = MD5ХешСтрока(тСтрока);
	Возврат СтрЗаменить(НРег(СтрокаМД5), " ", "");
	
КонецФункции

Функция Значение(Источник, Поле) Экспорт
	Возврат Источник[Поле]
КонецФункции	


Функция ЭтоАнглийскоеСлово(ВхСлово) Экспорт
	Результат = Ложь;
	СловоИсх = ТранслитерацияENRU(ВхСлово);
	Если СловоИсх = ВхСлово Тогда
		Результат = Истина;
	КонецЕсли;
	Возврат Результат
КонецФункции

Функция ЗаменитьСимволы (Текст, Источник, Замена)
	
	Результат = Текст;
	Для Сч = 1 По СтрДлина(Источник) Цикл
		Результат = СтрЗаменить(Результат,Сред(Источник,Сч,1),Сред(Замена,Сч,1));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ТранслитерацияRUEN(ВхСлово) Экспорт
	
	Слово = ВхСлово;
 	Слово=СтрЗаменить(Слово,"е","ye");
	Слово=СтрЗаменить(Слово,"ё","yo");
	Слово=СтрЗаменить(Слово,"ж","zh");
	Слово=СтрЗаменить(Слово,"х","kh");
	Слово=СтрЗаменить(Слово,"ц","ts");
	Слово=СтрЗаменить(Слово,"ч","ch");
	Слово=СтрЗаменить(Слово,"ш","sh");
	Слово=СтрЗаменить(Слово,"щ","shch");
	Слово=СтрЗаменить(Слово,"ъ","");
	Слово=СтрЗаменить(Слово,"ь","");	
    Слово=СтрЗаменить(Слово,"ю","yu");
	Слово=СтрЗаменить(Слово,"я","ya");
	
	Слово=СтрЗаменить(Слово,"Е","YE");
	Слово=СтрЗаменить(Слово,"Ё","YO");
	Слово=СтрЗаменить(Слово,"Ж","ZH");
	Слово=СтрЗаменить(Слово,"Х","KH");
	Слово=СтрЗаменить(Слово,"Ц","TS");
	Слово=СтрЗаменить(Слово,"Ч","CH");
	Слово=СтрЗаменить(Слово,"Ш","SH");
	Слово=СтрЗаменить(Слово,"Щ","SHCH");
	Слово=СтрЗаменить(Слово,"Ъ","");
	Слово=СтрЗаменить(Слово,"Ь","");	
    Слово=СтрЗаменить(Слово,"Ю","YU");
	Слово=СтрЗаменить(Слово,"Я","YA");
	
	Слово=ЗаменитьСимволы(Слово, "АБВГДЕЗИЙКЛМНОПРСТУФЫЭабвгдезийклмнопрстуфыэ", "ABVGDEZIJKLMNOPRSTUFYEabvgdezijklmnoprstufye");
	Возврат Слово;
КонецФункции

Функция ТранслитерацияENRU(ВхСлово) Экспорт
	
	Слово = ВхСлово;
    Слово=СтрЗаменить(Слово,"ye","е");
	Слово=СтрЗаменить(Слово,"yo","ё");
	Слово=СтрЗаменить(Слово,"zh","ж");
	Слово=СтрЗаменить(Слово,"kh","х");
	Слово=СтрЗаменить(Слово,"ts","ц");
	Слово=СтрЗаменить(Слово,"ch","ч");
	Слово=СтрЗаменить(Слово,"sh","ш");
	Слово=СтрЗаменить(Слово,"shch","щ");
	Слово=СтрЗаменить(Слово,"yu","ю");
    Слово=СтрЗаменить(Слово,"yu","ю");
	Слово=СтрЗаменить(Слово,"ya","я");
	Слово=СтрЗаменить(Слово,"ja","я");
	
	Слово=СтрЗаменить(Слово,"YE","Е");
	Слово=СтрЗаменить(Слово,"YO","Ё");
	Слово=СтрЗаменить(Слово,"ZH","Ж");
	Слово=СтрЗаменить(Слово,"KH","Х");
	Слово=СтрЗаменить(Слово,"TS","Ц");
	Слово=СтрЗаменить(Слово,"CH","Ч");
	Слово=СтрЗаменить(Слово,"SH","Ш");
	Слово=СтрЗаменить(Слово,"SHCH","Щ");
	Слово=СтрЗаменить(Слово,"JU","Ю");
    Слово=СтрЗаменить(Слово,"YU","Ю");
	Слово=СтрЗаменить(Слово,"YA","Я");
    Слово=СтрЗаменить(Слово,"JA","Я");
	
	Слово=ЗаменитьСимволы(Слово, "ABVGDEZIJKLMNOPRSTUFYEabvgdezijklmnoprstufye", "АБВГДЕЗИЙКЛМНОПРСТУФЫЭабвгдезийклмнопрстуфыэ");
	Возврат Слово;
КонецФункции

Функция СменитьРаскладкуRUEN(ВхСлово) Экспорт
	
	Слово = ВхСлово;	
	Слово=ЗаменитьСимволы(Слово, "йцукенгшщзхъ\фывапролджэячсмитьбю.ЙЦУКЕНГШЩЗХЪ\ФЫВАПРОЛДЖЭЯЧСМИТЬБЮ.", "qwertyuiop[]\asdfghjkl;'zxcvbnm,./QWERTYUIOP[]\ASDFGHJKL;'ZXCVBNM,./");
	Возврат Слово;
КонецФункции

Функция СменитьРаскладкуENRU(ВхСлово) Экспорт
	
	Слово = ВхСлово;	
	Слово=ЗаменитьСимволы(Слово, "qwertyuiop[]\asdfghjkl;'zxcvbnm,./QWERTYUIOP[]\ASDFGHJKL;'ZXCVBNM,./", "йцукенгшщзхъ\фывапролджэячсмитьбю.ЙЦУКЕНГШЩЗХЪ\ФЫВАПРОЛДЖЭЯЧСМИТЬБЮ.");
	Возврат Слово;
КонецФункции

Функция Маппинг(ТипМаппинга, Значение) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипМаппинга", ТипМаппинга);
	Запрос.УстановитьПараметр("ЗначениеПоиска", Значение);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Маппинг.ТипМаппинга КАК ТипМаппинга,
	               |	Маппинг.ЗначениеПоиска КАК ЗначениеПоиска,
	               |	Маппинг.Результат КАК Результат
	               |ИЗ
	               |	РегистрСведений.Маппинг КАК Маппинг
	               |ГДЕ
	               |	Маппинг.ТипМаппинга = &ТипМаппинга
	               |	И Маппинг.ЗначениеПоиска = &ЗначениеПоиска";
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПерваяБольшаяБуква(Слово) Экспорт
	
	Слово = Врег(Лев(Слово,1)) + НРег(Сред(Слово,2));
	Возврат Слово;
	
КонецФункции

Функция ДобавитьТабыВJSON(СтрокаЖСОН) Экспорт
	ОбработанныйСтрокаЖСОН = "";
	
	МассивСтрок = СтрРазделить(СтрокаЖСОН, Символы.ПС);
	КоличествоТабов = 0;
	Для Каждого СтрокаМассива ИЗ МассивСтрок Цикл
		Если Лев(СокрЛП(СтрокаМассива),1) = "}" ИЛИ Лев(СокрЛП(СтрокаМассива),1) = "]"  ИЛИ
			Прав(СокрЛП(СтрокаМассива),1) = "}" ИЛИ Прав(СокрЛП(СтрокаМассива),1) = "]" Тогда
			КоличествоТабов = КоличествоТабов - 1;
		КонецЕсли;
		
		СтрокаТест = "";
		Для К = 1 ПО КоличествоТабов Цикл
			СтрокаТест = СтрокаТест+Символы.Таб;
		КонецЦикла;
		СтрокаТест = СтрокаТест + СтрокаМассива;
		
		ОбработанныйСтрокаЖСОН = ОбработанныйСтрокаЖСОН + СтрокаТест + Символы.ПС;
		
		Если Лев(СокрЛП(СтрокаМассива),1) = "{" ИЛИ Лев(СокрЛП(СтрокаМассива),1) = "["  ИЛИ
			Прав(СокрЛП(СтрокаМассива),1) = "{" ИЛИ Прав(СокрЛП(СтрокаМассива),1) = "[" Тогда
			КоличествоТабов = КоличествоТабов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбработанныйСтрокаЖСОН;	
КонецФункции

Функция Base64Кодировать(ОбычнаяСтрока) Экспорт
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.УстановитьТелоИзСтроки(ОбычнаяСтрока);
	ДД = HTTPЗапрос.ПолучитьТелоКакДвоичныеДанные();
	Возврат Base64Строка(ДД); 
	
КонецФункции

Функция Base64Раскодировать(Строка64) Экспорт
	
	ДД = Base64Значение(Строка64);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДД);
	Возврат HTTPЗапрос.ПолучитьТелоКакСтроку(); 
	
КонецФункции

Функция Свойство(СтруктураИлиСоответствие, Ключ) Экспорт
	//	
	Результат = Ложь;
	Если ТипЗнч(СтруктураИлиСоответствие) = Тип("Структура") Тогда
		Результат = СтруктураИлиСоответствие.Свойство(Ключ);
	ИначеЕсли ТипЗнч(СтруктураИлиСоответствие) = Тип("Соответствие") Тогда
		Значение = СтруктураИлиСоответствие.Получить(Ключ);
		Если Значение <> Неопределено Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьЗначение(СтруктураИлиСоответствие, Ключ) Экспорт
	//	
	Результат = Неопределено;
	Если ТипЗнч(СтруктураИлиСоответствие) = Тип("Структура") Тогда
		 СтруктураИлиСоответствие.Свойство(Ключ, Результат);
	ИначеЕсли ТипЗнч(СтруктураИлиСоответствие) = Тип("Соответствие") Тогда
		Результат = СтруктураИлиСоответствие.Получить(Ключ);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СоответствиеВСтруктуру(ВхСоответствие) Экспорт
	
	ЖСОН = ВJSON(ВхСоответствие);
	Попытка 
		НоваяСтруктура = ИзJSON(ЖСОН); 	
	Исключение
	КонецПопытки;
	
	//НоваяСтруктура = Новый Структура;
	//Для Каждого КлючЗначение ИЗ ВхСоответствие Цикл
	//	Попытка 
	//		НоваяСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение); 	
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;

	Возврат НоваяСтруктура;
КонецФункции

#КонецОбласти



Функция ИнформацияПоУслуге(ОбъектЗагрузки, Данные) Экспорт
	
	RESTЗапрос = ОбъектЗагрузки.RESTЗапрос;  
	URL = ОбъектЗагрузки.СерверШины.URL;
	РЕСТ = Новый HTTPЗапрос("/"+RESTЗапрос+"/getinfo/");  //"https://"+URL+
	РЕСТ.УстановитьТелоИзСтроки(Данные);
	
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("POST", РЕСТ);  //HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда
		//
		Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	Иначе
		//	
		ВыхРезультат = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат ВыхРезультат;
КонецФункции

Функция ЗагрузитьДанныеВУслугу(Знач ВхДанные, Услуга, НастройкаДляЗагрузки, Тест = Ложь) Экспорт
	
	ИсхУслуги = Новый Массив;
	ИсхЖСОН = "";	
	Результат = УправлениеБТСервер.ЗагрузитьДанныеВУслугу(ВхДанные, Услуга, НастройкаДляЗагрузки, Тест, ИсхЖСОН);
	
	Если Результат.Результат Тогда
		Услуги = Результат.Объекты;
		Если Услуги.Количество() > 0 Тогда
			Для Каждого УслугаОбъект ИЗ Услуги Цикл				
				ИсхУслуги.Добавить(УслугаОбъект.Ссылка);
				md5 = ДобавитьКУслугеИсходныйФайл(УслугаОбъект.Ссылка, ВхДанные); 
				УстановитьФайлСНастройкойВОбъект(УслугаОбъект.Ссылка, НастройкаДляЗагрузки, md5);

				Если ЗначениеЗаполнено(ИсхЖСОН) Тогда
					ДобавитьКУслугеИсходныйФайл(УслугаОбъект.Ссылка, ИсхЖСОН, "json.file");
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	                                           
	Возврат Новый Структура("Результат, Объекты", Результат.Результат, ИсхУслуги);
	
КонецФункции



Функция ПолучитьСуммуНДС(Цена, СтавкаНДС, ВключаяНДС = Ложь) Экспорт
	СуммаНДС = 0;
	
	Если ТипЗнч(СтавкаНДС) = Тип("СправочникСсылка.СтавкиНДСБТ") Тогда
		//
		Если ВключаяНДС Тогда
			//СтавкаНДС = Справочники.СтавкиНДСБТ.ПустаяСсылка();
			Если СтавкаНДС.СуммаВключаетНДС Тогда
				СуммаНДС = Цена / 100 * СтавкаНДС.СтавкаНДСЧислом; 				
			Иначе
				СуммаНДС = Цена / (100 + СтавкаНДС.СтавкаНДСЧислом) * СтавкаНДС.СтавкаНДСЧислом;				
			КонецЕсли;
		Иначе
			//СтавкаНДС = Справочники.СтавкиНДСБТ.ПустаяСсылка();
			Если СтавкаНДС.СуммаВключаетНДС Тогда
				СуммаНДС = Цена / (100 + СтавкаНДС.СтавкаНДСЧислом) * СтавкаНДС.СтавкаНДСЧислом;				
			Иначе
				СуммаНДС = Цена / 100 * СтавкаНДС.СтавкаНДСЧислом; 				
			КонецЕсли;
		КонецЕсли;		
	Иначе
		Если ВключаяНДС Тогда
			Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СуммаНДС = Цена/118*18;
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СуммаНДС = Цена/110*10; 
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
				СуммаНДС = Цена*0.18; 
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
				СуммаНДС = Цена*0.10; 
			КонецЕсли;
		Иначе
			Если СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
				СуммаНДС = Цена*0.18;
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
				СуммаНДС = Цена*0.10; 
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
				СуммаНДС = Цена/118*18; 
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
				СуммаНДС = Цена/110*10; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаНДС;
КонецФункции


Функция ДобавитьКУслугеИсходныйФайл(Ссылка, ВхДанные, ИмяФайла = "source.file") Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		
		Если ТипЗнч(ВхДанные) = Тип("Строка") Тогда 
			md5 = MD5ХешСтрока(ВхДанные);
		Иначе
			md5 = MD5ХешСтрока(ВхДанные.ИсходнаяМаска);			
		КонецЕсли;
		
		md5lite = НРег(СтрЗаменить(md5, " ", "")); 
		Результат = md5lite;
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ФайлыДляОтправкиВОблако.Объект,
		               |	ФайлыДляОтправкиВОблако.ИмяФайла,
		               |	ФайлыДляОтправкиВОблако.ТипВложения,
		               |	ФайлыДляОтправкиВОблако.GUID
		               |ИЗ
		               |	РегистрСведений.ФайлыДляОтправкиВОблако КАК ФайлыДляОтправкиВОблако
		               |ГДЕ
		               |	ФайлыДляОтправкиВОблако.Объект = &Объект
		               |	И ФайлыДляОтправкиВОблако.ИмяФайла = &ИмяФайла
		               |	И ФайлыДляОтправкиВОблако.ТипВложения = ЗНАЧЕНИЕ(Перечисление.ТипыВложенныхФайлов.Системный)
		               |	И ФайлыДляОтправкиВОблако.md5 = &GUID";
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
		Запрос.УстановитьПараметр("GUID", md5lite);
		Запрос.УстановитьПараметр("Объект", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда			
			ВрИмяФайла = ПолучитьИмяВременногоФайла("post");
			
			Запрос = Новый HTTPЗапрос;
			Запрос.УстановитьТелоИзСтроки(ВхДанные);
			ДД = Запрос.ПолучитьТелоКакДвоичныеДанные();
						
			Адрес = ПоместитьВоВременноеХранилище(ДД);
			ПоставитьВОчередьФайл(Ссылка, Адрес, ИмяФайла, Перечисления.ТипыВложенныхФайлов.Системный);
			УдалитьИзВременногоХранилища(Адрес);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФайлИзОблака(MD5) Экспорт
	
	ВыхРезультат = Ложь;
	
	Если ЗначениеЗаполнено(MD5) Тогда
		СерверШины = Константы.СерверШиныПредприятия.Получить();
		
		URL = СерверШины.URL;
		РЕСТ = Новый HTTPЗапрос("/cloud/download/"+MD5+"/temp/"); //"https://"+URL+
		
		Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТ); // HTTP/1.1
		Если Результат.КодСостояния = 500 Тогда
			//
			Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Иначе
			//	
			ВыхРезультат = Результат.ПолучитьТелоКакДвоичныеДанные()
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыхРезультат;	
	
КонецФункции

Функция СохранитьФайлВОблаке(ИмяФайла, Данные) Экспорт
	
	СерверШины = Константы.СерверШиныПредприятия.Получить();
	
	ВыхРезультат = Ложь;
	URL = СерверШины.URL;
	РЕСТ = Новый HTTPЗапрос("/cloud/upload/"+ИмяФайла); //"https://"+URL+
	РЕСТ.УстановитьТелоИзДвоичныхДанных(Данные);
	
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("POST", РЕСТ);  // HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда
		//
		Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	Иначе
		//	
		ЖСОН = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ЖСОН);
		ВыхРезультат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	КонецЕсли;
	
	Возврат ВыхРезультат;	
	
КонецФункции

Функция УдалитьФайлВОблаке(MD5) Экспорт
	
	ВыхРезультат = Ложь;
	
	Если ЗначениеЗаполнено(MD5) Тогда
		СерверШины = Константы.СерверШиныПредприятия.Получить();
		
		URL = СерверШины.URL;
		РЕСТ = Новый HTTPЗапрос("/cloud/delete/"+MD5); //"https://"+URL+
		
		Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		Результат = Соединение.ВызватьHTTPМетод("DELETE", РЕСТ);  // HTTP/1.1
		Если Результат.КодСостояния = 500 Тогда
			//
			Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		Иначе
			//	
			ЖСОН = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
			
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(ЖСОН);
			ВыхРезультат = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыхРезультат;	
	
КонецФункции

Процедура ПоставитьВОчередьФайл(Ссылка, АдресФайла, ИмяФайла, ТипВложения = Неопределено) Экспорт

	Вложение = ?(ТипВложения = Неопределено, Перечисления.ТипыВложенныхФайлов.Прочее, ТипВложения);
	ДД = ПолучитьИзВременногоХранилища(АдресФайла);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДД);
	тСтрока = HTTPЗапрос.ПолучитьТелоКакСтроку(); 	
	MD5 = MD5ХешСтрока(тСтрока);
	
	ЗагруженоВОблако = Ложь;
	Попытка
		ЗагруженоВОблако = СохранитьФайлВОблаке(ИмяФайла, ДД);
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФайлыДляОтправкиВОблако.Период,
	               |	ФайлыДляОтправкиВОблако.GUID,
	               |	ФайлыДляОтправкиВОблако.Объект,
	               |	ФайлыДляОтправкиВОблако.ИмяФайла,
	               |	ФайлыДляОтправкиВОблако.Отправлено,
	               |	ФайлыДляОтправкиВОблако.ДД,
	               |	ФайлыДляОтправкиВОблако.md5,
	               |	ФайлыДляОтправкиВОблако.ТипВложения
	               |ИЗ
	               |	РегистрСведений.ФайлыДляОтправкиВОблако КАК ФайлыДляОтправкиВОблако
	               |ГДЕ
	               |	ФайлыДляОтправкиВОблако.GUID = &GUID
	               |	И ФайлыДляОтправкиВОблако.Объект = &Объект";
	Запрос.УстановитьПараметр("GUID", Строка(MD5));
	Запрос.УстановитьПараметр("Объект", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		МЗ = РегистрыСведений.ФайлыДляОтправкиВОблако.СоздатьМенеджерЗаписи();
		МЗ.Период = ТекущаяДата();
		МЗ.GUID = MD5;//Новый УникальныйИдентификатор();
		МЗ.Объект = Ссылка;
		Если ЗагруженоВОблако <> Ложь Тогда
			МЗ.Отправлено = Истина;
			МЗ.md5 = ЗагруженоВОблако.id; 
		Иначе
			МЗ.ДД = Новый ХранилищеЗначения(ДД);
		КонецЕсли;
		МЗ.ИмяФайла = ИмяФайла;
		МЗ.ТипВложения = Вложение;
		МЗ.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры






Функция ПолучитьЗначенияТЧ(Источник) Экспорт
	ТЧ = Новый Массив;
	
	Для Каждого СтрокаИст ИЗ Источник.Товары Цикл
		
		НоваяСтрока = Новый Структура("Номенклатура, Характеристика, КоличествоУпаковок, Цена, СтавкаНДС, СуммаНДС, СуммаСНДС, Содержание",
			СтрокаИст.Номенклатура,
			СтрокаИст.Характеристика,
			1,
			СтрокаИст.Цена,
			СтрокаИст.СтавкаНДС, 
			СтрокаИст.СуммаНДС,
			СтрокаИст.СуммаСНДС,
			СтрокаИст.Содержание
		);			
		ТЧ.Добавить(НоваяСтрока);
			
	КонецЦикла;
	
	Возврат ТЧ;
КонецФункции	

Функция ПолучитьХарактеристику(Услуга) Экспорт
	Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ОтборПоУслуге = Новый Структура("Услуга", Услуга);
	РезультатОтбора = РегистрыСведений.РеквизитыУслуги.Получить(ОтборПоУслуге);
	РезультатОтбора.Свойство("ХарактеристикаНоменклатуры", Результат);
	Возврат Результат;
КонецФункции

Функция ПолучитьСозданоСНастройкой(Услуга) Экспорт
	Результат = Справочники.НастройкиЗагрузокУслуг.ПустаяСсылка();
	ОтборПоУслуге = Новый Структура("Услуга", Услуга);
	РезультатОтбора = РегистрыСведений.РеквизитыУслуги.Получить(ОтборПоУслуге);
	РезультатОтбора.Свойство("СозданоСНастройкой", Результат);
	Возврат Результат;
КонецФункции


Функция ДокументСформированНаУслуги(МассивУслуг) Экспорт
	//
	Если ТипЗнч(МассивУслуг) = Тип("Массив") Тогда
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуги", МассивУслуг);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
	               |	РеквизитыУслуги.Услуга
	               |ПОМЕСТИТЬ Характеристики1
	               |ИЗ
	               |	РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
	               |ГДЕ
	               |	РеквизитыУслуги.Услуга В(&Услуги)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыКлиентовОстаткиИОбороты.ЗаказКлиента,
	               |	ЗаказыКлиентовОстаткиИОбороты.Номенклатура,
	               |	ЗаказыКлиентовОстаткиИОбороты.Характеристика,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.ЗаказаноНачальныйОстаток) КАК ЗаказаноНачальныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.ЗаказаноКонечныйОстаток) КАК ЗаказаноКонечныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.ЗаказаноОборот) КАК ЗаказаноОборот,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.ЗаказаноПриход) КАК ЗаказаноПриход,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.ЗаказаноРасход) КАК ЗаказаноРасход,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.КОформлениюНачальныйОстаток) КАК КОформлениюНачальныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.КОформлениюКонечныйОстаток) КАК КОформлениюКонечныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.КОформлениюОборот) КАК КОформлениюОборот,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.КОформлениюПриход) КАК КОформлениюПриход,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.КОформлениюРасход) КАК КОформлениюРасход,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.СуммаОборот) КАК СуммаОборот,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.СуммаПриход) КАК СуммаПриход,
	               |	СУММА(ЗаказыКлиентовОстаткиИОбороты.СуммаРасход) КАК СуммаРасход
	               |ПОМЕСТИТЬ Обороты
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
	               |			,
	               |			,
	               |			,
	               |			,
	               |			Характеристика В
	               |				(ВЫБРАТЬ
	               |					Характеристики1.ХарактеристикаНоменклатуры
	               |				ИЗ
	               |					Характеристики1)) КАК ЗаказыКлиентовОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказыКлиентовОстаткиИОбороты.ЗаказКлиента,
	               |	ЗаказыКлиентовОстаткиИОбороты.Номенклатура,
	               |	ЗаказыКлиентовОстаткиИОбороты.Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Характеристики1.ХарактеристикаНоменклатуры,
	               |	Характеристики1.Услуга,
	               |	Обороты.ЗаказКлиента,
	               |	Обороты.Номенклатура,
	               |	Обороты.Характеристика,
	               |	Обороты.ЗаказаноНачальныйОстаток,
	               |	Обороты.ЗаказаноКонечныйОстаток,
	               |	Обороты.ЗаказаноОборот,
	               |	Обороты.ЗаказаноПриход,
	               |	Обороты.ЗаказаноРасход,
	               |	Обороты.КОформлениюНачальныйОстаток,
	               |	Обороты.КОформлениюКонечныйОстаток,
	               |	Обороты.КОформлениюОборот,
	               |	Обороты.КОформлениюПриход,
	               |	Обороты.КОформлениюРасход,
	               |	Обороты.СуммаНачальныйОстаток,
	               |	Обороты.СуммаКонечныйОстаток,
	               |	Обороты.СуммаОборот,
	               |	Обороты.СуммаПриход,
	               |	Обороты.СуммаРасход
	               |ИЗ
	               |	Характеристики1 КАК Характеристики1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	               |		ПО Характеристики1.ХарактеристикаНоменклатуры = Обороты.Характеристика";
	
КонецФункции



Функция ЗагрузитьСписокНаСервере(Сервер, ДатаВремяЗапроса, ОбъектЗагрузки) Экспорт
	ОбъектЖСОН = Новый Массив;
	
	RESTЗапрос = ОбъектЗагрузки.RESTЗапрос;  
	URL = ОбъектЗагрузки.СерверШины.URL;
	HTTP = ? (ОбъектЗагрузки.СерверШины.ЗащищенноеСоединение , "https" , "http"); 
	
	Если ЗначениеЗаполнено(ДатаВремяЗапроса) Тогда
		Дата = Формат(ДатаВремяЗапроса,"ДФ=yyyyMMdd");
		РЕСТСписка = Новый HTTPЗапрос("/conversion/getlistbydate/"+RESTЗапрос+"/"+Дата+"/"); // HTTP+"://"+URL+
	Иначе
		Дата = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
		РЕСТСписка = Новый HTTPЗапрос("/conversion/getlist/"+(Сервер)+"/"+RESTЗапрос+"/"); //HTTP+"://"+URL+
	КонецЕсли;
		
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТСписка); // HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда
		
		ОбъектЖСОН = Новый Массив;
		//Если ЗначениеЗаполнено(ДатаВремяЗапроса) Тогда
		//	Дата = Формат(ДатаВремяЗапроса,"ДФ=yyyyMMdd");
		//Иначе
		//	Дата = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
		//КонецЕсли;
		//
		//РЕСТСписка = Новый HTTPЗапрос("/conversion/getlistbydate/"+RESTЗапрос+"/"+Дата+"/"); // HTTP+"://"+URL+
		//Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТСписка); // HTTP/1.1
		//
		//Если Результат.КодСостояния = 200 Тогда
		//	СтрокаЖСОН = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		//	
		//	ЧтениеЖСОН = Новый ЧтениеJSON();
		//	ЧтениеЖСОН.УстановитьСтроку(СтрокаЖСОН);
		//	ОбъектЖСОН = ПрочитатьJSON(ЧтениеЖСОН);
		//	ЧтениеЖСОН.Закрыть();
		//	
		//Иначе 			
		//	Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
		//КонецЕсли;
		
	Иначе
		СтрокаЖСОН = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		ЧтениеЖСОН = Новый ЧтениеJSON();
		ЧтениеЖСОН.УстановитьСтроку(СтрокаЖСОН);
		ОбъектЖСОН = ПрочитатьJSON(ЧтениеЖСОН);
		ЧтениеЖСОН.Закрыть();
	КонецЕсли;
	
	Возврат ОбъектЖСОН;	
КонецФункции

Функция ЗагрузитьФайлНаСервере(Сервер, ОбъектЗагрузки, Знач Файл) Экспорт
	
	ВхОбъект = Новый Массив;
	
	RESTЗапрос = ОбъектЗагрузки.RESTЗапрос;  
	URL = ОбъектЗагрузки.СерверШины.URL;
	HTTP = ? (ОбъектЗагрузки.СерверШины.ЗащищенноеСоединение , "https" , "http");
	РЕСТСписка = Новый HTTPЗапрос("/conversion/getdoc/"+ПреобразоватьКURL(Сервер)+"/"+RESTЗапрос+"/"+Файл+"/"); //HTTP+"://"+URL+
	
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТСписка); // HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда
		Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	Иначе
		ВхОбъект = СокрЛП(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	КонецЕсли;
	
	Возврат ВхОбъект; 
КонецФункции

Функция ОтметитьЧтоФайлЗагружен(Сервер, ОбъектЗагрузки, Знач Файл) Экспорт
	
	ВхОбъект = Новый Массив;
	
	RESTЗапрос = ОбъектЗагрузки.RESTЗапрос;  
	URL = ОбъектЗагрузки.СерверШины.URL;
	HTTP = ? (ОбъектЗагрузки.СерверШины.ЗащищенноеСоединение , "https" , "http");
	РЕСТСписка = Новый HTTPЗапрос("/conversion/setdoc/"+ПреобразоватьКURL(Сервер)+"/"+RESTЗапрос+"/"+Файл+"/");  //HTTP+"://"+URL+
	
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТСписка); // HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда
		Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	Иначе
		ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат ВхОбъект; 
КонецФункции

Функция ПолучитьИПрикрепитьИсходныйФайл(Объект, ОбъектЗагрузки, IDЗагрузки = "") Экспорт
	
	ПрикрепилиФайл = Ложь;
	
	RESTЗапрос = ОбъектЗагрузки.RESTЗапрос;  
	URL = ОбъектЗагрузки.СерверШины.URL;
	HTTP = ? (ОбъектЗагрузки.СерверШины.ЗащищенноеСоединение , "https" , "http");
	РЕСТСписка = Новый HTTPЗапрос("/conversion/getsource/"+RESTЗапрос+"/"+IDЗагрузки);  //HTTP+"://"+URL+
	
	Соединение = Новый HTTPСоединение(URL,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод("GET", РЕСТСписка); // HTTP/1.1
	Если Результат.КодСостояния = 500 Тогда		
		Сообщить(Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));		
		
	Иначе
		
		ТекстФайла = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		
		Если ЗначениеЗаполнено(ТекстФайла) Тогда
			УправлениеБТВызовСервера.ДобавитьКУслугеИсходныйФайл(Объект.Ссылка, ТекстФайла);
		КонецЕсли;
		
		ПрикрепилиФайл = Истина;
	КонецЕсли;
	
	Возврат ПрикрепилиФайл;	
КонецФункции



Функция ЗагрузитьЖСОНВУслугу(ОбъектЖСОН, ОбъектЗагрузки) Экспорт
	Услуга = Документы.Услуга.СоздатьДокумент();
	УправлениеБТСервер.ЗагрузитьДанныеВУслугу(ОбъектЖСОН, Услуга, ОбъектЗагрузки);
	Возврат Услуга;	
КонецФункции




Функция НайтиМесто(Знач Значение, ВидМеста = Неопределено) Экспорт
	
	ИщемПоВиду = Ложь;
	Если ВидМеста <> Неопределено Тогда
		ИщемПоВиду = Истина;	
	КонецЕсли;
	
	Значение = СокрЛП(Значение);
	Спр = Справочники.Места; 
	Место = Спр.ПустаяСсылка();
	
	Место = Спр.НайтиПоНаименованию(Значение, Истина);	
	Если ИщемПоВиду И Место.ВидМеста <> ВидМеста Тогда
		Место = Спр.ПустаяСсылка();
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Место) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Значение", Значение);
		Запрос.УстановитьПараметр("ИщемПоВиду", ИщемПоВиду);
		Запрос.УстановитьПараметр("ВидМеста", ВидМеста);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОписаниеМест.Место,
		               |	ОписаниеМест.ТипОписания,
		               |	ОписаниеМест.Значение
		               |ИЗ
		               |	РегистрСведений.ОписаниеМест КАК ОписаниеМест
		               |ГДЕ
		               |	ОписаниеМест.Значение = &Значение
		               |	И ВЫБОР
		               |			КОГДА &ИщемПоВиду
		               |				ТОГДА ОписаниеМест.Место.ВидМеста = &ВидМеста
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();			   
		Если Выборка.Следующий() Тогда 
			Место = Выборка.Место;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Место) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Значение", НРег(Значение));
		Запрос.УстановитьПараметр("ИщемПоВиду", ИщемПоВиду);
		Запрос.УстановитьПараметр("ВидМеста", ВидМеста);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОписаниеМест.Место,
		               |	ОписаниеМест.ТипОписания,
		               |	ОписаниеМест.Значение
		               |ИЗ
		               |	РегистрСведений.ОписаниеМест КАК ОписаниеМест
		               |ГДЕ
		               |	ОписаниеМест.Значение = &Значение
		               |	И ВЫБОР
		               |			КОГДА &ИщемПоВиду
		               |				ТОГДА ОписаниеМест.Место.ВидМеста = &ВидМеста
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();			   
		Если Выборка.Следующий() Тогда 
			Место = Выборка.Место;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Место) Тогда
		Место = Спр.НайтиПоКоду(Значение);  
		Если ИщемПоВиду И Место.ВидМеста <> ВидМеста Тогда
			Место = Спр.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Место;	
КонецФункции

Функция СоздатьМесто(Знач Значение, Знач ВидМеста = Неопределено) Экспорт
	//Значение = Новый Структура("
	//	country_rus, 
	//	country_eng, 
	//	city_rus, 
	//	city_eng, 
	//	name_rus, 
	//	name_eng, 
	//	
	//	gmt_offset, 
	//	iata_code, 
	//	icao_code, 
	//	iso_code, 
	//	latitude, 
	//	longitude, 
	//	runway_length, 
	//	runway_elevation, 
	//	phone, 
	//	fax, 
	//	email, 
	//	website
	//");
	Если ВидМеста = Неопределено Тогда
		ВидМеста = Справочники.ВидыМест.Аэропорт;
	КонецЕсли;
	
	Страна = Справочники.Места.ПустаяСсылка();
	Если ЗначениеЗаполнено(Значение.country_eng) Тогда
		Страна = НайтиМесто(Значение.country_eng, Справочники.ВидыМест.Страна);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Страна) И ЗначениеЗаполнено(Значение.country_rus) Тогда
		Страна = НайтиМесто(Значение.country_rus, Справочники.ВидыМест.Страна);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Страна) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение.country_rus) Тогда
			ИмяРусское = ТранслитерацияENRU(Значение.country_eng);
			Значение.city_rus = ИмяРусское;
		КонецЕсли;

		СтранаОбъект = Справочники.Места.СоздатьЭлемент();
		СтранаОбъект.Наименование = Значение.country_rus;
		СтранаОбъект.ВидМеста = Справочники.ВидыМест.Страна;
		СтранаОбъект.Записать();
		Страна = СтранаОбъект.Ссылка;
		
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Страна;
		МЗ.ТипОписания = Справочники.ТипыОписания.НРегИмя;
		МЗ.Значение = НРег(Значение.country_rus);
		МЗ.Записать(Истина);

		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Страна;
		МЗ.ТипОписания = Справочники.ТипыОписания.ИмяАнг;
		МЗ.Значение = НРег(Значение.country_eng);
		МЗ.Записать(Истина);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Страна.ВидМеста) Тогда
		СтранаОбъект = Страна.ПолучитьОбъект();
		СтранаОбъект.ВидМеста = Справочники.ВидыМест.Страна;
		СтранаОбъект.Записать();
			
	КонецЕсли;
	
	
	
	Город = Справочники.Места.ПустаяСсылка();
	Если ЗначениеЗаполнено(Значение.city_eng) Тогда
		Город = НайтиМесто(Значение.city_eng, Справочники.ВидыМест.Город);	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Страна) И ЗначениеЗаполнено(Значение.city_rus) Тогда
		Страна = НайтиМесто(Значение.city_rus, Справочники.ВидыМест.Город);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Город) Тогда
		
		Если НЕ ЗначениеЗаполнено(Значение.city_rus) Тогда
			ИмяРусское = ТранслитерацияENRU(Значение.city_eng);
			Значение.city_rus = ИмяРусское;
		КонецЕсли;

		ГородОбъект = Справочники.Места.СоздатьЭлемент();
		ГородОбъект.Наименование = Значение.city_rus;
		ГородОбъект.ВидМеста = Справочники.ВидыМест.Город;
		ГородОбъект.Родитель = Страна;
		ГородОбъект.Записать();
		Город = ГородОбъект.Ссылка;
		
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Город;
		МЗ.ТипОписания = Справочники.ТипыОписания.НРегИмя;
		МЗ.Значение = НРег(Значение.city_rus);
		МЗ.Записать(Истина);

		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Город;
		МЗ.ТипОписания = Справочники.ТипыОписания.ИмяАнг;
		МЗ.Значение = НРег(Значение.city_eng);
		МЗ.Записать(Истина);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Город.ВидМеста) Тогда
		СтранаОбъект = Город.ПолучитьОбъект();
		СтранаОбъект.ВидМеста = Справочники.ВидыМест.Город;
		СтранаОбъект.Записать();
		
	КонецЕсли;
	
	
	
	Если НЕ ЗначениеЗаполнено(Значение.name_rus) Тогда
		ИмяРусское = ТранслитерацияENRU(Значение.name_eng);
		Значение.name_rus = ИмяРусское;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Значение.name_eng) Тогда
		ИмяАнгл = ТранслитерацияRUEN(Значение.name_rus);
		Значение.name_eng = ИмяАнгл;
	КонецЕсли;
	
	МестоОбъект = Справочники.Места.СоздатьЭлемент();
	МестоОбъект.Наименование = Значение.name_rus;
	МестоОбъект.ВидМеста = ВидМеста;
	МестоОбъект.Родитель = Город;
	МестоОбъект.Записать();
	Место = МестоОбъект.Ссылка;
	
	Если Значение.Свойство("iata_code") И ЗначениеЗаполнено(Значение.iata_code) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.IATA;
		МЗ.Значение = Значение.iata_code;
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("icao_code") И ЗначениеЗаполнено(Значение.icao_code) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.ICAO;
		МЗ.Значение = Значение.icao_code;
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("iso_code") И ЗначениеЗаполнено(Значение.iso_code) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.ISO;
		МЗ.Значение = Значение.iso_code;
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("name_eng") И ЗначениеЗаполнено(Значение.name_eng) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.ИмяАнг;
		МЗ.Значение = Значение.name_eng;
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("name_rus") И ЗначениеЗаполнено(Значение.name_rus) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.НРегИмя;
		МЗ.Значение = НРег(Значение.name_rus);
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("name_eng") И ЗначениеЗаполнено(Значение.name_eng) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.ИмяАнг;
		МЗ.Значение = НРег(Значение.name_eng);
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("latitude") И ЗначениеЗаполнено(Значение.latitude) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.Latitude;
		МЗ.Значение = НРег(Значение.latitude);
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Если Значение.Свойство("longitude") И ЗначениеЗаполнено(Значение.longitude) Тогда
		МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
		МЗ.Место = Место;
		МЗ.ТипОписания = Справочники.ТипыОписания.Longitude;
		МЗ.Значение = НРег(Значение.longitude);
		МЗ.Записать(Истина);
	КонецЕсли;
	
	Возврат Место;
КонецФункции


Функция ПолучитьРеквизит(Ссылка, Реквизит) Экспорт
	Результат = Неопределено;
	Выполнить("Результат = Ссылка."+Реквизит+";"); 
	Возврат Результат	
КонецФункции

Функция ПолучитьСтруктуруВиртуальнойУслугиДляКлиентаЗаказа()
	
	УслугиДляКлиента = Новый Структура;
	УслугиДляКлиента.Вставить("Услуга");
	УслугиДляКлиента.Вставить("Номенклатура");
	УслугиДляКлиента.Вставить("ОписаниеУслуги");
	УслугиДляКлиента.Вставить("СуммаНДС");
	УслугиДляКлиента.Вставить("СтавкаНДС");
	УслугиДляКлиента.Вставить("СуммаИтого");
	УслугиДляКлиента.Вставить("ВключеноВ");
		
	Возврат УслугиДляКлиента;
КонецФункции

Функция ПолучитьСтруктуруВиртуальногоЗаказа()
	
	СтруктураВДокумента = Новый Структура;
	СтруктураВДокумента.Вставить("Организация");
	СтруктураВДокумента.Вставить("Партнер");
	СтруктураВДокумента.Вставить("Контрагент");
	СтруктураВДокумента.Вставить("Договор");
	СтруктураВДокумента.Вставить("УслугиДляКлиента", Новый Массив);
	
	Возврат СтруктураВДокумента;
КонецФункции

Функция СформироватьЗаказыКлиентовНаСервере(СсылкаНаЗаказКомандированного) Экспорт
		
	Запрос = Новый Запрос;
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(СсылкаНаЗаказКомандированного);
	
	Запрос.УстановитьПараметр("СсылкаНаЗаказКомандированного", МассивЗаказов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга КАК Услуга,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Организация КАК Организация,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Партнер КАК Партнер,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Контрагент КАК Контрагент,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Договор КАК Договор,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого КАК СуммаИтого,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ОписаниеУслуги КАК ОписаниеУслуги,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СуммаНДС КАК СуммаНДС,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка КАК ЗаказКомандированного,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.Дата КАК ДатаЗаказаКлиента,
	               |	ЗНАЧЕНИЕ(Документ.ЗаказКлиентаБТ.ПустаяССылка) КАК ВЗаказе,
	               |	ЛОЖЬ КАК Удален
	               |ПОМЕСТИТЬ ТекущиеУслуги
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка В(&СсылкаНаЗаказКомандированного)
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга.УслугаВладелец = ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка)
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПодготовитьДляФормированияДокументов.Услуга КАК Услуга,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Организация КАК Организация,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Партнер КАК Партнер,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Контрагент КАК Контрагент,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Договор КАК Договор,
	               |	0 КАК СуммаИтого,
	               |	"""" КАК ОписаниеУслуги,
	               |	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	               |	0 КАК СуммаНДС,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного КАК ЗаказКомандированного,
	               |	ПодготовитьДляФормированияДокументов.Услуга.Дата КАК ДатаЗаказаКлиента,
	               |	ПодготовитьДляФормированияДокументов.ВЗаказе КАК ВЗаказе,
	               |	ИСТИНА КАК Удален
	               |ПОМЕСТИТЬ СтарыеУслуги
	               |ИЗ
	               |	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеУслуги КАК ТекущиеУслуги
	               |		ПО ПодготовитьДляФормированияДокументов.ЗаказКомандированного = ТекущиеУслуги.ЗаказКомандированного
	               |			И ПодготовитьДляФормированияДокументов.Услуга = ТекущиеУслуги.Услуга
	               |ГДЕ
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного В (&СсылкаНаЗаказКомандированного)
	               |	И ТекущиеУслуги.Услуга ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеУслуги.Услуга КАК Услуга,
	               |	ТекущиеУслуги.Организация КАК Организация,
	               |	ТекущиеУслуги.Партнер КАК Партнер,
	               |	ТекущиеУслуги.Контрагент КАК Контрагент,
	               |	ТекущиеУслуги.Договор КАК Договор,
	               |	ТекущиеУслуги.СуммаИтого КАК СуммаИтого,
	               |	ТекущиеУслуги.ОписаниеУслуги КАК ОписаниеУслуги,
	               |	ТекущиеУслуги.СтавкаНДС КАК СтавкаНДС,
	               |	ТекущиеУслуги.СуммаНДС КАК СуммаНДС,
	               |	ТекущиеУслуги.ЗаказКомандированного КАК ЗаказКомандированного,
	               |	ТекущиеУслуги.ДатаЗаказаКлиента КАК ДатаЗаказаКлиента,
	               |	ТекущиеУслуги.ВЗаказе КАК ВЗаказе,
	               |	ТекущиеУслуги.Удален КАК Удален
	               |ИЗ
	               |	ТекущиеУслуги КАК ТекущиеУслуги
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтарыеУслуги.Услуга,
	               |	СтарыеУслуги.Организация,
	               |	СтарыеУслуги.Партнер,
	               |	СтарыеУслуги.Контрагент,
	               |	СтарыеУслуги.Договор,
	               |	СтарыеУслуги.СуммаИтого,
	               |	СтарыеУслуги.ОписаниеУслуги,
	               |	СтарыеУслуги.СтавкаНДС,
	               |	СтарыеУслуги.СуммаНДС,
	               |	СтарыеУслуги.ЗаказКомандированного,
	               |	СтарыеУслуги.ДатаЗаказаКлиента,
	               |	СтарыеУслуги.ВЗаказе,
	               |	СтарыеУслуги.Удален
	               |ИЗ
	               |	СтарыеУслуги КАК СтарыеУслуги";
	Выборка = Запрос.Выполнить().Выбрать();
	
	//СтарыйДоговор = Неопределено;
	МассивМассивовУслуг = Новый Массив;
	МассивУслуг = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Удален Тогда 		
			МассивУслуг.Добавить(Новый Структура("ДатаЗаказаКлиента, ЗаказКомандированного, Услуга, Организация, Партнер, Контрагент, Договор, СуммаИтого, СтавкаНДС, СуммаНДС, ОписаниеУслуги", Выборка.ДатаЗаказаКлиента, Выборка.ЗаказКомандированного, Выборка.Услуга, Выборка.Организация, Выборка.Партнер, Выборка.Контрагент, Выборка.Договор, Выборка.СуммаИтого, Выборка.СтавкаНДС, Выборка.СуммаНДС, Выборка.ОписаниеУслуги));
		Иначе
			ЗаказКлиентаБТ = Выборка.ВЗаказе.ПолучитьОбъект();
			//ЗаказКлиентаБТ = Документы.ЗаказКлиентаБТ.ПолучитьСсылку().ПолучитьОбъект();
			
			НайденнаяСтрока = ЗаказКлиентаБТ.Товары.Найти(Выборка.Услуга, "Услуга");
			Если НайденнаяСтрока<>Неопределено Тогда 
				ЗаказКлиентаБТ.Товары.Удалить(НайденнаяСтрока);
				Если ЗаказКлиентаБТ.Проведен Тогда 
					ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	МассивМассивовУслуг.Добавить(МассивУслуг);	
	
	Возврат МассивМассивовУслуг;
КонецФункции

Функция СформироватьЗаказыКлиентовПоУслугеНаСервере(СсылкаНаУслугу) Экспорт
		
	Запрос = Новый Запрос;
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(СсылкаНаУслугу);
	
	Запрос.УстановитьПараметр("СсылкаНаЗаказКомандированного", МассивЗаказов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга КАК Услуга,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Организация КАК Организация,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Партнер КАК Партнер,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Контрагент КАК Контрагент,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка.Договор КАК Договор,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого КАК СуммаИтого,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ОписаниеУслуги КАК ОписаниеУслуги,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СтавкаНДС КАК СтавкаНДС,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СуммаНДС КАК СуммаНДС,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка КАК ЗаказКомандированного,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга.Дата КАК ДатаЗаказаКлиента,
	               |	ЗНАЧЕНИЕ(Документ.ЗаказКлиентаБТ.ПустаяССылка) КАК ВЗаказе,
	               |	ЛОЖЬ КАК Удален
	               |ПОМЕСТИТЬ ТекущиеУслуги
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка В(&СсылкаНаЗаказКомандированного)
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга.УслугаВладелец = ЗНАЧЕНИЕ(Документ.Услуга.ПустаяСсылка)
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого <> 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПодготовитьДляФормированияДокументов.Услуга КАК Услуга,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Организация КАК Организация,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Партнер КАК Партнер,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Контрагент КАК Контрагент,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного.Договор КАК Договор,
	               |	0 КАК СуммаИтого,
	               |	"""" КАК ОписаниеУслуги,
	               |	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	               |	0 КАК СуммаНДС,
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного КАК ЗаказКомандированного,
	               |	ПодготовитьДляФормированияДокументов.Услуга.Дата КАК ДатаЗаказаКлиента,
	               |	ПодготовитьДляФормированияДокументов.ВЗаказе КАК ВЗаказе,
	               |	ИСТИНА КАК Удален
	               |ПОМЕСТИТЬ СтарыеУслуги
	               |ИЗ
	               |	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеУслуги КАК ТекущиеУслуги
	               |		ПО ПодготовитьДляФормированияДокументов.ЗаказКомандированного = ТекущиеУслуги.ЗаказКомандированного
	               |			И ПодготовитьДляФормированияДокументов.Услуга = ТекущиеУслуги.Услуга
	               |ГДЕ
	               |	ПодготовитьДляФормированияДокументов.ЗаказКомандированного В (&СсылкаНаЗаказКомандированного)
	               |	И ТекущиеУслуги.Услуга ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеУслуги.Услуга КАК Услуга,
	               |	ТекущиеУслуги.Организация КАК Организация,
	               |	ТекущиеУслуги.Партнер КАК Партнер,
	               |	ТекущиеУслуги.Контрагент КАК Контрагент,
	               |	ТекущиеУслуги.Договор КАК Договор,
	               |	ТекущиеУслуги.СуммаИтого КАК СуммаИтого,
	               |	ТекущиеУслуги.ОписаниеУслуги КАК ОписаниеУслуги,
	               |	ТекущиеУслуги.СтавкаНДС КАК СтавкаНДС,
	               |	ТекущиеУслуги.СуммаНДС КАК СуммаНДС,
	               |	ТекущиеУслуги.ЗаказКомандированного КАК ЗаказКомандированного,
	               |	ТекущиеУслуги.ДатаЗаказаКлиента КАК ДатаЗаказаКлиента,
	               |	ТекущиеУслуги.ВЗаказе КАК ВЗаказе,
	               |	ТекущиеУслуги.Удален КАК Удален
	               |ИЗ
	               |	ТекущиеУслуги КАК ТекущиеУслуги
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СтарыеУслуги.Услуга,
	               |	СтарыеУслуги.Организация,
	               |	СтарыеУслуги.Партнер,
	               |	СтарыеУслуги.Контрагент,
	               |	СтарыеУслуги.Договор,
	               |	СтарыеУслуги.СуммаИтого,
	               |	СтарыеУслуги.ОписаниеУслуги,
	               |	СтарыеУслуги.СтавкаНДС,
	               |	СтарыеУслуги.СуммаНДС,
	               |	СтарыеУслуги.ЗаказКомандированного,
	               |	СтарыеУслуги.ДатаЗаказаКлиента,
	               |	СтарыеУслуги.ВЗаказе,
	               |	СтарыеУслуги.Удален
	               |ИЗ
	               |	СтарыеУслуги КАК СтарыеУслуги";
	Выборка = Запрос.Выполнить().Выбрать();
	
	//СтарыйДоговор = Неопределено;
	МассивМассивовУслуг = Новый Массив;
	МассивУслуг = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Удален Тогда 		
			МассивУслуг.Добавить(Новый Структура("ДатаЗаказаКлиента, ЗаказКомандированного, Услуга, Организация, Партнер, Контрагент, Договор, СуммаИтого, СтавкаНДС, СуммаНДС, ОписаниеУслуги", Выборка.ДатаЗаказаКлиента, Выборка.ЗаказКомандированного, Выборка.Услуга, Выборка.Организация, Выборка.Партнер, Выборка.Контрагент, Выборка.Договор, Выборка.СуммаИтого, Выборка.СтавкаНДС, Выборка.СуммаНДС, Выборка.ОписаниеУслуги));
		Иначе
			ЗаказКлиентаБТ = Выборка.ВЗаказе.ПолучитьОбъект();
			//ЗаказКлиентаБТ = Документы.ЗаказКлиентаБТ.ПолучитьСсылку().ПолучитьОбъект();
			
			НайденнаяСтрока = ЗаказКлиентаБТ.Товары.Найти(Выборка.Услуга, "Услуга");
			Если НайденнаяСтрока<>Неопределено Тогда 
				ЗаказКлиентаБТ.Товары.Удалить(НайденнаяСтрока);
				Если ЗаказКлиентаБТ.Проведен Тогда 
					ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ЗаказКлиентаБТ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	МассивМассивовУслуг.Добавить(МассивУслуг);	
	
	Возврат МассивМассивовУслуг;
КонецФункции


Функция СоздатьВиртуальныйЗаказИЗУслуг(МассивУслуг) Экспорт
	
	ШаблонДокумента = ПолучитьСтруктуруВиртуальногоЗаказа();
	ЗаполнитьЗначенияСвойств(ШаблонДокумента, МассивУслуг[0]);
	
	Для Каждого ТекУслуга ИЗ МассивУслуг Цикл
		СтрокаТЦ = ПолучитьСтруктуруВиртуальнойУслугиДляКлиентаЗаказа();
		ЗаполнитьЗначенияСвойств(СтрокаТЦ, ТекУслуга);
		СтрокаТЦ.Номенклатура = ТекУслуга.Услуга.НоменклатураБТ;
		ШаблонДокумента.УслугиДляКлиента.Добавить(СтрокаТЦ);
	КонецЦикла;
	
	Возврат ШаблонДокумента;
	
КонецФункции


Функция УдалитьУслугуИзСтарогоЗаказа(ЗаказКлиента, Услуга)
	//	
	//ЗаказКлиента = ЗаказКлиентаСсылка.ПолучитьОбъект();
	//ЗаказКлиента = Документы.ЗаказКлиентаБТ.ПустаяСсылка().ПолучитьОбъект();
	СуммаДокумента = ЗаказКлиента.СуммаДокумента;
	
	СтрокаСУслугой = ЗаказКлиента.Товары.Найти(Услуга, "Услуга");
	Если СтрокаСУслугой <> Неопределено Тогда 
		СуммаДокумента = СуммаДокумента - СтрокаСУслугой.СуммаСНДС;
		ЗаказКлиента.Товары.Удалить(СтрокаСУслугой);	
		ЗаказКлиента.СуммаДокумента = СуммаДокумента;
	КонецЕсли;
	
	
КонецФункции

Функция ДобавитьУслугуВЗаказ(ДокументЗаказ, СтруктураСУслугой)
	
	Командировка = СтруктураСУслугой.Ссылка;
	ОбрабатываемаяУслуга = СтруктураСУслугой.Услуга;

	ЗапросКТЧ = Новый Запрос;
	ЗапросКТЧ.УстановитьПараметр("Ссылка", Командировка);
	ЗапросКТЧ.УстановитьПараметр("Услуга", ОбрабатываемаяУслуга);
	ЗапросКТЧ.Текст = "ВЫБРАТЬ
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.НомерСтроки,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ГУИД,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Номенклатура,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Цена,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ЦенаВложенныхУслуг,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Отменено,
	                  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКомандированногоБТУслугиДляКлиента1.Услуга) КАК УслугиВложенные
	                  |ПОМЕСТИТЬ СвложеннымиУслугами
	                  |ИЗ
	                  |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента1
	                  |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = ЗаказКомандированногоБТУслугиДляКлиента1.Ссылка
	                  |			И ЗаказКомандированногоБТУслугиДляКлиента.ГУИД = ЗаказКомандированногоБТУслугиДляКлиента1.ВключеноВ
	                  |ГДЕ
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
	                  |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга В(&Услуга)
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.НомерСтроки,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ГУИД,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Номенклатура,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Цена,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ЦенаВложенныхУслуг,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Отменено
	                  |;
	                  |
	                  |////////////////////////////////////////////////////////////////////////////////
	                  |ВЫБРАТЬ
	                  |	РеквизитыУслуги.ХарактеристикаНоменклатуры.Владелец КАК Номенклатура,
	                  |	РеквизитыУслуги.ХарактеристикаНоменклатуры.Ссылка КАК Характеристика,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого КАК Цена,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого КАК Сумма,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого КАК СуммаСНДС,
	                  |	ВЫБОР
	                  |		КОГДА СвложеннымиУслугами.УслугиВложенные > 1
	                  |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	                  |		ИНАЧЕ ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СтавкаНДС
	                  |	КОНЕЦ КАК СтавкаНДС,
	                  |	ВЫБОР
	                  |		КОГДА СвложеннымиУслугами.УслугиВложенные > 1
	                  |			ТОГДА 0
	                  |		ИНАЧЕ ВЫБОР
	                  |				КОГДА ЗаказКомандированногоБТУслугиДляКлиента.ЦенаВложенныхУслуг = 0
	                  |					ТОГДА ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СуммаНДС
	                  |				ИНАЧЕ ВЫБОР
	                  |						КОГДА ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	                  |							ТОГДА ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого / 110 * 10
	                  |						ИНАЧЕ ВЫБОР
	                  |								КОГДА ЗаказКомандированногоБТУслугиДляКлиента.Услуга.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	                  |									ТОГДА ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого / 118 * 18
	                  |								ИНАЧЕ 0
	                  |							КОНЕЦ
	                  |					КОНЕЦ
	                  |			КОНЕЦ
	                  |	КОНЕЦ КАК СуммаНДС,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	                  |	1 КАК Количество,
	                  |	1 КАК КоличествоУпаковок,
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.ОписаниеУслуги КАК Содержание
	                  |ИЗ
	                  |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	                  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
	                  |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Услуга = РеквизитыУслуги.Услуга,
	                  |	СвложеннымиУслугами КАК СвложеннымиУслугами
	                  |ГДЕ
	                  |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
	                  |	И ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого <> 0
	                  |	И ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	                  |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга В(&Услуга)";
	УслугиДляКлиента = ЗапросКТЧ.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ ИЗ УслугиДляКлиента Цикл 
		НоваяСтрока = ДокументЗаказ.Товары.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);		
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		ДокументЗаказ.СуммаДокумента = ДокументЗаказ.СуммаДокумента + НоваяСтрока.СуммаСНДС;				
	КонецЦикла;
	
КонецФункции

Функция СоздатьПакетДокументовБТ(СтруктураСУслугой, ВЗаказ = Неопределено) Экспорт
	
	Командировка = СтруктураСУслугой.ОбъектПроверки;
	ОбрабатываемаяУслуга = СтруктураСУслугой.Услуга;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Командировка);
	Запрос.УстановитьПараметр("Услуга", ОбрабатываемаяУслуга);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	               |	ПодготовитьДляФормированияДокументов.ВЗаказе
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = ПодготовитьДляФормированияДокументов.ЗаказКомандированного
	               |			И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = ПодготовитьДляФормированияДокументов.Услуга
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = &Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.НомерСтроки,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ГУИД,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Номенклатура,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Цена,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ЦенаВложенныхУслуг,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Отменено,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКомандированногоБТУслугиДляКлиента1.Услуга) КАК УслугаВложенная
	               |ПОМЕСТИТЬ УслугиВЗаказеСВложениями
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента1
	               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = ЗаказКомандированногоБТУслугиДляКлиента1.Ссылка
	               |			И ЗаказКомандированногоБТУслугиДляКлиента.ГУИД = ЗаказКомандированногоБТУслугиДляКлиента1.ВключеноВ
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = &Услуга
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.НомерСтроки,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ГУИД,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Номенклатура,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Цена,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ЦенаВложенныхУслуг,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.СуммаИтого,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Отменено
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Ссылка,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Услуга,
	               |	ПодготовитьДляФормированияДокументов.ВЗаказе,
	               |	УслугиВЗаказеСВложениями.УслугаВложенная
	               |ПОМЕСТИТЬ УслугиВЗаказе
	               |ИЗ
	               |	Документ.ЗаказКомандированногоБТ.УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = ПодготовитьДляФормированияДокументов.ЗаказКомандированного
	               |			И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = ПодготовитьДляФормированияДокументов.Услуга
	               |		ЛЕВОЕ СОЕДИНЕНИЕ УслугиВЗаказеСВложениями КАК УслугиВЗаказеСВложениями
	               |		ПО ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = УслугиВЗаказеСВложениями.Ссылка
	               |			И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = УслугиВЗаказеСВложениями.Услуга
	               |ГДЕ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ = """"
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Ссылка = &Ссылка
	               |	И ЗаказКомандированногоБТУслугиДляКлиента.Услуга = &Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УслугиВЗаказе.Ссылка,
	               |	СвязанныеУслуги.ВложеннаяУслуга КАК Услуга,
	               |	УслугиВЗаказе.ВЗаказе,
	               |	УслугиВЗаказе.УслугаВложенная
	               |ПОМЕСТИТЬ ВложенныеУслуги
	               |ИЗ
	               |	УслугиВЗаказе КАК УслугиВЗаказе
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеУслуги КАК СвязанныеУслуги
	               |		ПО УслугиВЗаказе.Услуга = СвязанныеУслуги.УслугаРодитель
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныеУслуги.Ссылка,
	               |	ВложенныеУслуги.Услуга,
	               |	ВложенныеУслуги.ВЗаказе,
	               |	ЕСТЬNULL(ПодготовитьДляФормированияДокументов.ВЗаказе, ЗНАЧЕНИЕ(Документ.ЗаказКлиентаБТ.ПустаяСсылка)) КАК ВложеннаяУслугаВЗаказе,
	               |	ВложенныеУслуги.УслугаВложенная
	               |ПОМЕСТИТЬ ВложенныеУслугиСЗаказами
	               |ИЗ
	               |	ВложенныеУслуги КАК ВложенныеУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	               |		ПО ВложенныеУслуги.Услуга = ПодготовитьДляФормированияДокументов.Услуга
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УслугиВЗаказе.Ссылка,
	               |	УслугиВЗаказе.Услуга,
	               |	УслугиВЗаказе.ВЗаказе,
	               |	ЗНАЧЕНИЕ(Документ.ЗаказКлиентаБТ.ПустаяСсылка) КАК ВложеннаяУслугаВЗаказе,
	               |	УслугиВЗаказе.УслугаВложенная
	               |ИЗ
	               |	УслугиВЗаказе КАК УслугиВЗаказе
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВложенныеУслугиСЗаказами.Ссылка,
	               |	ВложенныеУслугиСЗаказами.Услуга,
	               |	ВложенныеУслугиСЗаказами.ВЗаказе,
	               |	ВложенныеУслугиСЗаказами.ВложеннаяУслугаВЗаказе,
	               |	NULL
	               |ИЗ
	               |	ВложенныеУслугиСЗаказами КАК ВложенныеУслугиСЗаказами";
				   
				   
	Пакет = Запрос.ВыполнитьПакет();			   
	//УслугаМассив = НеобработанныеУслуги.ВыгрузитьКолонку("Услуга");
	
	НеЗаписывать = Ложь;
	ЗаказыКлиентовБТ = Новый Массив;
	ЗаполнениеНовогоДокумента = Ложь;
	ЗаполнениеОткрытогоДокумента = Ложь;

	
	ОписаниеУслуги = Пакет[0].Выбрать();
	Если ОписаниеУслуги.Следующий() Тогда
		
		Если ТипЗнч(ВЗаказ) = Тип("ДокументОбъект.ЗаказКлиентаБТ") Тогда	

			НеЗаписывать = Истина;
			ДокументЗаказ = ВЗаказ;
			ЗаполнениеОткрытогоДокумента = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеУслуги.ВЗаказе) Тогда
			Если 
				ОписаниеУслуги.ВЗаказе.Партнер = Командировка.Партнер И
				ОписаниеУслуги.ВЗаказе.Контрагент = Командировка.Контрагент И
				ОписаниеУслуги.ВЗаказе.Договор = Командировка.Договор  Тогда
				
				ДокументЗаказ = ОписаниеУслуги.ВЗаказе.ПолучитьОбъект();
			Иначе
				СтарыйЗаказ = ОписаниеУслуги.ВЗаказе.ПолучитьОбъект();
				УдалитьУслугуИзСтарогоЗаказа(СтарыйЗаказ, ОписаниеУслуги.Услуга);
				Если СтарыйЗаказ.Проведен Тогда 
					СтарыйЗаказ.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					СтарыйЗаказ.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				
				ЗаполнениеНовогоДокумента = Истина;
				ДокументЗаказ = Документы.ЗаказКлиентаБТ.СоздатьДокумент();
			КонецЕсли;
			
		Иначе
			ЗаполнениеНовогоДокумента = Истина;
			ДокументЗаказ = Документы.ЗаказКлиентаБТ.СоздатьДокумент();
		КонецЕсли;
		
		
		Если ЗаполнениеНовогоДокумента Тогда
			СуммаДокумента = 0;
			ДокументЗаказ.Дата = ОбрабатываемаяУслуга.Дата;
			ДокументЗаказ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			ДокументЗаказ.Организация = Командировка.Организация;
			ДокументЗаказ.Партнер = Командировка.Партнер;
			ДокументЗаказ.Контрагент = Командировка.Контрагент;
			ДокументЗаказ.Договор = Командировка.Договор;	
			ДокументЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;	
			ДокументЗаказ.ДатаОтгрузки = Командировка.Дата;				
		Иначе
			Если НЕ ЗаполнениеОткрытогоДокумента Тогда 
				Если ДокументЗаказ.Дата <> ОбрабатываемаяУслуга.Дата Тогда
					ДокументЗаказ.Дата = ОбрабатываемаяУслуга.Дата
				КонецЕсли;
				
				СуммаДокумента = ДокументЗаказ.СуммаДокумента;
				УдалитьУслугуИзСтарогоЗаказа(ДокументЗаказ, ОписаниеУслуги.Услуга);
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	УслугиВЗаказах = Запрос.Выполнить().Выгрузить();		
	Для Каждого ОписаниеУслуги ИЗ УслугиВЗаказах Цикл
		//
		Если ЗначениеЗаполнено(ОписаниеУслуги.ВложеннаяУслугаВЗаказе) И ОписаниеУслуги.ВложеннаяУслугаВЗаказе <> ОписаниеУслуги.ВЗаказе Тогда
			СтарыйЗаказОбъект = ОписаниеУслуги.ВложеннаяУслугаВЗаказе.ПолучитьОбъект();
			УдалитьУслугуИзСтарогоЗаказа(СтарыйЗаказОбъект, ОписаниеУслуги.Услуга);
			Если СтарыйЗаказОбъект.Проведен Тогда
				СтарыйЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				СтарыйЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнениеНовогоДокумента Тогда
			//	
		Иначе
			СуммаДокумента = ДокументЗаказ.СуммаДокумента;
			УдалитьУслугуИзСтарогоЗаказа(ДокументЗаказ, ОписаниеУслуги.Услуга);
		КонецЕсли;
		
		ДобавитьУслугуВЗаказ(ДокументЗаказ, ОписаниеУслуги);
	КонецЦикла;
	
	Если НЕ НеЗаписывать Тогда
		ДокументЗаказ.ЗаполнитьВычисляемыеРеквизиты();
		ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;	
	ЗаказыКлиентовБТ.Добавить(ДокументЗаказ.Ссылка);
	
	Возврат ЗаказыКлиентовБТ;
	
КонецФункции




Функция ВключитьУслугуВЗаказКлиента(Услуга, ЗаказКлиентаБТ) Экспорт
	
	//Надо удалить услугу из старых документов
	ЗатронутыеДокументы = УправлениеБТСервер.УдалитьУслугуИзПакетаДокументов(Услуга);
	Для Каждого СсылкаНаДокумент ИЗ ЗатронутыеДокументы.ЗатронутыеДокументы Цикл 
		Сообщить(СсылкаНаДокумент);
	КонецЦикла;
	
	//И добавить в новый заказ
	УправлениеБТСервер.ДобавитьУслугуВЗаказКлиентаБТ(ЗаказКлиентаБТ, Услуга);
		
КонецФункции

Функция ВключитьУслугуВЗаказПоставщику(Услуга, ЗаказПоставщикуБТ) Экспорт
	
	////Надо удалить услугу из старых документов
	//ЗатронутыеДокументы = УправлениеБТСервер.УдалитьУслугуИзПакетаДокументов(Услуга);
	//Для Каждого СсылкаНаДокумент ИЗ ЗатронутыеДокументы.ЗатронутыеДокументы Цикл 
	//	Сообщить(СсылкаНаДокумент);
	//КонецЦикла;
	
	//И добавить в новый заказ
	УправлениеБТСервер.ДобавитьУслугуВЗаказПоставщикуБТ(ЗаказПоставщикуБТ, Услуга);
	
	
КонецФункции


Функция ПолучитьНастройкуСистемы(Знач Настройка) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		Настройка = ПланыВидовХарактеристик.НаборХарактеристикСистемный[Настройка];	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", Настройка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСистемы.Характеристика КАК Характеристика,
	               |	НастройкиСистемы.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.НастройкиСистемы КАК НастройкиСистемы
	               |ГДЕ
	               |	НастройкиСистемы.Характеристика = &Характеристика";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНастройкуПользователя(Знач Настройка, Пользователь = Неопределено, Период = Неопределено) Экспорт
	
	Результат = "";
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;	
	КонецЕсли;
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();	
	КонецЕсли;
	Если ТипЗнч(Настройка) = Тип("Строка") Тогда
		Настройка = ПланыВидовХарактеристик.НаборХарактеристикДляПользователя[Настройка];	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаПользователя", Настройка);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПользователяБТСрезПоследних.Пользователь КАК Пользователь,
	               |	НастройкиПользователяБТСрезПоследних.НастройкаПользователя КАК НастройкаПользователя,
	               |	НастройкиПользователяБТСрезПоследних.ЗначениеНастройки КАК Значение,
	               |	НастройкиПользователяБТСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.НастройкиПользователяБТ.СрезПоследних(&Период, ) КАК НастройкиПользователяБТСрезПоследних
	               |ГДЕ
	               |	НастройкиПользователяБТСрезПоследних.Пользователь = &Пользователь
	               |	И НастройкиПользователяБТСрезПоследних.НастройкаПользователя = &НастройкаПользователя";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции



Функция ОтправитьЗапросВШину(Сервер, Адрес, ВхТело, Знач Параметры) Экспорт
	
	ТипЗапроса = "POST";
	Если НЕ Параметры.Свойство("ТипЗапроса", ТипЗапроса) Тогда
		ТипЗапроса = "POST";
	КонецЕсли;	
	
	Пользователь = "";
	Если НЕ Параметры.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = "";
	КонецЕсли;	
	
	Пароль = "";
	Если НЕ Параметры.Свойство("Пароль", Пароль) Тогда
		Пароль = "";
	КонецЕсли;	
	
	ВыхДанные = "";
	Если НЕ Параметры.Свойство("ВыхДанные", ВыхДанные) Тогда
		ВыхДанные = "ПолучитьТелоКакСтроку";
	КонецЕсли;	
	
	Если ТипЗнч(ВхТело) = Тип("Структура") ИЛИ ТипЗнч(ВхТело) = Тип("Массив") Тогда 	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ВхТело); // сериализует ОтветМассив в формат JSON
		Тело = ЗаписьJSON.Закрыть();
	Иначе
		Тело = ВхТело;	
	КонецЕсли;
	
	Результат = Ложь;
	ВхОбъект = "";
	
	РЕСТ = Новый HTTPЗапрос(Адрес);
	Если ТипЗнч(Тело) = Тип("Строка") Тогда
		РЕСТ.УстановитьТелоИзСтроки(Тело);
	ИначеЕсли ТипЗнч(Тело) = Тип("ДвоичныеДанные") Тогда
		Base64 = Base64Строка(Тело);
		РЕСТ.УстановитьТелоИзСтроки(Base64);
	КонецЕсли;
	
	
	Соединение = Новый HTTPСоединение(Сервер, 443,Пользователь, Пароль,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод(ТипЗапроса, РЕСТ);
	Если Результат.КодСостояния = 200 Тогда
		Если ВыхДанные = "ПолучитьТелоКакСтроку" Тогда
			ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Иначе
			ВхОбъект = Результат.ПолучитьТелоКакДвоичныеДанные();
		КонецЕсли;
		Результат = Истина;
	Иначе
		ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);		
		Результат = Ложь;		
	КонецЕсли;
	
	Возврат Новый Структура("Результат, ВхОбъект", Результат, ВхОбъект); 	
	
КонецФункции	



Функция ПользовательИС() Экспорт
	//
	ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдентификаторПользователяИБ = ТекущийПользовательИБ.УникальныйИдентификатор;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ИдентификаторПользователяИБ", ИдентификаторПользователяИБ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ = &ИдентификаторПользователяИБ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;

КонецФункции

Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции



Функция УстановитьФайлСНастройкойВОбъект(СсылкаНаОбъект, НастройкаЗагрузки, GUIDФайла) Экспорт     
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) И 
		ЗначениеЗаполнено(НастройкаЗагрузки) И
		ЗначениеЗаполнено(GUIDФайла) Тогда
		МП = РегистрыСведений.ЗагрузкиВОбъекты.СоздатьМенеджерЗаписи();
		МП.Объект = СсылкаНаОбъект;
		МП.НастройкаЗагрузки = НастройкаЗагрузки;
		МП.GUIDФайла = GUIDФайла;
		МП.ДатаЗагрузки = ТекущаяДата();
		МП.Записать(Истина);
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЗагрузитьФайлСНастройкойВОбъект(СсылкаНаОбъект, НастройкаЗагрузки, GUIDФайла) Экспорт
	
КонецФункции



Функция ПолучитьКомандуВводаНаОсновании(Хеш, ЗНАЧ ПолноеИмя) Экспорт
	
	Команда = Новый Структура("Идентификатор, Менеджер, Представление, РежимЗаписи, МножественныйВыбор, Обработчик");
	
	ПолноеИмя = СтрЗаменить(ПолноеИмя, "Справочник.", "Справочники."); 
	ПолноеИмя = СтрЗаменить(ПолноеИмя, "Документ.", "Документы."); 
	МенеджерОбъекта = Вычислить(ПолноеИмя);
	
	КомандыСоздатьНаОсновании = Новый ТаблицаЗначений;
	КомандыСоздатьНаОсновании.Колонки.Добавить("Идентификатор");
	КомандыСоздатьНаОсновании.Колонки.Добавить("Менеджер");
	КомандыСоздатьНаОсновании.Колонки.Добавить("Представление");
	КомандыСоздатьНаОсновании.Колонки.Добавить("РежимЗаписи");
	КомандыСоздатьНаОсновании.Колонки.Добавить("МножественныйВыбор");
	КомандыСоздатьНаОсновании.Колонки.Добавить("Обработчик");
	
	МенеджерОбъекта.ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании);
	
	Для Каждого КомандаОбъекта ИЗ КомандыСоздатьНаОсновании Цикл
		Если Хеш = НРег(СтрЗаменить(УправлениеБТВызовСервера.MD5ХешСтрока(КомандаОбъекта.Представление), " ", "")) Тогда
			ЗаполнитьЗначенияСвойств(Команда, КомандаОбъекта);
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Команда; 
	
КонецФункции


Функция ЗапланироватьФормированиеЗаказаКлиентаБТ(МассивУслуг) Экспорт
	
	НовыйМассивДокументов = Новый Массив;
	Если НЕ (ТипЗнч(МассивУслуг) = Тип("Массив")) Тогда
		Услуга = МассивУслуг;
		МассивУслуг = Новый Массив;
		МассивУслуг.Добавить(Услуга);
	КонецЕсли;
	
	Для Каждого ДокументОснование ИЗ МассивУслуг Цикл 
		
		//Надо удалить услугу из старых документов
		ЗатронутыеДокументы = УправлениеБТСервер.УдалитьУслугуИзПакетаДокументов(ДокументОснование);
		Для Каждого СсылкаНаДокумент ИЗ ЗатронутыеДокументы.ЗатронутыеДокументы Цикл 
			Сообщить(СсылкаНаДокумент);
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза", ДокументОснование.Дата);
		Запрос.УстановитьПараметр("Партнер", ДокументОснование.Партнер);
		Запрос.УстановитьПараметр("Контрагент", ДокументОснование.Контрагент);
		Запрос.УстановитьПараметр("Договор", ДокументОснование.Договор);
		Запрос.Текст = "ВЫБРАТЬ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор КАК Регистратор,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер КАК Партнер,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент КАК Контрагент,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор КАК Договор,
		               |	1 КАК Приоритет
		               |ПОМЕСТИТЬ СПриоритетом
		               |ИЗ
		               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
		               |ГДЕ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = &Контрагент
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = &Договор
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
		               |	2
		               |ИЗ
		               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
		               |ГДЕ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = &Контрагент
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
		               |	3
		               |ИЗ
		               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
		               |ГДЕ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = &Партнер
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Регистратор,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент,
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Договор,
		               |	4
		               |ИЗ
		               |	РегистрСведений.АктуальныйДокументФормированияДокументов.СрезПоследних(&ДатаСреза, ) КАК АктуальныйДокументФормированияДокументовСрезПоследних
		               |ГДЕ
		               |	АктуальныйДокументФормированияДокументовСрезПоследних.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		               |	И АктуальныйДокументФормированияДокументовСрезПоследних.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МИНИМУМ(СПриоритетом.Приоритет) КАК ЛучшийПриоритет
		               |ПОМЕСТИТЬ Приоритеты
		               |ИЗ
		               |	СПриоритетом КАК СПриоритетом
		               |
		               |ИМЕЮЩИЕ
		               |	НЕ МИНИМУМ(СПриоритетом.Приоритет) ЕСТЬ NULL
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СПриоритетом.Регистратор КАК Регистратор,
		               |	СПриоритетом.Партнер КАК Партнер,
		               |	СПриоритетом.Контрагент КАК Контрагент,
		               |	СПриоритетом.Договор КАК Договор
		               |ПОМЕСТИТЬ ЛучшийВариант
		               |ИЗ
		               |	Приоритеты КАК Приоритеты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ СПриоритетом КАК СПриоритетом
		               |		ПО (СПриоритетом.Приоритет = Приоритеты.ЛучшийПриоритет)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЛучшийВариант.Регистратор КАК Регистратор,
		               |	ЛучшийВариант.Партнер КАК Партнер,
		               |	ЛучшийВариант.Контрагент КАК Контрагент,
		               |	ЛучшийВариант.Договор КАК Договор,
		               |	УсловияФормированияДокументов.УсловияОтбора КАК УсловияОтбора,
		               |	УсловияФормированияДокументов.Расписание КАК Расписание
		               |ИЗ
		               |	ЛучшийВариант КАК ЛучшийВариант
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияФормированияДокументов КАК УсловияФормированияДокументов
		               |		ПО ЛучшийВариант.Регистратор = УсловияФормированияДокументов.Регистратор
		               |			И ЛучшийВариант.Партнер = УсловияФормированияДокументов.Партнер
		               |			И ЛучшийВариант.Контрагент = УсловияФормированияДокументов.Контрагент
		               |			И ЛучшийВариант.Договор = УсловияФормированияДокументов.Договор";
					   
		РезультатЗапроса = Запрос.Выполнить();	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		УсловиеРасписания = Неопределено;
		УслугаПланируется = Ложь;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			Условие = ВыборкаДетальныеЗаписи.УсловияОтбора;
			Если ЗначениеЗаполнено(Условие) Тогда
				МассивУслуг = Новый Массив();
				МассивУслуг.Добавить(ДокументОснование);			
				Расшифровка = Новый Массив;
				
				Результат = УправлениеБТСервер.УслугиПодходятПодУсловие(МассивУслуг, Условие, Расшифровка);	
				Если НЕ УслугаПланируется Тогда
					УслугаПланируется = Результат;
				КонецЕсли;
				
				Если Результат Тогда
					УсловиеРасписания = Новый Структура("УсловияОтбора, Расписание", ВыборкаДетальныеЗаписи.УсловияОтбора, ВыборкаДетальныеЗаписи.Расписание);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		Если НЕ УслугаПланируется Тогда
			НовыйМассивДокументов.Добавить(ДокументОснование);
		Иначе
			//Установить в очередь;
			Если УсловиеРасписания <> Неопределено Тогда
				РезультатПланирования = УправлениеБТСервер.ЗапланироватьУслугуВЗаказКлиента(ДокументОснование, УсловиеРасписания);
				Если НЕ РезультатПланирования Тогда
					//Возникла ошибка планирования переведем в ручной режим
					НовыйМассивДокументов.Добавить(ДокументОснование);
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Истина;
	МассивУслуг = НовыйМассивДокументов;
	Если МассивУслуг.Количество() > 0 Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


/// ВЫПИЛИТЬ СТАРЬЕ ОСТОРОЖНО
Функция ПровестиОбъект(ДокументЗаказСсылка, СтарыеДокументы) 
	
	//ОбъектСервер = ДокументЗаказСсылка.ПолучитьОбъект();
	//ОбъектСервер.Записать(РежимЗаписиДокумента.Проведение);
	//
	//Если СтарыеДокументы <> Неопределено И СтарыеДокументы.Акт <> Неопределено Тогда
	//	АктВыполненныхРабот = СтарыеДокументы.Акт.ПолучитьОбъект();
	//	Если ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ДокументОтраженияУчета) = "РеализацияТоваровУслуг" Тогда
	//		АктВыполненныхРабот.Товары.Очистить();			
	//	Иначе
	//		АктВыполненныхРабот.Услуги.Очистить();
	//	КонецЕсли;
	//Иначе
	//	Если ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ДокументОтраженияУчета) = "РеализацияТоваровУслуг" Тогда
	//		АктВыполненныхРабот = Документы.РеализацияТоваровУслуг.СоздатьДокумент();		
	//	Иначе
	//		АктВыполненныхРабот = Документы.АктВыполненныхРабот.СоздатьДокумент();		
	//	КонецЕсли;
	//КонецЕсли;
	//АктВыполненныхРабот.Заполнить(ДокументЗаказСсылка);
	//АктВыполненныхРабот.Дата = ДокументЗаказСсылка.Дата;
	//АктВыполненныхРабот.Записать(РежимЗаписиДокумента.Проведение);
	//
	//Основание = Новый Структура("ДокументОснование, Организация", АктВыполненныхРабот.Ссылка, АктВыполненныхРабот.Организация);
	//Возврат Основание
	
КонецФункции
Процедура ПровестиСФ(СФСсылка) 
	
	//ОбъектСервер = СФСсылка.ПолучитьОбъект();
	//ОбъектСервер.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры
Функция РаспровестиПакетДокументов(ЗаказКлиента) 
//	
//	Результат = Новый Структура("Акт, СФ");
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
//	Если ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ДокументОтраженияУчета) = "РеализацияТоваровУслуг" Тогда
//		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//		               |	АктВыполненныхРабот.Ссылка
//		               |ИЗ
//		               |	Документ.РеализацияТоваровУслуг КАК АктВыполненныхРабот
//		               |ГДЕ
//		               |	АктВыполненныхРабот.Проведен = ИСТИНА
//		               |	И АктВыполненныхРабот.ЗаказКлиента = &ЗаказКлиента
//		               |
//		               |УПОРЯДОЧИТЬ ПО
//		               |	АктВыполненныхРабот.Номер";
//	Иначе			   
//		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//		               |	АктВыполненныхРабот.Ссылка
//		               |ИЗ
//		               |	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
//		               |ГДЕ
//		               |	АктВыполненныхРабот.АктПоЗаказам = ИСТИНА
//		               |	И АктВыполненныхРабот.Проведен = ИСТИНА
//		               |	И АктВыполненныхРабот.ЗаказКлиента = &ЗаказКлиента
//		               |
//		               |УПОРЯДОЧИТЬ ПО
//		               |	АктВыполненныхРабот.Номер";
//	КонецЕсли;
//				   
//	АктВыборка = Запрос.Выполнить().Выбрать();
//	Если АктВыборка.Следующий() Тогда
//		Результат.Акт = АктВыборка.Ссылка;
//		
//		
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("ДокументОснование", Результат.Акт);
//		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//		               |	СчетФактураВыданный.Ссылка
//		               |ИЗ
//		               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
//		               |ГДЕ
//		               |	СчетФактураВыданный.Проведен = ИСТИНА
//		               |	И СчетФактураВыданный.ДокументОснование = &ДокументОснование
//		               |
//		               |УПОРЯДОЧИТЬ ПО
//		               |	СчетФактураВыданный.Номер";
//		СФВыборка = Запрос.Выполнить().Выбрать();
//		Если СФВыборка.Следующий() Тогда
//			Результат.СФ = СФВыборка.Ссылка;
//			
//			СФ = Результат.СФ.ПолучитьОбъект();
//			СФ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//		КонецЕсли;		
//		
//		Акт = Результат.Акт.ПолучитьОбъект();
//		Акт.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//		
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда 
//		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
//		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//	КонецЕсли;
//	
//	Возврат Результат;
КонецФункции
Процедура УстановитьГрафикОплаты(ОбъектСервер) 
//	//
//	ОбъектСервер.ЭтапыГрафикаОплаты.Очистить();
//	СтрокаГрафика = ОбъектСервер.ЭтапыГрафикаОплаты.Добавить();
//	СтрокаГрафика.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;      
//	СтрокаГрафика.ДатаПлатежа = ТекущаяДата();
//	СтрокаГрафика.ПроцентПлатежа = 100;     
//	СтрокаГрафика.СуммаПлатежа = ОбъектСервер.СуммаДокумента;
КонецПроцедуры


