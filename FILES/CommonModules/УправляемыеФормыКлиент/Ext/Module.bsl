
// Функции Клиента
Функция ПриОткрытии(ЭтаФорма, Отказ, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПриОткрытии(ЭтаФорма, Отказ, ДополнительноеДействие);	
КонецФункции

Функция ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, ДополнительноеДействие);	
КонецФункции

Функция ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, ДополнительноеДействие);	
КонецФункции

Функция ПриПовторномОткрытии(ЭтаФорма, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПриПовторномОткрытии(ЭтаФорма, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, ДополнительноеДействие);	
КонецФункции

Функция ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаНавигационнойСсылки(ЭтаФорма,НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ДополнительноеДействие);	
КонецФункции

Функция ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, ДополнительноеДействие);	
КонецФункции

Функция ПриИзмененииПараметровЭкрана(ЭтаФорма, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, ДополнительноеДействие);	
КонецФункции


// Функции Клиента Объект

Функция ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, ДополнительноеДействие);	
КонецФункции

Функция ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, ДополнительноеДействие);	
КонецФункции

Функция ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, ДополнительноеДействие);	
КонецФункции


//ПЕРЕОПРЕДЕЛЕНИЕ ТИПОВЫХ ВЫЗОВОВ

Процедура МОКВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Список) Экспорт
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Элементы.Список);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = МенюОтчетыКлиент");
		Модуль.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Список);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры

Процедура УПВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Список) Экспорт
	
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = УправлениеПечатьюКлиент");
		Модуль.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Список);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры

Процедура СФКВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда) Экспорт
	
	//СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = СобытияФормКлиент");
		Модуль.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры

Процедура ВНОКВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Список) Экспорт
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Элементы.Список);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = ВводНаОснованииКлиент");
		Модуль.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Список);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры



Процедура ВыполнитьНазначаемуюКомандуНаКлиенте(ИмяМодуля, ЭтаФорма, КомандаИмя) Экспорт
	
	//ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя)
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = "+ ИмяМодуля);
		Модуль.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, КомандаИмя);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры

Процедура ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(ИмяМодуля, Команда, ЭтаФорма, Объект) Экспорт
	
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = "+ ИмяМодуля);
		Модуль.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры

Процедура ВыполнитьПодключаемуюКомандуОтчет(ИмяМодуля, Команда, ЭтаФорма, Объект) Экспорт
	
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	Модуль = Неопределено;
	Попытка
		Выполнить("Модуль = "+ ИмяМодуля);
		Модуль.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры





Процедура ВыполнитьКоманду(ЭтотОбъект, Команда, Источник) Экспорт
	
	МаркетПлейсКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Источник, "Начало");	
	
	Если Лев(Команда.Имя, 3) = "БТ_" Тогда
		//Это внутренняя команда
		КомандаСервера = Новый Структура;
		КомандаСервера.Вставить("Имя", Команда.Имя);
		
		ОбъектыДляПечати = Новый Массив;
		Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
			Для Каждого Строка ИЗ Источник.ВыделенныеСтроки Цикл
				ОбъектыДляПечати.Добавить(Строка);
			КонецЦикла
		ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			ОбъектыДляПечати.Добавить(Источник.Ссылка);
		КонецЕсли;
		
		РезультатВыполнения = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВыполнитьКоманду(КомандаСервера, ОбъектыДляПечати);
		Если РезультатВыполнения.Результат Тогда
			
			Если РезультатВыполнения.СразуНаПечать Тогда
				КоллекцияПечатныхФорм = РезультатВыполнения.КоллекцияПечатныхФорм;
				ФормаПечати = ПолучитьФорму("ОбщаяФорма.ПечатьДокументовБТ", Новый Структура("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм));
				ФормаПечати.Печать(Неопределено);
				ФормаПечати = Неопределено;
			Иначе				
				Если ДополнительныеОтчетыИПечатныеФормыВызовСервер.ЕстьДонорскаяПечатнаяФорма() Тогда
					КоллекцияПечатныхФорм = РезультатВыполнения.КоллекцияПечатныхФорм;
					ПараметрыИсточника = Новый Структура("ИдентификаторКоманды", Команда.Имя);
					ФормаПечати = ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", Новый Структура("ИсточникДанных, КоллекцияПечатныхФорм, ОбъектыДляПечати, ПараметрыИсточника", РезультатВыполнения.ВнешняяОбработка, КоллекцияПечатныхФорм, ОбъектыДляПечати, ПараметрыИсточника));
				Иначе	
					КоллекцияПечатныхФорм = РезультатВыполнения.КоллекцияПечатныхФорм;
					ФормаПечати = ОткрытьФорму("ОбщаяФорма.ПечатьДокументовБТ", Новый Структура("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм));
				КонецЕсли;			
			КонецЕсли;			
						
		Иначе
			Сообщить("Ошибка формирования печатных форм");
		КонецЕсли;
		
	ИначеЕсли Лев(Команда.Имя, 3) = "АТ_" Тогда
		КомандаСервера = Новый Структура;
		КомандаСервера.Вставить("Имя", Команда.Имя);
		
		ОбъектыДляПечати = Новый Массив;
		Если ТипЗнч(Источник) = Тип("ТаблицаФормы") Тогда
			Для Каждого Строка ИЗ Источник.ВыделенныеСтроки Цикл
				ОбъектыДляПечати.Добавить(Строка);
			КонецЦикла
		ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			ОбъектыДляПечати.Добавить(Источник.Ссылка);
		КонецЕсли;
		
		РезультатВыполнения = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВыполнитьКомандуОтчета(КомандаСервера, ОбъектыДляПечати);
		Если РезультатВыполнения.Результат Тогда			
			ИмяОбработки = РезультатВыполнения.Адрес;
			П = Новый Структура("ОбъектыДляПечати", ОбъектыДляПечати);
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", П);
		Иначе
			Сообщить("Ошибка формирования печатных форм");
		КонецЕсли;
		
	ИначеЕсли Лев(Команда.Имя, 3) = "ВО_" Тогда
		
		Идентификаторы = СтрРазделить(Команда.Имя, "_", Ложь);
		Идентификаторы.Удалить(0); // ВО
		ХешКоманды =  Идентификаторы[0];
		Идентификаторы.Удалить(0); // ВО
		ПолноеИмя = СтрСоединить(Идентификаторы, ".");
		
		РазделеннаяСтрока = СтрРазделить(ЭтотОбъект.ИмяФормы, ".");
		ИмяОбъекта = РазделеннаяСтрока[0]+"."+РазделеннаяСтрока[1];
		
		КомандаИсх = УправлениеБТВызовСервера.ПолучитьКомандуВводаНаОсновании(ХешКоманды, ИмяОбъекта);
		
		//Источник
		ОписаниеКоманды = Новый Структура();
		Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") Тогда
			//Это элемент
			ОписаниеКоманды = Источник.Ссылка;
		Иначе
			Если ЗначениеЗаполнено(КомандаИсх.МножественныйВыбор) И КомандаИсх.МножественныйВыбор Тогда
				ОписаниеКоманды = Источник.ВыделенныеСтроки;			
			Иначе
				ОписаниеКоманды = Источник.ТекущаяСтрока;
			КонецЕсли;
		КонецЕсли;		
		
		Если ЭтотОбъект.Модифицированность Тогда
			Если КомандаИсх.РежимЗаписи = "Проводить" Тогда
				Сообщить("Требуется предварительно записать и провести объект");
			Иначе
				Сообщить("Требуется предварительно записать объект");				
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(КомандаИсх.Обработчик) Тогда
				Выполнить("Результат = "+КомандаИсх.Обработчик+"(ОписаниеКоманды);");
			ИначеЕсли ЗначениеЗаполнено(КомандаИсх.Менеджер) Тогда
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Основание", ОписаниеКоманды);
				ОткрытьФорму(КомандаИсх.Менеджер+".ФормаОбъекта", ПараметрыОткрытия);
			КонецЕсли;
			
		КонецЕсли;
		
		
		
	Иначе
		Модуль = Неопределено;
		ИмяМодуля = "ПодключаемыеКомандыКлиент";
		Попытка
			Выполнить("Модуль = "+ ИмяМодуля);
			Модуль.ВыполнитьКоманду(ЭтотОбъект, Команда, Источник);
		Исключение
			//	
		КонецПопытки
	КонецЕсли;
	
	МаркетПлейсКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Источник, "Конец");	
	
КонецПроцедуры

Процедура ОбновитьКоманды(ЭтотОбъект, Список) Экспорт
	//ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	Модуль = Неопределено;
	ИмяМодуля = "ПодключаемыеКомандыКлиентСервер";
	Попытка
		Выполнить("Модуль = "+ ИмяМодуля);
		Модуль.ОбновитьКоманды(ЭтотОбъект, Список);
	Исключение
		//	
	КонецПопытки
	
КонецПроцедуры





#Область Действия

Функция Действие(ЭтаФорма, Поле, ДополнительноеДействие) Экспорт
	Возврат МаркетПлейсКлиент.Действие(ЭтаФорма, Поле, ДополнительноеДействие);	
КонецФункции

Функция ДействиеПриИзменении(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриИзменении", ДополнительноеДействие);
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ДанныеВыбора, СтандартнаяОбработка", Элемент, ДанныеВыбора, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ДействиеНачалоВыбора", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, СтандартнаяОбработка", Элемент, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "НачалоВыбораИзСписка", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, СтандартнаяОбработка", Элемент, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "Очистка", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Направление, СтандартнаяОбработка", Элемент, Направление, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "Регулирование", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, СтандартнаяОбработка", Элемент, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "Открытие", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, СтандартнаяОбработка", Элемент, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "Создание", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ВыбранноеЗначение, СтандартнаяОбработка", Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ОбработкаВыбора", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Текст, СтандартнаяОбработка", Элемент, Текст, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ИзменениеТекстаРедактирования", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка", Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "АвтоПодбор", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка", Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ОкончаниеВводаТекста", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриАктивизацииСтроки", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеВыборЗначения(ЭтаФорма, Элемент, Значение, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Значение, СтандартнаяОбработка", Элемент, Значение, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ВыборЗначения", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриАктивизацииПоля", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриАктивизацииЯчейки", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Отказ, Копирование, Родитель, Группа, Параметр", Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередНачаломДобавления", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Отказ", Элемент, Отказ);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередНачаломИзменения", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Отказ", Элемент, Отказ);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередУдалением", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, НоваяСтрока, Копирование", Элемент, НоваяСтрока, Копирование);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриНачалеРедактирования", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередОкончаниемРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, НоваяСтрока, ОтменаРедактирования, Отказ", Элемент, НоваяСтрока, ОтменаРедактирования, Отказ);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередОкончаниемРедактирования", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, НоваяСтрока, ОтменаРедактирования", Элемент, НоваяСтрока, ОтменаРедактирования);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПриОкончанииРедактирования", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	ОтменаРедактирования = Параметры["ОтменаРедактирования"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Строка, Отказ", Элемент, Строка, Отказ);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередРазворачиванием", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, Строка, Отказ", Элемент, Строка, Отказ);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПередСворачиванием", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Отказ = Параметры["Отказ"];
	Возврат Результат;
КонецФункции

Функция ДействиеПослеУдаления(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПослеУдаления", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент", Элемент);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПослеУдаления", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	Возврат Результат;
КонецФункции

Функция ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Результат = МаркетПлейсКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, ДополнительноеДействие);	
	Возврат Результат;
КонецФункции

Функция ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ПараметрыПеретаскивания, Выполнение", Элемент, ПараметрыПеретаскивания, Выполнение);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "НачалоПеретаскивания", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле", Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ПроверкаПеретаскивания", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка", Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "ОкончаниеПеретаскивания", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

Функция ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ДополнительноеДействие) Экспорт
	Параметры = Новый Структура("Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле", Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	Результат = МаркетПлейсКлиент.Действие(ЭтаФорма, Параметры, "Перетаскивание", ДополнительноеДействие);	
	Элемент = Параметры["Элемент"];
	СтандартнаяОбработка = Параметры["СтандартнаяОбработка"];
	Возврат Результат;
КонецФункции

#КонецОбласти


