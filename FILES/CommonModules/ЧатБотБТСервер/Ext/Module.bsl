
Функция СформироватьЭлементСервиса(СервисШины)
	
	Сервис = Новый Структура;
	
	ТекстURL = "";
	Если СервисШины.СпособПередачиПараметров = "GET" Тогда
		Для Каждого Параметр ИЗ СервисШины.Параметры Цикл
			Если ТекстURL <> "" Тогда
				ТекстURL = ТекстURL + "&";
			КонецЕсли;	
			ТекстURL = ТекстURL + Параметр.ИмяПараметра + "=" + Параметр.ШаблонЗначения; 
		КонецЦикла;
		
		Если ТекстURL <> "" Тогда
			ТекстURL = "?" + ТекстURL;
		КонецЕсли; 
		
	ИначеЕсли СервисШины.СпособПередачиПараметров = "BODY" Тогда
		
		ТекстТела = Новый Структура;
		Для Каждого Параметр ИЗ СервисШины.Параметры Цикл	
			ТекстТела.Вставить(Параметр.ИмяПараметра, Параметр.ШаблонЗначения);
		КонецЦикла;
		ТекстТела = УправлениеБТВызовСервера.ВJSON(ТекстТела);
		Сервис.Вставить("templatebody", ТекстТела);	
		
	ИначеЕсли СервисШины.СпособПередачиПараметров = "REST" Тогда
		
		Для Каждого Параметр ИЗ СервисШины.Параметры Цикл
			Если ТекстURL <> "" Тогда
				ТекстURL = ТекстURL + "/";
			КонецЕсли;	
			ТекстURL = ТекстURL + Параметр.ШаблонЗначения; 
		КонецЦикла;
		
		Если ТекстURL <> "" Тогда
			ТекстURL = "/" + ТекстURL;
		КонецЕсли; 
	
	КонецЕсли;
	
	
	URL = ?(СервисШины.СерверШины.ЗащищенноеСоединение, "https://", "http://") + СервисШины.СерверШины.URL;
	Сервис.Вставить("URL",  URL + СервисШины.URL + ТекстURL);	
	Сервис.Вставить("method", СервисШины.МетодПередачи);	
	Сервис.Вставить("auth", УправлениеБТВызовСервера.Base64Кодировать(СервисШины.СерверШины.Логин + ":" + СервисШины.СерверШины.Пароль));	
	
	Возврат Сервис;
	
КонецФункции

Функция СформироватьЭлементДерева(Правило, Последовательность, СтекОбработанных) Экспорт
	
	//ВнутреннийСтек = СтекОбработанных;
	Если СтекОбработанных.Найти(Правило.Идентификатор) <> Неопределено Тогда
		Элемент = Новый Структура;
		Элемент.Вставить("goto",  Строка(Правило.Идентификатор));		
	Иначе
		
		СтекОбработанных.Добавить(Строка(Правило.Идентификатор));
		
		Элемент = Новый Структура;
		Элемент.Вставить("ID",  Строка(Правило.Идентификатор));
		Элемент.Вставить("type",  Строка(Правило.ТипЗапроса));
		Элемент.Вставить("name" , Правило.Представление);
		Элемент.Вставить("query",  Правило.СопровождающийТекст);
		Элемент.Вставить("option",  Правило.УсловиеПредшественника);
		Элемент.Вставить("exoption",  Правило.РасширенноеУсловие);
		Элемент.Вставить("exname",  Правило.РасширенныйСопровождающийТекст);
		Если Правило.СервисШины <> Справочники.СервисыШины.ПустаяСсылка() И ТипЗнч(Правило.СервисШины) = Тип("СправочникСсылка.СервисыШины") Тогда
			Элемент.Вставить("service",  СформироватьЭлементСервиса(Правило.СервисШины));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Правило.Следующий) Тогда
			
			МассивСледующихЭлементов = Новый Массив;		
			СледующееПравило = Последовательность.Найти(Правило.Следующий, "Идентификатор");
			
			СледующийЭлемент = СформироватьЭлементДерева(СледующееПравило, Последовательность, СтекОбработанных);
			МассивСледующихЭлементов.Добавить(СледующийЭлемент);
		
			Элемент.Вставить("NextQuery", СледующийЭлемент);
		Иначе
			Отбор = Новый Структура();
			Отбор.Вставить("Предшественник", Правило.Идентификатор);
			СледующиеСтроки = Последовательность.НайтиСтроки(Отбор);

			МассивСледующихЭлементов = Новый Массив;
			Для Каждого СледующееПравило ИЗ СледующиеСтроки Цикл
				СледующийЭлемент = СформироватьЭлементДерева(СледующееПравило, Последовательность, СтекОбработанных);
				МассивСледующихЭлементов.Добавить(СледующийЭлемент);
			КонецЦикла;
			
			Если МассивСледующихЭлементов.Количество() > 0 Тогда 
				Элемент.Вставить("NextQuery", МассивСледующихЭлементов);
			КонецЕсли;		
		КонецЕсли;
		
		СтекОбработанных.Удалить(СтекОбработанных.Количество()-1);
		
	КонецЕсли;
	
	
	Возврат Элемент; 
	
КонецФункции

Функция СформироватьДеревоВопросовПоДокументу(СсылкаНаДокумент) Экспорт
		
	СтекОбработанных = Новый Массив;
	Последовательность = СсылкаНаДокумент.Последовательность;	
	СтрокаНачала = Последовательность.Найти(Перечисления.ТипЗапросаСхемы.Старт, "ТипЗапроса");
	Если СтрокаНачала <> Неопределено Тогда 	
		Дерево = СформироватьЭлементДерева(СтрокаНачала, Последовательность, СтекОбработанных);
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции





//////////////////////////////////////////////////////////////////////////
//								HTTP service
//////////////////////////////////////////////////////////////////////////

#Область HTTPСервисы

//
// 							ChatBot
//

Функция ПолучитьЧатДляПользователя(ПользовательОБТ, Система)
	
	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ДоступныеЧатБоты.Регистратор КАК Регистратор,
	               |	ДоступныеЧатБоты.НомерСтроки КАК НомерСтроки,
	               |	ДоступныеЧатБоты.Активность КАК Активность,
	               |	ДоступныеЧатБоты.СистемаЧатБота КАК СистемаЧатБота,
	               |	ДоступныеЧатБоты.Партнер КАК Партнер,
	               |	ДоступныеЧатБоты.Контрагент КАК Контрагент,
	               |	ДоступныеЧатБоты.ПользовательОБТ КАК ПользовательОБТ,
	               |	ДоступныеЧатБоты.ТекстЧата КАК ТекстЧата
	               |ИЗ
	               |	РегистрСведений.ДоступныеЧатБоты КАК ДоступныеЧатБоты
	               |ГДЕ
	               |	ДоступныеЧатБоты.ПользовательОБТ = &ПользовательОБТ
	               |	И ДоступныеЧатБоты.СистемаЧатБота = &СистемаЧатБота
	               |	И ВЫБОР
	               |			КОГДА &ИспользоватьПартнера
	               |				ТОГДА ДоступныеЧатБоты.Партнер В (&Партнер)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА &ИспользоватьКонтрагента
	               |				ТОГДА ДоступныеЧатБоты.Контрагент В (&Контрагент)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	Запрос.УстановитьПараметр("СистемаЧатБота", Система);
	Если ПользовательОБТ = Справочники.ПользователиОБТ.ПустаяСсылка() Тогда
		Запрос.УстановитьПараметр("ПользовательОБТ", ПользовательОБТ);
		Запрос.УстановитьПараметр("ИспользоватьПартнера", Ложь);
		Запрос.УстановитьПараметр("ИспользоватьКонтрагента", Ложь);
		Запрос.УстановитьПараметр("Партнер", Справочники.Партнеры.ПустаяСсылка());
		Запрос.УстановитьПараметр("Контрагент", Справочники.Партнеры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ИспользоватьПартнера", Истина);
		Запрос.УстановитьПараметр("ИспользоватьКонтрагента", Истина);
		Запрос.УстановитьПараметр("ПользовательОБТ", ПользовательОБТ.ПользовательОБТ);
		Запрос.УстановитьПараметр("Партнер", ПользовательОБТ.Партнеры);
		Запрос.УстановитьПараметр("Контрагент", ПользовательОБТ.Контрагенты);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ТекстЧата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ChatBOTПолучитьЧат(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();		
	КонецЕсли;
	
	typechat = Запрос.ПараметрыURL["typechat"];
	СистемаЧатБота = Перечисления.СистемыДляЧатов[typechat];
	
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);	
	КарточкаПользователя = УправлениеБТСервер.ПолучитьДанныеПоПользователю(ЖСОН);
	Если КарточкаПользователя <> Неопределено Тогда 
		ТекстЧатБот = ПолучитьЧатДляПользователя(КарточкаПользователя, СистемаЧатБота);
		Если ЗначениеЗаполнено(ТекстЧатБот) Тогда 
			Ответ.КодСостояния = 200;
			Ответ.УстановитьТелоИзСтроки(ТекстЧатБот);
		КонецЕсли;
		
	Иначе
		//Безъимянный пользоваель вернем чат по умолчанию: если он есть
		ТекстЧатБот = ПолучитьЧатДляПользователя(Справочники.ПользователиОБТ.ПустаяСсылка(), СистемаЧатБота);
		Если ЗначениеЗаполнено(ТекстЧатБот) Тогда 
			Ответ.КодСостояния = 200;
			Ответ.УстановитьТелоИзСтроки(ТекстЧатБот);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;		
КонецФункции


Функция СоздатьНовыйЗаказ(ПользовательОБТ)
	
	НовыйОбъект = ИИСервер.ВернутьОписаниеСсылки(Документы.ЗаказИзКорзины.ПустаяСсылка(), Неопределено);
	Если ТипЗнч(ПользовательОБТ) = Тип("СправочникСсылка.ПользователиОБТ") Тогда
		//
	Иначе
		НовыйОбъект.Дата = ТекущаяДата();
		НовыйОбъект.Командируемый = ПользовательОБТ.ПользовательОБТ.Командируемый;
		НовыйОбъект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		НовыйОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		НовыйОбъект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектЗаказ =  ИИСервер.ПолучитьСсылкуНаОбъект(НовыйОбъект);
	ОбъектЗаказ.Записать();
	СсылкаНаЗаказ = ОбъектЗаказ.Ссылка;
		
	Возврат СсылкаНаЗаказ;
	
КонецФункции

Функция РазобратьОтветыБота(СсылкаНаОбъект, ПользовательОБТ, СистемаЧатБота, ОтветыИзЧатБота, МассивОтветовЧата = Неопределено)
	
	Если МассивОтветовЧата = Неопределено Тогда
		МассивОтветовЧата = Новый Массив;	
	КонецЕсли;
	
	Для Каждого ОтветЧатБота ИЗ ОтветыИзЧатБота Цикл
		Если ОтветЧатБота.Свойство("type") Тогда
			Если ОтветЧатБота.type <> "Старт" И ОтветЧатБота.type <> "Завершение" Тогда
				//Обработаем ответ
				
				Если ОтветЧатБота.Свойство("ask") Тогда
					Если ТипЗнч(ОтветЧатБота.ask) = Тип("Массив") Тогда
						//Это сложный ответ, обработаем в рекурсии
						МассивОтветовЧата = РазобратьОтветыБота(СсылкаНаОбъект, ПользовательОБТ, СистемаЧатБота, ОтветЧатБота.ask, МассивОтветовЧата);
					Иначе
						Сообщение = ОтветЧатБота.query;
						ВопросБота = Новый Структура("Владелец, ПользовательОБТ, Пользователь, Объект, Система, Сообщение", Перечисления.ВладелецСообщенияЧата.Автоматически, ПользовательОБТ, СистемаЧатБота, СсылкаНаОбъект, СистемаЧатБота, Сообщение);
						МассивОтветовЧата.Добавить(ВопросБота);
						
						Сообщение = ОтветЧатБота.ask;
						ОтветБота = Новый Структура("Владелец, ПользовательОБТ, Пользователь, Объект, Система, Сообщение", Перечисления.ВладелецСообщенияЧата.Клиент, ПользовательОБТ, СистемаЧатБота, СсылкаНаОбъект, СистемаЧатБота, Сообщение);
						МассивОтветовЧата.Добавить(ОтветБота);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОтветовЧата;
	
КонецФункции

Функция СохранитьЧат(МассивОтветовЧата)
	
	МоментВремени = ТекущаяДата()-500;
	Для Каждого ОтветЧата ИЗ МассивОтветовЧата Цикл
		
		МоментВремени = МоментВремени+1;
		Чат = РегистрыСведений.ЧатСПользователямиОБТ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Чат, ОтветЧата);
		Чат.Период = МоментВремени;
		Чат.КлючСообщения = Новый УникальныйИдентификатор();
		Чат.Записать(Истина);
		
	КонецЦикла;
	
КонецФункции

Функция ChatBOTСоздатьЗаказ(Запрос) Экспорт
	Ответ = Новый HTTPСервисОтвет(500);
	
	Если ТипЗнч(Запрос) = Тип("Структура") Тогда
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку;
	Иначе
		ТелоЗапроса = Запрос.ПолучитьТелоКакСтроку();		
	КонецЕсли;
	
	typechat = Запрос.ПараметрыURL["typechat"];
	СистемаЧатБота = Перечисления.СистемыДляЧатов[typechat];
	
	КарточкаПользователя = Неопределено;
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);
	КарточкаПользователя = УправлениеБТСервер.ПолучитьДанныеПоПользователю(ЖСОН);
	
	Ответы = Неопределено;
	ЖСОН = УправлениеБТВызовСервера.ИзJSON(ТелоЗапроса);
	Если ЖСОН.Свойство("answer") Тогда
		Ответы = ЖСОН["answer"];
	КонецЕсли;

	Если КарточкаПользователя <> Неопределено Тогда 
		 СсылкаНаЗаказ = СоздатьНовыйЗаказ(КарточкаПользователя);
		 МассивОтветовЧата = РазобратьОтветыБота(СсылкаНаЗаказ, КарточкаПользователя.ПользовательОБТ, СистемаЧатБота, Ответы);
		 СохранитьЧат(МассивОтветовЧата);
	Иначе
		//Безъимянный пользоваель, хз что с ним делать
		
	КонецЕсли;
	
	Возврат Ответ;		
КонецФункции

#КонецОбласти
