

//// МАРКЕТПЛЕЙС ДЛЯ РАЗРАБОТЧКОВ КОТОРЫЕ ХОТЯТ ЗАРАБОТАТЬ

// Процедуры Формы
Функция ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриСозданииНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Отказ, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПроверкиЗаполненияНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, ДополнительноеДействие) Экспорт
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриСохраненииДанныхВНастройкахНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Настройки);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПередЗагрузкойДанныхИзНастроекНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Настройки);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриЗагрузкеДанныхИзНастроекНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Настройки);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Процедуры формы объекта
Функция ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриЧтенииНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, ТекущийОбъект);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПередЗаписьюНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриЗаписиНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПослеЗаписиНаСервере", ЭтаФорма.ИмяФормы, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);");
	КонецЦикла;
	Возврат Результат;
КонецФункции



// Процедуры Менеджера
Функция ОбработкаПолученияФормы(ТипМодуля = "", ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПолученияФормы", ТипМодуля, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
    	Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;

КонецФункции

Функция ОбработкаПолученияДанныхВыбора(ТипМодуля = "", ДанныеВыбора, Параметры, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПолученияДанныхВыбора", ТипМодуля, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ДанныеВыбора, Параметры, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбработкаПолученияПолейПредставления(ТипМодуля = "", Поля, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПолученияПолейПредставления", ТипМодуля, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(Поля, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбработкаПолученияПредставления(ТипМодуля = "", Данные, Представление, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПолученияПредставления", ТипМодуля, ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(Данные, Представление, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции




// Процедуры Объекта
Функция ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПередЗаписью", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриЗаписи(ЭтотОбъект, Отказ, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриЗаписи", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ);");
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, ДополнительноеДействие) Экспорт
	
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПроведения", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ, РежимПроведения);");
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаЗаполнения", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаУдаленияПроведения", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПередУдалением(ЭтотОбъект, Отказ, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПередУдалением", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриУстановкеНовогоНомера", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, СтандартнаяОбработка, Префикс);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ПриКопировании(ЭтотОбъект, ОбъектКопирования, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ПриКопировании", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, ОбъектКопирования, ДополнительноеДействие);");
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ДополнительноеДействие) Экспорт
	Результат = Ложь;
	СписокОбработчиков = ПолучитьСписокОбработчиков("ОбработкаПроверкиЗаполнения", ЭтотОбъект.Метаданные().ПолноеИмя(), ДополнительноеДействие);
	Для Каждого Обработчик ИЗ СписокОбработчиков Цикл
		Результат = Истина;
		ВОбработка = Обработчик.Обработка;                      
	    Выполнить("ВОбработка.ЭтотОбъект."+Обработчик.Команда.Обработчик+"(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);");
	КонецЦикла;
	Возврат Результат;
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СведенияОВнешнейОбработке(Версия) Экспорт
	//
	Сведения = Новый Структура;
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Назначение");
	Команды.Колонки.Добавить("Событие");
	
	Команды.Колонки.Добавить("Использование");
	Команды.Колонки.Добавить("Модуль");
	Команды.Колонки.Добавить("ДополнительноеДействие");
	Команды.Колонки.Добавить("Обработчик");
	
	Сведения.Вставить("Версия", Версия);
	Сведения.Вставить("Команды", Команды);
	
	Возврат Сведения;
КонецФункции

Функция ПолучитьСписокОбработчиков(Событие, ИмяФормы, ДополнительноеДействие) Экспорт
	
	СписокОбработчиковПИ = МаркетПлейсКлиентСерверПовтИсп.СписокОбработчиковСервер(ИмяФормы, Событие, ДополнительноеДействие); 
	СписокОбработчиков = Новый Массив;
	Если СписокОбработчиковПИ.Количество() > 0 Тогда
		Параметры = Новый Структура("ЭтаФорма, ДополнительноеДействие", ИмяФормы, ДополнительноеДействие); 
		Для Каждого СсылкаНаОбработчик ИЗ СписокОбработчиковПИ Цикл 
			Обработчик =  МаркетПлейсСервер.ПодключитьОбработку(СсылкаНаОбработчик.Ссылка, Событие, Параметры);
			СписокОбработчиков.Добавить( Обработчик );
		КонецЦикла;	
		//СписокОбработчиков = МаркетПлейсСервер.СписокОбработчиков(Событие, Параметры); //Новый Структура("Обработка, Команда", ИмяОбработки, КомандаКлиент)	
	КонецЕсли;
	
	Возврат СписокОбработчиков;
	
КонецФункции	


Функция СохранитьДействиеПоУмолчанию(ВхЭтаФорма, Элемент, Действие) Экспорт
	
	Форма = ВхЭтаФорма.ИмяФормы;
	Поле = ВхЭтаФорма.Элементы[Элемент];
	ЗначениеДействия = Поле.ПолучитьДействие(Действие);
	
	ПереопределениеДействий = РегистрыСведений.ПереопределениеДействий.СоздатьМенеджерЗаписи();
	ПереопределениеДействий.Форма = Форма;
	ПереопределениеДействий.Элемент = Элемент;
	ПереопределениеДействий.Действие = Действие;
	ПереопределениеДействий.Прочитать();
	Если Не ПереопределениеДействий.Выбран() Тогда
		ПереопределениеДействий.Форма = Форма;
		ПереопределениеДействий.Элемент = Элемент;
		ПереопределениеДействий.Действие = Действие;
		ПереопределениеДействий.ЗначениеДействия = ЗначениеДействия;
	    ПереопределениеДействий.Записать();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДействиеПоУмолчанию(Форма, Элемент, Действие) Экспорт
	
	Результат = Неопределено;
		
	ПереопределениеДействий = РегистрыСведений.ПереопределениеДействий.СоздатьМенеджерЗаписи();
	ПереопределениеДействий.Форма = Форма;
	ПереопределениеДействий.Элемент = Элемент;
	ПереопределениеДействий.Действие = Действие;
	ПереопределениеДействий.Прочитать();
	Если ПереопределениеДействий.Выбран() Тогда
		Результат = ПереопределениеДействий.ЗначениеДействия;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция СоздатьДОиПФ(ДополнительныйФункционал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополнительныйФункционал", ДополнительныйФункционал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеОтчетыИПечатныеФормы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИПечатныеФормы КАК ДополнительныеОтчетыИПечатныеФормы
	               |ГДЕ
	               |	ДополнительныеОтчетыИПечатныеФормы.ДополнительныйФункционал = &ДополнительныйФункционал";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектДОиПФ = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектДОиПФ = Справочники.ДополнительныеОтчетыИПечатныеФормы.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектДОиПФ.Наименование = ДополнительныйФункционал.Наименование;
	ОбъектДОиПФ.Использовать = Истина;
	Если ДополнительныйФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентПечатнойФормы Тогда
		ОбъектДОиПФ.Вид = ".epf";
	ИначеЕсли ДополнительныйФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентОтчета Тогда
		ОбъектДОиПФ.Вид = ".erf";
	КонецЕсли;	
	ОбъектДОиПФ.ДополнительныйФункционал = ДополнительныйФункционал;
	
	ДД = ДополнительныйФункционал.ВнешняяОбработка.Получить();
	СсылкаНаФайлВоВХ = ПоместитьВоВременноеХранилище(ДД);
	ДополнительныеОтчетыИПечатныеФормыВызовСервер.ЗаполнитьПараметрыПоОбработке(ОбъектДОиПФ, СсылкаНаФайлВоВХ, ОбъектДОиПФ.Вид);
	
	ОбъектДОиПФ.Записать();
	
	Возврат ОбъектДОиПФ;
	
КонецФункции	


Процедура ЗаполнитьПараметрыЗагрузкиПоОбработке(Объект, СсылкаНаФайлВоВременномХранилище) Экспорт
	
	НастройкиСервера = Объект.НастройкиСервера.Выгрузить();
	
	ОбъектОписанияЗащиты = Новый ОписаниеЗащитыОтОпасныхДействий;
	ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	ИмяОбработки = ВнешниеОбработки.Подключить(СсылкаНаФайлВоВременномХранилище,,Ложь, ОбъектОписанияЗащиты); 
	ВОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
	
	МакетСНастройками = ВОбработка.ПолучитьМакет("ДанныеНастройки");
	JSONНастройки = МакетСНастройками.ПолучитьТекст();
	
	УправлениеБТСервер.ИмпортНастройки(JSONНастройки, Объект);
	
КонецПроцедуры

Функция СоздатьНЗД(ДополнительныйФункционал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополнительныйФункционал", ДополнительныйФункционал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиЗагрузокУслуг.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиЗагрузокУслуг КАК НастройкиЗагрузокУслуг
	               |ГДЕ
	               |	НастройкиЗагрузокУслуг.ДополнительныйФункционал = &ДополнительныйФункционал";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектНЗД = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектНЗД = Справочники.НастройкиЗагрузокУслуг.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектНЗД.Записать();
	
	//Сперва загрузим даннные по умолчанию
	ДД = ДополнительныйФункционал.ВнешняяОбработка.Получить();
	СсылкаНаФайлВоВХ = ПоместитьВоВременноеХранилище(ДД);	
	//ЗаполнитьПараметрыЗагрузкиПоОбработке(ОбъектНЗД.Ссылка, СсылкаНаФайлВоВХ);	
	
	ОбъектНЗД.Прочитать();
	
	ОбъектНЗД.Наименование = ДополнительныйФункционал.Наименование;
	ОбъектНЗД.Использовать = Истина;
	ОбъектНЗД.RESTЗапрос = ДополнительныйФункционал.ИмяСкриптаШины;
	ОбъектНЗД.Версия = "3";
	ОбъектНЗД.ДополнительныйФункционал = ДополнительныйФункционал;
	ОбъектНЗД.JSON = "[]";
	ОбъектНЗД.СерверШины = Константы.СерверШиныПредприятия.Получить();
	ОбъектНЗД.ИспользоватьВнешнююОбработку = Истина;
	ОбъектНЗД.ИспользоватьПользовательскуюЗагрузку = Ложь;
	ОбъектНЗД.Записать();
		
	Возврат ОбъектНЗД;
	
КонецФункции

Функция СоздатьНВО(ДополнительныйФункционал) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДополнительныйФункционал", ДополнительныйФункционал);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиВыгрузкиОбъектов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиВыгрузкиОбъектов КАК НастройкиВыгрузкиОбъектов
	               |ГДЕ
	               |	НастройкиВыгрузкиОбъектов.ДополнительныйФункционал = &ДополнительныйФункционал";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектНВО = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		ОбъектНВО = Справочники.НастройкиВыгрузкиОбъектов.СоздатьЭлемент();
	КонецЕсли;
	
	ОбъектНВО.Наименование = ДополнительныйФункционал.Наименование;
	ОбъектНВО.Использовать = Истина;
	ОбъектНВО.ДополнительныйФункционал = ДополнительныйФункционал;
	
	//ДД = ДополнительныйФункционал.ВнешняяОбработка.Получить();
	//СсылкаНаФайлВоВХ = ПоместитьВоВременноеХранилище(ДД);
	//ДополнительныеОтчетыИПечатныеФормыВызовСервер.ЗаполнитьПараметрыПоОбработке(ОбъектДОиПФ, СсылкаНаФайлВоВХ, ОбъектДОиПФ.Вид);
	
	ОбъектНВО.Записать();
	
	Возврат ОбъектНВО;
	
КонецФункции


Функция СоздатьЭлементДополнительногоФункционала(Параметры) Экспорт
	
	//ПараметрыВнутри = Новый Структура("Наименование, Версия, Описание, ПубличнаяКомпонента, ТипДопФункционала,");
	Описание = Справочники.ДополнительныйФункционал.ПолучитьМакет("ПримерОписанияКомпоненты").ПолучитьТекст();
	
	Если Параметры.Свойство("ДополнительныйФункционал") Тогда
		ОбъектДопФункционала = Параметры.ДополнительныйФункционал.ПолучитьОбъект();
	Иначе
		ОбъектДопФункционала = Справочники.ДополнительныйФункционал.СоздатьЭлемент();
	КонецЕсли;
	ОбъектДопФункционала.Наименование = ?(Параметры.Свойство("Наименование"), Параметры.Наименование, "DEMO по умолчанию");
	ОбъектДопФункционала.Версия = ?(Параметры.Свойство("Версия"), Параметры.Версия, "0.0.0.1");
	ОбъектДопФункционала.ПубличнаяКомпонента = ?(Параметры.Свойство("ПубличнаяКомпонента"), Параметры.ПубличнаяКомпонента, Ложь);
	ОбъектДопФункционала.ТипДопФункционала = ?(Параметры.Свойство("ТипДопФункционала"), Параметры.ТипДопФункционала, Перечисления.ТипыДополнительногоФункционала.КомпонентСобытий);
	ОбъектДопФункционала.РазрешитьОтправкуДанныхОбОшибкахРазработчикам = ?(Параметры.Свойство("РазрешитьОтправкуДанныхОбОшибкахРазработчикам"), Параметры.РазрешитьОтправкуДанныхОбОшибкахРазработчикам, Истина);	
	
	Описание = СтрЗаменить( Описание, "%Наименование компоненты%", ОбъектДопФункционала.Наименование);
	Описание = СтрЗаменить( Описание, "%Версия%", ОбъектДопФункционала.Версия);
	Описание = СтрЗаменить( Описание, "%ПубличнаяКомпонента%", Формат(ОбъектДопФункционала.Наименование,"БЛ=Приватная; БИ=Публичная"));
	ОбъектДопФункционала.Описание = ?(Параметры.Свойство("Описание"), Параметры.Описание, Описание);
	
	Если Параметры.Свойство("ДД") Тогда
		Если Параметры.Свойство("ИмяФайла") Тогда		
			ОбъектДопФункционала.НаименованиеОбработки = Параметры.ИмяФайла; // = Параметры.ДополнительныйФункционал.ПолучитьОбъект();
		Иначе
			ОбъектДопФункционала.НаименованиеОбработки = ОбъектДопФункционала.Наименование; // = Параметры.ДополнительныйФункционал.ПолучитьОбъект();
		КонецЕсли;
		ОбъектДопФункционала.ВнешняяОбработка = Новый ХранилищеЗначения(Параметры.ДД); // = Параметры.ДополнительныйФункционал.ПолучитьОбъект();
	КонецЕсли;
	ОбъектДопФункционала.Записать();
	
	Возврат ОбъектДопФункционала.Ссылка;
	
КонецФункции

Функция УстановитьМодульМаркетплейса(КлючМодуля) Экспорт
	
	Сервер = Справочники.СервераШины.СтандартнаяШина;	
	Адрес = "marketplace/getcomponentinfo/"+КлючМодуля; 
	Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, "", Новый Структура ("ТипЗапроса, Пользователь, Пароль", "GET", Сервер.Логин, Сервер.Пароль));
	Если Результат.Результат Тогда
		ВхЖСОН = Результат.ВхОбъект;
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ВхЖСОН);
		СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Наименование = СтруктураЖСОН.info.name;
		Версия = СтруктураЖСОН.info.version;		
		ХешКомпоненты = СтруктураЖСОН.info.hash; 
		МинимальнаяВерсия = СтруктураЖСОН.info.minversion; 
		МаксимальнаяВерсия = СтруктураЖСОН.info.maxversion; 
		
		Адрес = "marketplace/downloadcomponent/"+КлючМодуля; 
		Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, "", Новый Структура ("ТипЗапроса, Пользователь, Пароль, ВыхДанные", "GET", Сервер.Логин, Сервер.Пароль, "ПолучитьТелоКакДвоичныеДанные"));
		Если Результат.Результат Тогда
			ЗИП = Результат.ВхОбъект;
			ИмяЗип = ПолучитьИмяВременногоФайла("zip");
			
			ЗИП.Записать(ИмяЗип);
			Архив = Новый ЧтениеZipФайла(ИмяЗип);
			
			ОписаниеЗИП = Новый Структура("html, php, epf, erf, json, cf");
			Для Каждого Элемент Из Архив.Элементы Цикл
				
				Индекс = СтрНайти(Элемент.ПолноеИмя, ".", НаправлениеПоиска.СКонца);
				Если Индекс > 0 Тогда
					Расширение = Сред(Элемент.ПолноеИмя, Индекс+1); 
					Извлекаем = Ложь;
					Если Расширение = "html" И НЕ ЗначениеЗаполнено(ОписаниеЗИП["html"]) Тогда
						//Это файл помощи
						Извлекаем = Истина;
					ИначеЕсли Расширение = "php" И НЕ ЗначениеЗаполнено(ОписаниеЗИП["php"]) Тогда
						//Это расширение шины
						Извлекаем = Истина;
					ИначеЕсли Расширение = "epf" И НЕ ЗначениеЗаполнено(ОписаниеЗИП["epf"]) Тогда
						//Это компонента 1С
						Извлекаем = Истина;
					ИначеЕсли Расширение = "erf"  И НЕ ЗначениеЗаполнено(ОписаниеЗИП["erf"]) Тогда
						//Это компонента 1С
						Извлекаем = Истина;
					ИначеЕсли Расширение = "cf"  И НЕ ЗначениеЗаполнено(ОписаниеЗИП["cf"]) Тогда
						//Это компонента 1С
						Извлекаем = Истина;
					ИначеЕсли Расширение = "json"  И НЕ ЗначениеЗаполнено(ОписаниеЗИП["json"]) Тогда
						//Это описание компоненты
						Извлекаем = Истина;
					КонецЕсли;
					
					ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
					Если Извлекаем Тогда
						Архив.Извлечь(
						    Элемент,
						    ИмяФайла,
						    РежимВосстановленияПутейФайловZIP.НеВосстанавливать,
						);
						ОписаниеЗИП[Расширение] = ИмяФайла+"\"+Элемент.Имя;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;  
			Архив.Закрыть();
			
			//Мы всё извлекли осталось создать новую компоненту
			Если Строка(КлючМодуля) = "1" Тогда
				СсылкаНаСправочник = Справочники.ДополнительныйФункционал.Конфигурация;
			Иначе	
				СсылкаНаСправочник = Справочники.ДополнительныйФункционал.НайтиПоРеквизиту("КлючМодуля", КлючМодуля);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СсылкаНаСправочник) Тогда
				ОбъектСправочника = СсылкаНаСправочник.ПолучитьОбъект();
			Иначе
				ОбъектСправочника = Справочники.ДополнительныйФункционал.СоздатьЭлемент();
			КонецЕсли;
			
			ОбъектСправочника.Наименование = Наименование;
			ОбъектСправочника.Версия = Версия;
			ОбъектСправочника.КлючМодуля = КлючМодуля;
			ОбъектСправочника.ХешКомпоненты = ХешКомпоненты;
			
			Если ЗначениеЗаполнено(ОписаниеЗИП["html"]) Тогда
				ТД = Новый ТекстовыйДокумент();
				ТД.Прочитать(ОписаниеЗИП["html"]);
				ОбъектСправочника.Описание = ТД.ПолучитьТекст();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеЗИП["php"]) Тогда
				ТД = Новый ТекстовыйДокумент();
				ТД.Прочитать(ОписаниеЗИП["php"]);
				ОбъектСправочника.СкриптШины = ТД.ПолучитьТекст();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеЗИП["epf"]) Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ОписаниеЗИП["epf"]); //ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
				ОбъектСправочника.ВнешняяОбработка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				ОбъектСправочника.НаименованиеОбработки = Наименование+".epf";
			ИначеЕсли ЗначениеЗаполнено(ОписаниеЗИП["erf"]) Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ОписаниеЗИП["erf"]); //ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
				ОбъектСправочника.ВнешняяОбработка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				ОбъектСправочника.НаименованиеОбработки = Наименование+".erf";
			ИначеЕсли ЗначениеЗаполнено(ОписаниеЗИП["cf"]) Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ОписаниеЗИП["cf"]); //ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
				ОбъектСправочника.ВнешняяОбработка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				ОбъектСправочника.НаименованиеОбработки = Наименование+".cf";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеЗИП["json"]) Тогда
				ТД = Новый ТекстовыйДокумент();
				ТД.Прочитать(ОписаниеЗИП["json"]);
				json = ТД.ПолучитьТекст();
				
				ЧтениеJSON = Новый ЧтениеJSON; 
				ЧтениеJSON.УстановитьСтроку(json);
				СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
								
				ОбъектСправочника.ПубличнаяКомпонента = СтруктураЖСОН.public;
				ОбъектСправочника.ПриватныйСкрипт = СтруктураЖСОН.privateserverclass;
				ОбъектСправочника.МинимальнаяВерсияСистемы = СтруктураЖСОН.minversion;
				ОбъектСправочника.РазрешитьОтправкуДанныхОбОшибкахРазработчикам = СтруктураЖСОН.senddumptodeveloper;
				
				Если СтруктураЖСОН.Свойство("settings") Тогда 
					ОбъектСправочника.ЗаполнитьНстройки(СтруктураЖСОН.settings);
				КонецЕсли;
				
				Если СтруктураЖСОН.type = 1 Тогда					
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентСобытий
				ИначеЕсли СтруктураЖСОН.type = 2 Тогда
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентЗагрузкиДанных 
				ИначеЕсли СтруктураЖСОН.type = 3 Тогда
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентВыгрузкиДанных 
				ИначеЕсли СтруктураЖСОН.type = 4 Тогда
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентПечатнойФормы 
				ИначеЕсли СтруктураЖСОН.type = 5 Тогда
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентОтчета 
				ИначеЕсли СтруктураЖСОН.type = 6 Тогда
					ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.Системный 
				КонецЕсли;	
					
			КонецЕсли;
			 
			ОбъектСправочника.Записать();
			ОбъектСправочника.ВыполнитьПервоначальныйЗапуск();
			
			///А теперь надо создать все дополнительные справочники
			Если ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентСобытий Тогда
				//Ничего не создаем, не требуется
				ОбъектСправочника.ЗаполнитьСписокОбрабатываемыхСобытий();
				ОбъектСправочника.Записать();
				
			ИначеЕсли ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентЗагрузкиДанных Тогда
				СсылкаНаЗагрузку = СоздатьНЗД(ОбъектСправочника.Ссылка);
				//Установим скрипт на сервере клиента
				КлючМодуля = ОбъектСправочника.КлючМодуля;
				Сервер = СсылкаНаЗагрузку.СерверШины;	
				Адрес = "marketplace/installcomponent/"+КлючМодуля; 
				Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, "", Новый Структура ("ТипЗапроса, Пользователь, Пароль", "GET", Сервер.Логин, Сервер.Пароль));					
			ИначеЕсли ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентВыгрузкиДанных Тогда
				СоздатьНВО(ОбъектСправочника.Ссылка);
			ИначеЕсли ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентПечатнойФормы Тогда
				СоздатьДОиПФ(ОбъектСправочника.Ссылка);
			ИначеЕсли ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентОтчета Тогда
				СоздатьДОиПФ(ОбъектСправочника.Ссылка);
			ИначеЕсли ОбъектСправочника.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.Системный Тогда
				//Сама конфигурация; Надо поставить на автообновление
			КонецЕсли;	
			
			
			Попытка
				
			Исключение
				//
			КонецПопытки;
			
			
			Сообщить("Модуль установлен успешно!");

		Иначе
			Сообщить("Сервер отверг возможность установления компоненты, возможно у вас недостаточно денег на балансе компании");	
		КонецЕсли;
		
	Иначе
		Сообщить("Нет доступных модулей");
	КонецЕсли;	
	
КонецФункции

Функция СоздатьМодульМаркетплейса(СсылкаНаДопФункционал) Экспорт
	
	//СсылкаНаДопФункционал = Справочники.ДополнительныйФункционал.ПустаяСсылка();	
	КВФ = КаталогВременныхФайлов()+Строка(Новый УникальныйИдентификатор)+"\"; //"d:\tmp"; //КаталогВременныхФайлов();
	ИмяЗип = ПолучитьИмяВременногоФайла("zip");//КВФ+"\"+temp.zip"; //ПолучитьИмяВременногоФайла("zip");
	
	АрхивКомпонента = Новый ЗаписьZipФайла(
        ИмяЗип,
        "", // пароль на архив (оставим пустой)
        "Этот архив создан из 1с", // комментарий к архиву
        МетодСжатияZIP.Сжатие, // сжатие или копирование
        УровеньСжатияZIP.Максимальный
	);
	
	Если СсылкаНаДопФункционал.НаименованиеОбработки <> "" Тогда
		
		ИмяОбработки = КВФ+СсылкаНаДопФункционал.Наименование+"\"+СсылкаНаДопФункционал.НаименованиеОбработки;
		ДД = СсылкаНаДопФункционал.ВнешняяОбработка.Получить();
		ДД.Записать(ИмяОбработки);	
		АрхивКомпонента.Добавить(ИмяОбработки);
		
		ИмяОбработки = КВФ+СсылкаНаДопФункционал.Наименование+"\info.html";
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(СсылкаНаДопФункционал.Описание);
		ТД.Записать(ИмяОбработки);	
		АрхивКомпонента.Добавить(ИмяОбработки);
		
		
		Если СокрЛП(СсылкаНаДопФункционал.СкриптШины) <> "" Тогда
			ИмяСкриптаШины = ВРег(Лев(СсылкаНаДопФункционал.ИмяСкриптаШины,1)) + Сред(СсылкаНаДопФункционал.ИмяСкриптаШины,2);
			ИмяОбработки = КВФ+СсылкаНаДопФункционал.Наименование+"\"+ИмяСкриптаШины+".class.php";
			ТД = Новый ТекстовыйДокумент;
			ТД.УстановитьТекст(СсылкаНаДопФункционал.СкриптШины);
			ТД.Записать(ИмяОбработки);	
			АрхивКомпонента.Добавить(ИмяОбработки);
		КонецЕсли;	
		
		СтруктураJSON = Новый Структура;
		СтруктураJSON.Вставить("name", СсылкаНаДопФункционал.Наименование);//УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.Наименование));
		СтруктураJSON.Вставить("public", СсылкаНаДопФункционал.ПубличнаяКомпонента); //Формат(СсылкаНаДопФункционал.ПубличнаяКомпонента, "БЛ=0; БИ=1"));
		СтруктураJSON.Вставить("key", СсылкаНаДопФункционал.КлючМодуля);
		СтруктураJSON.Вставить("version", СсылкаНаДопФункционал.Версия); //УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.Версия));
		СтруктураJSON.Вставить("privateserverclass", СсылкаНаДопФункционал.ПриватныйСкрипт); //Формат(СсылкаНаДопФункционал.ПриватныйСкрипт, "БЛ=0; БИ=1"));
		Если СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентСобытий Тогда
			ТипКомпоненты = 1;
		ИначеЕсли СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентЗагрузкиДанных Тогда
			ТипКомпоненты = 2;
		ИначеЕсли СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентВыгрузкиДанных Тогда
			ТипКомпоненты = 3;
		ИначеЕсли СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентПечатнойФормы Тогда
			ТипКомпоненты = 4;
		ИначеЕсли СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.КомпонентОтчета Тогда
			ТипКомпоненты = 5;
		ИначеЕсли СсылкаНаДопФункционал.ТипДопФункционала = Перечисления.ТипыДополнительногоФункционала.Системный Тогда
			ТипКомпоненты = 6;
		КонецЕсли;	
		СтруктураJSON.Вставить("type", ТипКомпоненты);
		СтруктураJSON.Вставить("minversion", СсылкаНаДопФункционал.МинимальнаяВерсияСистемы);//УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.МинимальнаяВерсияСистемы));
		СтруктураJSON.Вставить("senddumptodeveloper", СсылкаНаДопФункционал.РазрешитьОтправкуДанныхОбОшибкахРазработчикам);//Формат(СсылкаНаДопФункционал.РазрешитьОтправкуДанныхОбОшибкахРазработчикам, "БЛ=0; БИ=1"));
		СтруктураJSON.Вставить("price", СсылкаНаДопФункционал.Стоимость);//УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.МинимальнаяВерсияСистемы));
		СтруктураJSON.Вставить("componentprice", СсылкаНаДопФункционал.ЗаТранзакцию);//УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.МинимальнаяВерсияСистемы));

		НастройкиПодключения = Справочники.ДополнительныйФункционал.СформироватьJSONНастроек(СсылкаНаДопФункционал);
		СтруктураJSON.Вставить("settings", НастройкиПодключения);
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
		ИмяОбработки = КВФ+СсылкаНаДопФункционал.Наименование+"\manifest.json";
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(СтрокаJSON);
		ТД.Записать(ИмяОбработки, КодировкаТекста.UTF8);	
		АрхивКомпонента.Добавить(ИмяОбработки);
		
		АрхивКомпонента.Записать();
		
		ДД = Новый ДвоичныеДанные(ИмяЗип);
		Результат = Новый Структура("Результат, ДД", Истина, ДД);
		
		УдалитьФайлы(ИмяЗип);
		УдалитьФайлы(КВФ+СсылкаНаДопФункционал.Наименование+"\info.html");
		УдалитьФайлы(КВФ+СсылкаНаДопФункционал.Наименование+"\"+СсылкаНаДопФункционал.НаименованиеОбработки);
		УдалитьФайлы(КВФ+СсылкаНаДопФункционал.Наименование+"\"+ИмяСкриптаШины+".class.php");
		УдалитьФайлы(КВФ+СсылкаНаДопФункционал.Наименование+"\manifest.json");
		УдалитьФайлы(КВФ);
	Иначе
		Результат = Новый Структура("Результат", Ложь);
		Сообщить("Нет обработки для формирования компонента");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтправитьНастройкиНаСерверШины(СсылкаНаДопФункционал) Экспорт
	
	РезультатФункции = Новый Структура("Результат", Ложь);
	
	Если СсылкаНаДопФункционал.ИмяСкриптаШины <> "" Тогда		
		КлючМодуля = "";                                                              
		Сервер = Константы.СерверШиныПредприятия.Получить();
		Адрес = "marketplace/setsettingscomponent/"+СсылкаНаДопФункционал.ИмяСкриптаШины; 
		
		СтруктураНастроек = Справочники.ДополнительныйФункционал.СформироватьJSONНастроек(СсылкаНаДопФункционал);
		ДанныеНастройки = УправлениеБТВызовСервера.ВJSON(СтруктураНастроек);
		
		Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ДанныеНастройки, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "POST", Сервер.Логин, Сервер.Пароль));
		Если Результат.Результат Тогда
			Сообщить("Настройки успешно сохраненны!");		
		КонецЕсли;
		
		РезультатФункции = Новый Структура("Результат", Результат.Результат);
	КонецЕсли;
	
	Возврат РезультатФункции;
КонецФункции

Функция ОтправитьМодульМаркетплейса(ДанныеКомпоненты, СсылкаНаДопФункционал) Экспорт
	
	//СсылкаНаДопФункционал = Справочники.ДополнительныйФункционал.ПустаяСсылка();
	РезультатФункции = Новый Структура("Результат", Ложь);
	Если СсылкаНаДопФункционал.НаименованиеОбработки <> "" Тогда		
		КлючМодуля = "";                                                              
		Сервер = Справочники.СервераШины.СтандартнаяШина;	
		НаименованиеМодуля = УправлениеБТВызовСервера.ПреобразоватьКURL(СсылкаНаДопФункционал.Наименование);
		КлючМодуля = ?(СсылкаНаДопФункционал.КлючМодуля = "", "0", СсылкаНаДопФункционал.КлючМодуля); 
		Адрес = "marketplace/createcomponent/"+КлючМодуля+"/base64"; 
		
		Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ДанныеКомпоненты, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "POST", Сервер.Логин, Сервер.Пароль));
		Если Результат.Результат Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(Результат.ВхОбъект);
			СтруктураЖСОН = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Если ТипЗнч(СсылкаНаДопФункционал) = Тип("СправочникОбъект.ДополнительныйФункционал") Тогда
				СсылкаНаДопФункционал.КлючМодуля = СтруктураЖСОН.id;
				СсылкаНаДопФункционал.Записать();
			Иначе
				ОбеъктДФ = СсылкаНаДопФункционал.ПолучитьОбъект();
				ОбеъктДФ.КлючМодуля = СтруктураЖСОН.id;
				ОбеъктДФ.Записать();				
			КонецЕсли;
			
			Сообщить("Модуль успешно загружен! "+СтруктураЖСОН.id);	
			
		Иначе
			ВхЖСОН = Результат.ВхОбъект;
			Сообщить("Ошибка загрузки модуля! "+Результат.ВхОбъект);
		КонецЕсли;	
		
		РезультатФункции = Новый Структура("Результат", Результат.Результат);
	Иначе
		Сообщить("Нет обработки для формирования компонента");
	КонецЕсли;
	
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьБалансКомпании() Экспорт
	//
	Баланс = 0;
	
	Сервер = Справочники.СервераШины.СтандартнаяШина;
	Адрес = "marketplace/getbalance/"; 
	ВхТело = "";
	Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ВхТело, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "GET", Сервер.Логин, Сервер.Пароль));
	Если Результат.Результат Тогда
		ВхЖСОН = Результат.ВхОбъект;
		СтруктураОтвета = УправлениеБТВызовСервера.ИзJSON(ВхЖСОН);
		
		Баланс = СтруктураОтвета.balance;
	КонецЕсли;
	
	Возврат Баланс;
КонецФункции

Функция ПолучимМодулиМаркетплейса() Экспорт
	ТДанных = Новый ТаблицаЗначений;
	ТДанных.Колонки.Добавить("ВерсияМодуля");
	ТДанных.Колонки.Добавить("Наименование");
	ТДанных.Колонки.Добавить("КлючМодуля");
	ТДанных.Колонки.Добавить("Описание");
	ТДанных.Колонки.Добавить("ТребуетсяОбновление");
	ТДанных.Колонки.Добавить("Разработчик");
	
	ТДанных.Колонки.Добавить("Стоимость");
	ТДанных.Колонки.Добавить("ЗаТранзакцию");
	
	ТДанных.Колонки.Добавить("Оплачено");
	ТДанных.Колонки.Добавить("НаПоддержке");
	ТДанных.Колонки.Добавить("Расшарено");
	
	
	БД = УправлениеБТВызовСервера.ИдентификаторБД();
	Сервер = Справочники.СервераШины.СтандартнаяШина;
	Адрес = "marketplace/getfulllistcomponents/"+БД+"/"; 
	ВхТело = "";
	Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ВхТело, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "GET", Сервер.Логин, Сервер.Пароль));
	Если Результат.Результат Тогда
		
		СписокМодулейОбновлений = ПолучитьМодулиКоторыеТребуетсяОбновить();
		
		ВхЖСОН = Результат.ВхОбъект;
		СтруктураЖСОН = УправлениеБТВызовСервера.ИзJSON(ВхЖСОН);
		
		Лист = Неопределено;
		Если СтруктураЖСОН.Свойство("list", Лист) Тогда
			Для Каждого СтрокаКомпоненты ИЗ Лист Цикл 
				НоваяСтрока = ТДанных.Добавить();
				НоваяСтрока.ВерсияМодуля = СтрокаКомпоненты.version;
				НоваяСтрока.Наименование = СтрокаКомпоненты.name;
				НоваяСтрока.КлючМодуля = СтрокаКомпоненты.id;
				НоваяСтрока.ТребуетсяОбновление = ?(СписокМодулейОбновлений.Найти(СтрокаКомпоненты.id) = Неопределено, Ложь, Истина);
				НоваяСтрока.Разработчик = СтрокаКомпоненты.developername; 
				НоваяСтрока.Стоимость = СтрокаКомпоненты.cost;
				НоваяСтрока.ЗаТранзакцию = ?(СтрокаКомпоненты.astransaction = "1", true, false);
				
				НоваяСтрока.Оплачено = ?(СтрокаКомпоненты.purchase, true, false);
				НоваяСтрока.НаПоддержке = ?(СтрокаКомпоненты.senddumptodeveloper = "1", true, false);
				НоваяСтрока.Расшарено = ?(СтрокаКомпоненты.typecomponent = "shared", true, false);
			КонецЦикла;
		КонецЕсли;
	
	Иначе
		Сообщить("Нет доступных модулей");
	КонецЕсли;	
	
	Возврат ТДанных;
КонецФункции

Функция ПолучимОписаниеМодуляМаркетплейса(ИдентификаторМодуля) Экспорт
	
	Описание = "";
	Сервер = Справочники.СервераШины.СтандартнаяШина;
	Адрес = "marketplace/getinfo/"+ИдентификаторМодуля; 
	ВхТело = "";
	Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ВхТело, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "GET", Сервер.Логин, Сервер.Пароль));
	Если Результат.Результат Тогда
		Описание = Результат.ВхОбъект;
	КонецЕсли;
	
	Возврат Описание;
КонецФункции





Функция СтатусБДВМаркетПлейсВШине() Экспорт
	Результат = Ложь;
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
	Адрес = "/marketplace/hasuserdb/"+ИдентификаторБД+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "GET", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
	
	Возврат РезультатЗапроса.Результат;
КонецФункции

Функция УстановитьБДВМаркетПлейсВШине() Экспорт
	Результат = Ложь;
	
	СерверПредприятия = Константы.СерверШиныПредприятия.Получить();//Справочники.СервераШины.СтандартнаяШина;
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
	Адрес = "/marketplace/adduserdb/"+ИдентификаторБД+"/"+УправлениеБТВызовСервера.ПреобразоватьКURL(СерверПредприятия.URL)+"/"+?(СерверПредприятия.ЗащищенноеСоединение, "https", "http")+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "POST", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
	
	Возврат РезультатЗапроса;
КонецФункции

Функция УдалитьБДВМаркетПлейсВШине() Экспорт
	Результат = Ложь;
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
	Адрес = "/marketplace/deluserdb/"+ИдентификаторБД+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "GET", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
	
	Возврат РезультатЗапроса;
КонецФункции




Процедура ОтправитьДанныеУслугиРазработчику(УслугаСсылка, ТекстРазработчику) Экспорт
	
	НастройкаСсылка = УправлениеБТВызовСервера.ПолучитьСозданоСНастройкой(УслугаСсылка);
	Если ЗначениеЗаполнено(НастройкаСсылка) Тогда
		
		ДополнительныйФункционал = НастройкаСсылка.ДополнительныйФункционал;
		Если ДополнительныйФункционал.РазрешитьОтправкуДанныхОбОшибкахРазработчикам Тогда 
			Сообщить("Формируем дамп текущей ссылки");
			TOBEУслуга = УправлениеБТСервер.ВернутьОписаниеСсылки(УслугаСсылка);
				
			Сообщить("Формируем дамп текущей настройки");
			НастройкаСсылка = УправлениеБТВызовСервера.ПолучитьСозданоСНастройкой(УслугаСсылка);
			Настройка = УправлениеБТСервер.ВернутьОписаниеСсылки(НастройкаСсылка);
				
			Сообщить("Очищаем ссылку");
			УслугаОбъект = УслугаСсылка.ПолучитьОбъект();
			НомерУслуги = УслугаОбъект.Номер;
			ДатаУслуги = УслугаОбъект.Дата;
			ЗаполнитьЗначенияСвойств(УслугаОбъект, Документы.Услуга.ПустаяСсылка());
			УслугаОбъект.Номер = НомерУслуги;
			УслугаОбъект.Дата  = ДатаУслуги;
			УслугаОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Сообщить("Загружаем по настройке");
			ДД = "";
			ЕстьИсходныйФайл = УправлениеБТСервер.ЗагрузкаИзИсходника(УслугаОбъект, ДД);
			Если ЕстьИсходныйФайл И ДД <> "" Тогда
				Сообщить("Сохраняем исходный файл");
				РЕСТ = Новый HTTPЗапрос();
				РЕСТ.УстановитьТелоИзДвоичныхДанных(ДД);
				ИсходныйФайл = РЕСТ.ПолучитьТелоКакСтроку();
			Иначе
				ИсходныйФайл = "";
			КонецЕсли;
			
			Сообщить("Формируем дамп ссылки после загрузки");
			ASISУслуга = УправлениеБТСервер.ВернутьОписаниеСсылки(УслугаСсылка);
			
			Сообщить("Очищаем ссылку");
			УслугаОбъект = УслугаСсылка.ПолучитьОбъект();
			НомерУслуги = УслугаОбъект.Номер;
			ДатаУслуги = УслугаОбъект.Дата;
			ЗаполнитьЗначенияСвойств(УслугаОбъект, Документы.Услуга.ПустаяСсылка());
			УслугаОбъект.Номер = НомерУслуги;
			УслугаОбъект.Дата  = ДатаУслуги;
			УслугаОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Сообщить("Восстанавливаем ссылку по дампу");
			УправлениеБТСервер.СоздатьОбъект(TOBEУслуга, УслугаОбъект.Ссылка);
			
			Сообщить("Отправляем дамп разработчику");
			
			ДАМП = Новый Структура("comment, source, settings, asis, tobe");
			ДАМП.comment 	= ТекстРазработчику;
			ДАМП.source 	= ИсходныйФайл;
			ДАМП.settings 	= Настройка;
			ДАМП.asis 		= ASISУслуга;
			ДАМП.tobe 		= TOBEУслуга;
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ДАМП); // сериализует ОтветМассив в формат JSON
			ДАМПJSON = ЗаписьJSON.Закрыть();
			
			Сервер = Справочники.СервераШины.СтандартнаяШина;	
			ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();	
			Адрес = "marketplace/senddump/"+ИдентификаторБД+"/"+ДополнительныйФункционал.КлючМодуля+"/"; 
			Результат = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер.URL, Адрес, ДАМПJSON, Новый Структура ("ТипЗапроса, Пользователь, Пароль", "POST", Сервер.Логин, Сервер.Пароль));
			Если Результат.Результат Тогда
				Сообщить("Дамп разработчику отправлен");
			Иначе
				Сообщить("Ошибка отправки дампа разработчику: "+Результат.ВхОбъект);
			КонецЕсли;
			
		Иначе
			Сообщить("Сервис загрузки не поддерживает отправку дампов разработчикам");		
		КонецЕсли;
	Иначе
		Сообщить("Нет настройки загрузки, услуга скорее всего создана в ручном режиме");		
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьМодулиКоторыеТребуетсяОбновить()
	
	СписокО = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныйФункционал.Ссылка КАК Ссылка,
	               |	ДополнительныйФункционал.КлючМодуля КАК КлючМодуля,
	               |	ДополнительныйФункционал.ХешКомпоненты КАК ХешКомпоненты,
	               |	ДополнительныйФункционал.Версия КАК Версия
	               |ИЗ
	               |	Справочник.ДополнительныйФункционал КАК ДополнительныйФункционал
	               |ГДЕ
	               |	ДополнительныйФункционал.ОтключитьАвтоматическоеОбновление = ЛОЖЬ
	               |	И ДополнительныйФункционал.ПометкаУдаления = ЛОЖЬ
	               |	И ДополнительныйФункционал.КлючМодуля <> """"";
	Выборка = Запрос.Выполнить().Выбрать();	
	
	СписокМодулей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		//Обновить конкретный модуль
		Модуль = Новый Структура("key, hash, version, versiondb", Выборка.КлючМодуля, Выборка.ХешКомпоненты, Выборка.Версия, УправлениеБТВызовСервера.ПолучитьВерисиюБТ());
		СписокМодулей.Добавить(Модуль);
	КонецЦикла;
	
	СписокМодулейJSON = УправлениеБТВызовСервера.ВJSON(СписокМодулей);
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
	Адрес = "/marketplace/getupdatelist/"+ИдентификаторБД+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "POST", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, СписокМодулейJSON, Параметры);
	
	Если РезультатЗапроса.Результат Тогда
		СписокОбновлений = УправлениеБТВызовСервера.ИзJSON(РезультатЗапроса.ВхОбъект);
		Для Каждого Компонент ИЗ СписокОбновлений.listupdate Цикл
			//СсылкаНаСправочник = Справочники.ДополнительныйФункционал.НайтиПоРеквизиту("КлючМодуля", Компонент.key);
			СписокО.Добавить(Компонент.key);
		КонецЦикла;
	Иначе
		ВхСообщение = УправлениеБТВызовСервера.ИзJSON(РезультатЗапроса.ВхОбъект);
		
		Сообщить(ВхСообщение.error);		
	КонецЕсли;
	
	Возврат СписокО;
КонецФункции

Процедура ОбновитьКомпонентыМаркетПлейс() Экспорт
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныйФункционал.Ссылка КАК Ссылка,
	               |	ДополнительныйФункционал.КлючМодуля КАК КлючМодуля,
	               |	ДополнительныйФункционал.ХешКомпоненты КАК ХешКомпоненты,
	               |	ДополнительныйФункционал.Версия КАК Версия
	               |ИЗ
	               |	Справочник.ДополнительныйФункционал КАК ДополнительныйФункционал
	               |ГДЕ
	               |	ДополнительныйФункционал.ОтключитьАвтоматическоеОбновление = ЛОЖЬ
	               |	И ДополнительныйФункционал.ПометкаУдаления = ЛОЖЬ
	               |	И ДополнительныйФункционал.КлючМодуля <> """"";
	Выборка = Запрос.Выполнить().Выбрать();	
	
	СписокМодулей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		//Обновить конкретный модуль
		Модуль = Новый Структура("key, hash, version, versiondb", Выборка.КлючМодуля, Выборка.ХешКомпоненты, Выборка.Версия, УправлениеБТВызовСервера.ПолучитьВерисиюБТ());
		СписокМодулей.Добавить(Модуль);
	КонецЦикла;
	
	СписокМодулейJSON = УправлениеБТВызовСервера.ВJSON(СписокМодулей);
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	ИдентификаторБД = УправлениеБТВызовСервера.ИдентификаторБД();
	Адрес = "/marketplace/getupdatelist/"+ИдентификаторБД+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "POST", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, СписокМодулейJSON, Параметры);
	
	Если РезультатЗапроса.Результат Тогда
		СписокОбновлений = УправлениеБТВызовСервера.ИзJSON(РезультатЗапроса.ВхОбъект);
		Для Каждого Компонент ИЗ СписокОбновлений.listupdate Цикл
			СсылкаНаСправочник = Справочники.ДополнительныйФункционал.НайтиПоРеквизиту("КлючМодуля", Компонент.key);
			Сообщить("Обновляем модуль: "+СсылкаНаСправочник);
			УстановитьМодульМаркетплейса(Компонент.key);
		КонецЦикла;
	Иначе
		Сообщить(РезультатЗапроса.ВхОбъект);		
	КонецЕсли;
	
КонецПроцедуры



Функция ПолучитьСписокПользователей(СсылкаНаКомпонент) Экспорт
	//	
	Результат = Новый Структура("Результат, Таблица", Ложь, Новый Массив);
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	Адрес = "/marketplace/getlistsharecomponent/"+СсылкаНаКомпонент.КлючМодуля+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "GET", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, "", Параметры);
	
	Если РезультатЗапроса.Результат Тогда
		
		ВыхСтруктура = УправлениеБТВызовСервера.ИзJSON(РезультатЗапроса.ВхОбъект);
		ТаблицаРезультат = Новый Массив;
		Для Каждого СтрокаСПользователем ИЗ ВыхСтруктура.list Цикл
			ТаблицаРезультат.Добавить(Новый Структура("ИмяПользователя", СтрокаСПользователем.user));
		КонецЦикла;
		
		Результат.Результат  = Истина;
		Результат.Таблица	 = ТаблицаРезультат;
	Иначе
		Сообщить("Ошибка получения списка пользователей: "+РезультатЗапроса.ВхОбъект);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция УстановитьСписокПользователей(СсылкаНаКомпонент, ВхСписок) Экспорт
	Результат = Новый Структура;
	
	ВыхСписок = Новый Массив;
	Для Каждого ВхПользователь ИЗ ВхСписок Цикл
		ВыхСписок.Добавить(Новый Структура("user", ВхПользователь.ИмяПользователя));
	КонецЦикла;
	ВхСписокJSON = УправлениеБТВызовСервера.ВJSON(ВыхСписок);
	
	СерверШины = Справочники.СервераШины.СтандартнаяШина;
	Сервер = СерверШины.URL;
	Адрес = "/marketplace/sharecomponent/"+СсылкаНаКомпонент.КлючМодуля+"/";
	Параметры = Новый Структура("ТипЗапроса, Пользователь, Пароль", "POST", СерверШины.Логин, СерверШины.Пароль);
	РезультатЗапроса = УправлениеБТВызовСервера.ОтправитьЗапросВШину(Сервер, Адрес, ВхСписокJSON, Параметры);
	
	Если РезультатЗапроса.Результат Тогда
		Сообщить("Компоненты расшарены: "+РезультатЗапроса.ВхОбъект);
	Иначе
		Сообщить("Ошибка получения списка пользователей: "+РезультатЗапроса.ВхОбъект);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции



Функция СписокПодписок(ПутьКОбъектуМетаданных, ОбрабатываемоеСобытие, ДополнительноеДействие) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПутьКОбъектуМетаданных", ПутьКОбъектуМетаданных);
	Запрос.УстановитьПараметр("ОбрабатываемоеСобытие", ОбрабатываемоеСобытие);
	Запрос.УстановитьПараметр("ДополнительноеДействие", ДополнительноеДействие);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.Ссылка КАК Ссылка,
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.ПутьКОбъектуМетаданных КАК ПутьКОбъектуМетаданных,
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.ОбрабатываемоеСобытие КАК ОбрабатываемоеСобытие,
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.ДополнительноеДействие КАК ДополнительноеДействие,
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.Ссылка.НаименованиеОбработки КАК НаименованиеОбработки,
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.Ссылка.ТипДопФункционала КАК ТипДопФункционала
	               |ИЗ
	               |	Справочник.ДополнительныйФункционал.СписокОбрабатываемыхСобытий КАК ДополнительныйФункционалСписокОбрабатываемыхСобытий
	               |ГДЕ
	               |	ДополнительныйФункционалСписокОбрабатываемыхСобытий.ОбрабатываемоеСобытие = &ОбрабатываемоеСобытие
	               |	И ДополнительныйФункционалСписокОбрабатываемыхСобытий.ПутьКОбъектуМетаданных = &ПутьКОбъектуМетаданных
	               |	И ДополнительныйФункционалСписокОбрабатываемыхСобытий.ДополнительноеДействие = &ДополнительноеДействие
	               |	И ДополнительныйФункционалСписокОбрабатываемыхСобытий.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	МассивСоЗначениями = УправлениеБТВызовСервера.ТаблицаВМассив(Запрос.Выполнить().Выгрузить());
	Возврат МассивСоЗначениями;
КонецФункции