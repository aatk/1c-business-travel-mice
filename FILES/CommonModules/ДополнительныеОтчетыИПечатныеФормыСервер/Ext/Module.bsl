
Функция ИмяДополнительнойКолонки() Экспорт
	Возврат "Код";
КонецФункции

Функция ВидОбработкиПечатнаяФорма(Версия = Неопределено) Экспорт
	
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		Результат = "ПечатнаяФорма";		
	Иначе		
		Попытка
			//ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма()	
			ИмяМодуля = "ДополнительныеОтчетыИОбработкиКлиентСервер";
			Выполнить("Результат = "+ИмяМодуля+".ВидОбработкиПечатнаяФорма()");
		Исключение
			//
		КонецПопытки;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ТипКомандыВызовСерверногоМетода(Версия = Неопределено) Экспорт
	
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		Результат = "ВызовСерверногоМетода";		
	Иначе		
		Попытка
			//ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода()	
			ИмяМодуля = "ДополнительныеОтчетыИОбработкиКлиентСервер";
			Выполнить("Результат = "+ИмяМодуля+".ТипКомандыВызовСерверногоМетода()");
		Исключение
			//
		КонецПопытки;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция СведенияОВнешнейОбработке(Версия) Экспорт
	
	//Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	//Если Система = "БизнесТревелИMICE" Тогда
		//Это внутренняя форма
		Команды = Новый ТаблицаЗначений;
		Команды.Колонки.Добавить("Идентификатор");
		Команды.Колонки.Добавить("Представление");
		Команды.Колонки.Добавить("Использование");
		Команды.Колонки.Добавить("ПоказыватьОповещение");
		Команды.Колонки.Добавить("Модификатор");
						
		Результат = Новый Структура();		
		Результат.Вставить("Вид", Неопределено);
		Результат.Вставить("Идентификатор", Неопределено);
		Результат.Вставить("Версия", Неопределено);
		Результат.Вставить("Назначение", Новый Массив);
		Результат.Вставить("Команды", Команды);
		
	//Иначе
	//	//Будем надеятся, что версия БСП не изменится   //Зря надеялись
	//	Попытка
	//		ИмяМодуля = "ДополнительныеОтчетыИОбработки";
	//		Выполнить("Результат = "+ИмяМодуля+".СведенияОВнешнейОбработке(Версия)");
	//		Результат.Вставить("Идентификатор", Неопределено);    //БТшная хреновина
	//	Исключение
	//		//
	//	КонецПопытки;	
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции


Функция НужноПечататьМакет(КоллекцияПечатныхФорм, Идентификатор, Версия = Неопределено) Экспорт
	
	Результат = Ложь;		
	//КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
	НайденнаяСтрока = КоллекцияПечатныхФорм.Найти(ВРег(Идентификатор), "ИмяВРЕГ");
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = Истина;		
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, Идентификатор, Представление, ТабличныйДокумент, Версия = Неопределено) Экспорт
	
	НайденнаяСтрока = КоллекцияПечатныхФорм.Найти(ВРег(Идентификатор), "ИмяВРЕГ");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ТабличныйДокумент = ТабличныйДокумент;
		НайденнаяСтрока.СинонимМакета = Представление;
		
		Если НайденнаяСтрока.ТабличныйДокумент <> Неопределено Тогда
			Если НайденнаяСтрока.ТабличныйДокумент.КоличествоЭкземпляров = 0 Тогда 
				НайденнаяСтрока.ТабличныйДокумент.КоличествоЭкземпляров = НайденнаяСтрока.Экземпляров;
			Иначе
				НайденнаяСтрока.Экземпляров = НайденнаяСтрока.ТабличныйДокумент.КоличествоЭкземпляров;				
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	Результат = Истина;	
	Возврат Результат;
КонецФункции

//Процедура ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ИмяМакета, СинонимМакета, ТабличныйДокумент,
//	Картинка = Неопределено, ПолныйПутьКМакету = "", ИмяФайлаПечатнойФормы = Неопределено) Экспорт
//	
//	ОписаниеПечатнойФормы = КоллекцияПечатныхФорм.Найти(ВРег(ИмяМакета), "ИмяВРЕГ");
//	Если ОписаниеПечатнойФормы <> Неопределено Тогда
//		ОписаниеПечатнойФормы.ТабличныйДокумент = ТабличныйДокумент;
//		ОписаниеПечатнойФормы.СинонимМакета = СинонимМакета;
//		ОписаниеПечатнойФормы.Картинка = Картинка;
//		ОписаниеПечатнойФормы.ПолныйПутьКМакету = ПолныйПутьКМакету;
//		ОписаниеПечатнойФормы.ИмяФайлаПечатнойФормы = ИмяФайлаПечатнойФормы;
//	КонецЕсли;
//КонецПроцедуры


Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов, Версия = Неопределено) Экспорт
	
	//Кончилась Халява, 1С сделала метод не Экспортным
	//Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	//Если Система = "БизнесТревелИMICE" Тогда
		Макеты = Новый ТаблицаЗначений;
		Макеты.Колонки.Добавить("ИмяМакета");
		Макеты.Колонки.Добавить("ИмяВРЕГ");
		Макеты.Колонки.Добавить("СинонимМакета");
		Макеты.Колонки.Добавить("ТабличныйДокумент");
		Макеты.Колонки.Добавить("Экземпляров");
		Макеты.Колонки.Добавить("Картинка");
		Макеты.Колонки.Добавить("ПолныйПутьКМакету");
		Макеты.Колонки.Добавить("ИмяФайлаПечатнойФормы");
		Макеты.Колонки.Добавить("ОфисныеДокументы");
	
		Если ТипЗнч(ИменаМакетов) = Тип("Строка") Тогда
			ИменаМакетов = СтрРазделить(ИменаМакетов, ",");
		КонецЕсли;
		
		Для Каждого ИмяМакета Из ИменаМакетов Цикл
			Макет = Макеты.Найти(ИмяМакета, "ИмяМакета");
			Если Макет = Неопределено Тогда
				Макет = Макеты.Добавить();
				Макет.ИмяМакета = ИмяМакета;
				Макет.ИмяВРЕГ = ВРег(ИмяМакета);
				Макет.Экземпляров = 1;
			Иначе
				Макет.Экземпляров = Макет.Экземпляров + 1;
			КонецЕсли;
		КонецЦикла;
		
		Результат = Макеты;
	//Иначе		
	//	Попытка
	//		//УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(МассивПечатныхФорм)
	//		ИмяМодуля = "УправлениеПечатью";
	//		Выполнить("Результат = "+ИмяМодуля+".ПодготовитьКоллекциюПечатныхФорм(ИменаМакетов)");
	//	Исключение
	//		//
	//	КонецПопытки;	
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм,
		|КодПоОКПО, КодОКВЭД, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета");

	Сведения.Вставить("КодОКВЭД", "");
	Сведения.Вставить("НалоговыйНомерВСтранеРегистрации", "");
	Сведения.Вставить("СтранаРегистрации", "");
	Сведения.Вставить("Представление", 				 "");
	Сведения.Вставить("СокращенноеНаименование", 	 "");
	Сведения.Вставить("ПолноеНаименование", 		 "");
	Сведения.Вставить("НаименованиеДляПечатныхФорм", "");
	Сведения.Вставить("ИНН", 						 "");
	Сведения.Вставить("КодПоОКПО", 					 "");
	Сведения.Вставить("ЮрФизЛицо", 					 "");
	Сведения.Вставить("ОфициальноеНаименование", "");
	Сведения.Вставить("Свидетельство", 			 "");
	Сведения.Вставить("КПП", "");
	Сведения.Вставить("Телефоны", 		  "");
	Сведения.Вставить("НомерСчета", 	  "");
	Сведения.Вставить("Банк", 			  "");
	Сведения.Вставить("БИК", 			  "");
	Сведения.Вставить("КоррСчет", 		  "");
	Сведения.Вставить("АдресБанка", 	  "");
	Сведения.Вставить("ЮридическийАдрес", "");
	Сведения.Вставить("ФактическийАдрес", "");
	
		Попытка
			ИмяМодуля = "ФормированиеПечатныхФорм";
			Выполнить("Сведения = "+ИмяМодуля+".СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы, БанковскийСчет)");
		Исключение
			//
		КонецПопытки;	
	
	//Если ЗначениеЗаполнено(ЮрФизЛицо)
	//   И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
	//	ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
	//
	//	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
	//		Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(ЮрФизЛицо);
	//		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
	//			БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
	//		КонецЕсли;
	//		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	//		Сведения.Вставить("КодОКВЭД", Реквизиты.КодОКВЭД);
	//	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
	//		Реквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ЮрФизЛицо, ДатаПериода);
	//		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
	//			БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
	//		КонецЕсли;
	//		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
	//		Сведения.Вставить("КодОКВЭД", "");
	//		Сведения.Вставить("НалоговыйНомерВСтранеРегистрации", Реквизиты.НалоговыйНомер);
	//		Сведения.Вставить("СтранаРегистрации", Реквизиты.СтранаРегистрации);
	//	КонецЕсли;

	//	Сведения.Вставить("Представление", 				 Реквизиты.Представление);
	//	Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.Представление);
	//	Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.Наименование);
	//	Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
	//	Сведения.Вставить("ИНН", 						 Реквизиты.ИНН);
	//	Сведения.Вставить("КодПоОКПО", 					 Реквизиты.КодПоОКПО);
	//	Сведения.Вставить("ЮрФизЛицо", 					 Реквизиты.ЮрФизЛицо);
	//	
	//	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
	//		Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
	//		Сведения.Вставить("Свидетельство", 			 Реквизиты.Свидетельство);
	//	Иначе
	//		Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
	//		Сведения.Вставить("Свидетельство", 			 "");
	//	КонецЕсли;
	//	
	//	РеквизитЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ЮрФизЛицо");
	//	
	//	Если РеквизитЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
	//		Сведения.Вставить("КПП", Реквизиты.КПП);
	//	Иначе
	//		Сведения.Вставить("КПП", "");
	//	КонецЕсли;
	//	
	//	Сведения.Вставить("Телефоны", 		  ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
	//	
	//	Сведения.Вставить("НомерСчета", 	  РеквизитыСчета.НомерСчета);
	//	Сведения.Вставить("Банк", 			  РеквизитыСчета.Банк);
	//	Сведения.Вставить("БИК", 			  РеквизитыСчета.БИК);
	//	Сведения.Вставить("КоррСчет", 		  РеквизитыСчета.КоррСчет);
	//	Сведения.Вставить("АдресБанка", 	  РеквизитыСчета.АдресБанка);

	//	Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический", ДатаПериода));
	//	Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический", ДатаПериода));
	//	
	//КонецЕсли;
		
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		Результат = "";
	Иначе
		Попытка
			//УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(МассивПечатныхФорм)
			ИмяМодуля = "ФормированиеПечатныхФорм";
			Выполнить("Результат = "+ИмяМодуля+".ОписаниеОрганизации(СписокСведений, Список, СПрефиксом)");
		Исключение
			Результат = "";
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()




Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = СтрНайти(Параметр1, "%")
		Или СтрНайти(Параметр2, "%")
		Или СтрНайти(Параметр3, "%")
		Или СтрНайти(Параметр4, "%")
		Или СтрНайти(Параметр5, "%")
		Или СтрНайти(Параметр6, "%")
		Или СтрНайти(Параметр7, "%")
		Или СтрНайти(Параметр8, "%")
		Или СтрНайти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = СтрНайти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = СтрНайти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

Функция СформироватьСуммуПрописью(СуммаЧислом, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
	
	Сумма             = ?(СуммаЧислом < 0, -СуммаЧислом, СуммаЧислом);
	//ПараметрыПрописи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "ПараметрыПрописи");
	
	Результат = ЧислоПрописью(Сумма, "Л=ru_RU;ДП=Ложь"); //, ПараметрыПрописи);
	
	Если ВыводитьСуммуБезКопеек И Цел(Сумма) = Сумма Тогда
		Результат = Лев(Результат, СтрНайти(Результат, "0") - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОтветственныеЛицаОрганизации(Организация, Дата = Неопределено) Экспорт
	
	
	СтруктураОтветственных = Новый Структура;
	Ключ 			  = 	"МетаВидОтветственного";
	СтруктураОтветственных.Вставить(Ключ, 				         "");
	СтруктураОтветственных.Вставить(Ключ + "Должность",          "");
	СтруктураОтветственных.Вставить(Ключ + "ДолжностьСсылка",    Неопределено);
	СтруктураОтветственных.Вставить(Ключ + "Наименование",       "");
	СтруктураОтветственных.Вставить(Ключ + "Ссылка", 	         "");
	СтруктураОтветственных.Вставить("Руководитель", 	         "");
	СтруктураОтветственных.Вставить("ГлавныйБухгалтер", 	         "");
	            
				
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		//СтруктураОтветственных = Номер;
		СтруктураОтветственных.Вставить("РуководительДолжность",          "");

	Иначе
		Попытка
			//	ОтвЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(ДанныеПечати.Организация);
			ИмяМодуля = "ОтветственныеЛицаСервер";
			Выполнить("СтруктураОтветственных = "+ИмяМодуля+".ПолучитьОтветственныеЛицаОрганизации(Организация, Дата)");
		Исключение
			СтруктураОтветственных = "";
		КонецПопытки;	
	КонецЕсли;
		
	//Если Дата = Неопределено Тогда
	//	Дата = ТекущаяДатаСеанса();
	//КонецЕсли;
	//
	//СтруктураОтветственных = Новый Структура;
	//
	//СтруктураОтбора 	 = Новый Структура("Дата, Владелец", Дата, Организация);
	//ТаблицаОтветственных = ПолучитьТаблицуОтветственныхЛицПоОтбору(СтруктураОтбора);
	//ТаблицаОтветственных.Индексы.Добавить("ОтветственноеЛицо, ПравоПодписиПоДоверенности");
	//
	//Для Каждого МетаВидОтветственного Из Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления Цикл
	//	
	//	Ключ 			  = МетаВидОтветственного.Имя;
	//	ВидОтветственного = Перечисления.ОтветственныеЛицаОрганизаций[Ключ];
	//	СтрокаТаблицы 	  = Неопределено; // ответственный пока не определен
	//	
	//	// Попытаемся найти подходящее ответственное лицо
	//	СтруктураОтбора = Новый Структура("ОтветственноеЛицо", ВидОтветственного);
	//	СтрокиТаблицы = ТаблицаОтветственных.НайтиСтроки(СтруктураОтбора);
	//	
	//	Если СтрокиТаблицы.Количество() = 1 Тогда
	//		
	//		// Если есть только один ответственный данного вида - вернем его
	//		СтрокаТаблицы = СтрокиТаблицы[0];
	//		
	//	ИначеЕсли СтрокиТаблицы.Количество() > 1 Тогда
	//		
	//		СтруктураОтбора.Вставить("ПравоПодписиПоДоверенности", Ложь);
	//		
	//		СтрокиТаблицы = ТаблицаОтветственных.НайтиСтроки(СтруктураОтбора);
	//		Если СтрокиТаблицы.Количество() = 1 Тогда
	//			// Если есть основной ответственный данного вида - вернем его
	//			СтрокаТаблицы = СтрокиТаблицы[0];
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//	Если СтрокаТаблицы = Неопределено Тогда
	//		
	//		// Ответственное лицо этого вида не удалось определить
	//		СтруктураОтветственных.Вставить(Ключ, 				         Справочники.ФизическиеЛица.ПустаяСсылка());
	//		СтруктураОтветственных.Вставить(Ключ + "Должность",          "");
	//		СтруктураОтветственных.Вставить(Ключ + "ДолжностьСсылка",    Неопределено);
	//		СтруктураОтветственных.Вставить(Ключ + "Наименование",       "");
	//		СтруктураОтветственных.Вставить(Ключ + "Ссылка", 	         Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка());
	//	Иначе
	//		
	//		// Основное ответственное лицо этого вида найдено
	//		СтруктураОтветственных.Вставить(Ключ, 				         СтрокаТаблицы.ФизическоеЛицо);
	//		СтруктураОтветственных.Вставить(Ключ + "Должность",          СтрокаТаблицы.Должность);
	//		СтруктураОтветственных.Вставить(Ключ + "ДолжностьСсылка",    СтрокаТаблицы.ДолжностьСсылка);
	//		СтруктураОтветственных.Вставить(Ключ + "Наименование",       СтрокаТаблицы.Наименование);
	//		СтруктураОтветственных.Вставить(Ключ + "Ссылка", 	         СтрокаТаблицы.Ссылка);
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Возврат СтруктураОтветственных;
	
КонецФункции

Функция ФамилияИнициалыФизЛица(ФизическоеЛицо, Дата = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ФамилияИнициалы = "";
				
	КонецЕсли;
	
	Возврат ФамилияИнициалы;
	
КонецФункции

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати) Экспорт
	
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		//Результат = "";
	Иначе
		Попытка
			//УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(МассивПечатныхФорм)
			ИмяМодуля = "ШтрихкодированиеПечатныхФорм";
			Выполнить(ИмяМодуля+".ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка)");
			//.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры
		
Функция ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы) Экспорт
	
	Префикс = "";
	Постфикс = "";
	
	Возврат Новый Структура("Префикс, Постфикс", Префикс, Постфикс);
	
КонецФункции

Функция НомерНаПечать(Номер) Экспорт
	Система = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы("КонфигурацияДонор");
	Если Система = "БизнесТревелИMICE" Тогда
		Результат = Номер;
	Иначе
		Попытка
			//УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(МассивПечатныхФорм)
			ИмяМодуля = "ПрефиксацияОбъектовКлиентСервер";
			Выполнить("Результат = "+ИмяМодуля+".НомерНаПечать(Номер)");
		Исключение
			Результат = "";
		КонецПопытки;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции




Функция ХранилищеОбщихНастроекЗагрузить(НастройкаОткрытияМакетов, СпрашиватьРежимОткрытияМакета, СпрашиватьРежимОткрытияМакета2 = Истина) Экспорт
	//
	Возврат Неопределено;
КонецФункции

Процедура ХранилищеОбщихНастроекСохранить(
		НастройкаОткрытияМакетов, 
		СпрашиватьРежимОткрытияМакета, 
		СпрашиватьРежимОткрытияМакета2) Экспорт
	//
КонецПроцедуры

Функция ЭтоВебКлиент() Экспорт
	Возврат Ложь;
КонецФункции



#Область ПользовательскиеПечатныеФормы

Функция ВыборкаПользовательскихМакетов(Партнер, Контрагент, Договор, ИмяМакета, Объект = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ИмяМакета", ИмяМакета);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ПустойОбъект", Справочники.ДополнительныеОтчетыИПечатныеФормы.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект КАК Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета КАК ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер КАК Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент КАК Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор КАК Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Макет КАК Макет,
	               |	ПользовательскиеМакетыПечатиБТ.ЗапросМакета КАК ЗапросМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Использование КАК Использование,
	               |	ПользовательскиеМакетыПечатиБТ.КоличествоКопий КАК КоличествоКопий,
	               |	0 КАК Вес
	               |ПОМЕСТИТЬ ВсеВарианты
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиБТ КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = &Контрагент
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = &Договор
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |	И ВЫБОР
	               |			КОГДА &Объект = НЕОПРЕДЕЛЕНО
	               |					ИЛИ &Объект = &ПустойОбъект
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ПользовательскиеМакетыПечатиБТ.Объект = &Объект
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Макет,
	               |	ПользовательскиеМакетыПечатиБТ.ЗапросМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	ПользовательскиеМакетыПечатиБТ.КоличествоКопий,
	               |	1
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиБТ КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = &Контрагент
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |	И ВЫБОР
	               |			КОГДА &Объект = НЕОПРЕДЕЛЕНО
	               |					ИЛИ &Объект = &ПустойОбъект
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ПользовательскиеМакетыПечатиБТ.Объект = &Объект
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Макет,
	               |	ПользовательскиеМакетыПечатиБТ.ЗапросМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	ПользовательскиеМакетыПечатиБТ.КоличествоКопий,
	               |	2
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиБТ КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |	И ВЫБОР
	               |			КОГДА &Объект = НЕОПРЕДЕЛЕНО
	               |					ИЛИ &Объект = &ПустойОбъект
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ПользовательскиеМакетыПечатиБТ.Объект = &Объект
	               |		КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Макет,
	               |	ПользовательскиеМакетыПечатиБТ.ЗапросМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	ПользовательскиеМакетыПечатиБТ.КоличествоКопий,
	               |	3
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиБТ КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |	И ВЫБОР
	               |			КОГДА &Объект = НЕОПРЕДЕЛЕНО
	               |					ИЛИ &Объект = &ПустойОбъект
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ПользовательскиеМакетыПечатиБТ.Объект = &Объект
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВсеВарианты.Вес) КАК Вес
	               |ПОМЕСТИТЬ МинимальныйВес
	               |ИЗ
	               |	ВсеВарианты КАК ВсеВарианты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеВарианты.Объект КАК Объект,
	               |	ВсеВарианты.ИмяМакета КАК ИмяМакета,
	               |	ВсеВарианты.Партнер КАК Партнер,
	               |	ВсеВарианты.Контрагент КАК Контрагент,
	               |	ВсеВарианты.Договор КАК Договор,
	               |	ВсеВарианты.Макет КАК Макет,
	               |	ВсеВарианты.ЗапросМакета КАК ЗапросМакета,
	               |	ВсеВарианты.Использование КАК Использование,
	               |	ВсеВарианты.КоличествоКопий КАК КоличествоКопий,
	               |	ВсеВарианты.Вес КАК Вес
	               |ИЗ
	               |	МинимальныйВес КАК МинимальныйВес
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеВарианты КАК ВсеВарианты
	               |		ПО МинимальныйВес.Вес = ВсеВарианты.Вес";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
КонецФункции

Функция ПолучитьПользовательскийМакетПечатнойФормы(Партнер, Контрагент, Договор, ИмяМакета, Объект = Неопределено) Экспорт
	
	Макет = Неопределено;
	
	Выборка = ВыборкаПользовательскихМакетов(Партнер, Контрагент, Договор, ИмяМакета, Объект);
	Если Выборка.Следующий() Тогда
		Макет = Выборка.Макет.Получить();
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции


Функция ВыборкаПользовательскихПараметров(Партнер, Контрагент, Договор, ИмяМакета, ИмяПараметра)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ИмяМакета", ИмяМакета);
	Запрос.УстановитьПараметр("ИмяПараметра", ИмяПараметра);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект КАК Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета КАК ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер КАК Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент КАК Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор КАК Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Параметр КАК Параметр,
	               |	ПользовательскиеМакетыПечатиБТ.ЗначеиеПараметра КАК ЗначеиеПараметра,
	               |	ПользовательскиеМакетыПечатиБТ.Использование КАК Использование,
	               |	0 КАК Вес
	               |ПОМЕСТИТЬ ВсеВарианты
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиПараметры КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = &Контрагент
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = &Договор
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Параметр = &ИмяПараметра
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Параметр,
	               |	ПользовательскиеМакетыПечатиБТ.ЗначеиеПараметра,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	1
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиПараметры КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = &Контрагент
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Параметр = &ИмяПараметра
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Параметр,
	               |	ПользовательскиеМакетыПечатиБТ.ЗначеиеПараметра,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	2
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиПараметры КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = &Партнер
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Параметр = &ИмяПараметра
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПользовательскиеМакетыПечатиБТ.Объект,
	               |	ПользовательскиеМакетыПечатиБТ.ИмяМакета,
	               |	ПользовательскиеМакетыПечатиБТ.Партнер,
	               |	ПользовательскиеМакетыПечатиБТ.Контрагент,
	               |	ПользовательскиеМакетыПечатиБТ.Договор,
	               |	ПользовательскиеМакетыПечатиБТ.Параметр,
	               |	ПользовательскиеМакетыПечатиБТ.ЗначеиеПараметра,
	               |	ПользовательскиеМакетыПечатиБТ.Использование,
	               |	3
	               |ИЗ
	               |	РегистрСведений.ПользовательскиеМакетыПечатиПараметры КАК ПользовательскиеМакетыПечатиБТ
	               |ГДЕ
	               |	ПользовательскиеМакетыПечатиБТ.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.ИмяМакета = &ИмяМакета
	               |	И ПользовательскиеМакетыПечатиБТ.Параметр = &ИмяПараметра
	               |	И ПользовательскиеМакетыПечатиБТ.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	               |	И ПользовательскиеМакетыПечатиБТ.Использование = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МИНИМУМ(ВсеВарианты.Вес) КАК Вес
	               |ПОМЕСТИТЬ МинимальныйВес
	               |ИЗ
	               |	ВсеВарианты КАК ВсеВарианты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеВарианты.Объект КАК Объект,
	               |	ВсеВарианты.ИмяМакета КАК ИмяМакета,
	               |	ВсеВарианты.Партнер КАК Партнер,
	               |	ВсеВарианты.Контрагент КАК Контрагент,
	               |	ВсеВарианты.Договор КАК Договор,
	               |	ВсеВарианты.Параметр КАК Параметр,
	               |	ВсеВарианты.ЗначеиеПараметра КАК ЗначеиеПараметра,
	               |	ВсеВарианты.Использование КАК Использование,
	               |	ВсеВарианты.Вес КАК Вес
	               |ИЗ
	               |	МинимальныйВес КАК МинимальныйВес
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеВарианты КАК ВсеВарианты
	               |		ПО МинимальныйВес.Вес = ВсеВарианты.Вес";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
КонецФункции

Функция ПолучитьПользовательскийПараметрПечатнойФормы(Партнер, Контрагент, Договор, ИмяМакета, ИмяПараметра) Экспорт
	
	Параметр = Неопределено;
	
	Если ИмяПараметра = "КоличествоКопий" Тогда
		Выборка = ВыборкаПользовательскихМакетов(Партнер, Контрагент, Договор, ИмяМакета);
		Если Выборка.Следующий() Тогда
			Параметр = Выборка.КоличествоКопий;
		КонецЕсли;
	Иначе
		Выборка = ВыборкаПользовательскихПараметров(Партнер, Контрагент, Договор, ИмяМакета, ИмяПараметра);
		Если Выборка.Следующий() Тогда
			Параметр = Выборка.ЗначеиеПараметра;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции

Функция ПолучитьМакетДляПечатнойФормы(ОбработкаОбъект, Параметры, ИмяМакета) Экспорт
	
	ИнформацияВСтруктуре = ОбработкаОбъект.ПолучитьИнформациюОПечатнойФорме(Параметры, ИмяМакета);
	Макет = ПолучитьПользовательскийМакетПечатнойФормы(ИнформацияВСтруктуре.Партнер, ИнформацияВСтруктуре.Контрагент, ИнформацияВСтруктуре.Договор, ИнформацияВСтруктуре.Идентификатор);	
	Если Макет = Неопределено Тогда
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	КонецЕсли;	
	
	Возврат Макет
	
КонецФункции


Функция ПолучитьПользовательскийЗапрос(Партнер, Контрагент, Договор, ИмяМакета, Объект = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	
	Выборка = ВыборкаПользовательскихМакетов(Партнер, Контрагент, Договор, ИмяМакета, Объект = Неопределено);
	Если Выборка.Следующий() Тогда
		ТекстЗапроса = Выборка.ЗапросМакета;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьЗапросДляПечатнойФормы(ОбработкаОбъект, Параметры, ИмяМакета) Экспорт
	
	ИнформацияВСтруктуре = ОбработкаОбъект.ПолучитьИнформациюОПечатнойФорме(Параметры, ИмяМакета);
	ТекстЗапроса = ПолучитьПользовательскийЗапрос(ИнформацияВСтруктуре.Партнер, ИнформацияВСтруктуре.Контрагент, ИнформацияВСтруктуре.Договор, ИнформацияВСтруктуре.Идентификатор);	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса();
	КонецЕсли;	
	
	Возврат ТекстЗапроса
	
КонецФункции

#КонецОбласти