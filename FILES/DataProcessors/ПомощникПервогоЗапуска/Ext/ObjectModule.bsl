
Функция ЗаполнитьМестаСтатика() Экспорт
	//
	Макет = ПолучитьМакет("КлассификаторМестСтатика");
	
	Выполняемся = Истина;
	ИндексТекущейСтроки = 2;
	
	ТекущееМесто = Справочники.Места.ПустаяСсылка();
	ТекущееМестоОбъект = Неопределено;//ТекущееМесто.ПолучитьОбъект();
	МассивНеОбработанныхЗначений = Новый Массив;
	
	Пока Выполняемся Цикл
		//
		СтруктураЗначений = Новый Структура("КодМеста, Место, КодРодителя, ВидМеста, Характеристика, Значение");
		СтруктураЗначений.КодМеста 			= Макет.Область(ИндексТекущейСтроки, 1, ИндексТекущейСтроки, 1).Текст;
		СтруктураЗначений.Место 			= Макет.Область(ИндексТекущейСтроки, 2, ИндексТекущейСтроки, 2).Текст;
		СтруктураЗначений.КодРодителя 		= Макет.Область(ИндексТекущейСтроки, 3, ИндексТекущейСтроки, 3).Текст;
		СтруктураЗначений.ВидМеста 			= Макет.Область(ИндексТекущейСтроки, 4, ИндексТекущейСтроки, 4).Текст;
		СтруктураЗначений.Характеристика 	= Макет.Область(ИндексТекущейСтроки, 5, ИндексТекущейСтроки, 5).Текст;
		СтруктураЗначений.Значение 			= Макет.Область(ИндексТекущейСтроки, 6, ИндексТекущейСтроки, 6).Текст;
		
		Если СокрЛП(СтруктураЗначений.КодМеста) = "" Тогда
			Выполняемся = Ложь;
		Иначе	
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ТекущееМестоОбъект <> Неопределено И ТекущееМестоОбъект.Код = СтруктураЗначений.КодМеста Тогда
					//
				Иначе
					ТекущееМестоСсылка = Справочники.Места.НайтиПоКоду(СтруктураЗначений.КодМеста);
					Если ЗначениеЗаполнено(ТекущееМестоСсылка) Тогда
						ТекущееМестоОбъект = ТекущееМестоСсылка.ПолучитьОбъект();
					Иначе
						ТекущееМестоОбъект = Справочники.Места.СоздатьЭлемент();
						ТекущееМестоОбъект.Код = СтруктураЗначений.КодМеста;
					КонецЕсли;
					
					ТекущееМестоОбъект.Наименование = СтруктураЗначений.Место;
					ТекущееМестоОбъект.Родитель = Справочники.Места.НайтиПоКоду(СтруктураЗначений.КодРодителя);
					ТекущееМестоОбъект.ВидМеста = Справочники.ВидыМест[СтруктураЗначений.ВидМеста];
					ТекущееМестоОбъект.Записать();
					
					Если ТекущееМестоОбъект.Родитель.Код <> СтруктураЗначений.КодРодителя Тогда 
						МассивНеОбработанныхЗначений.Добавить(СтруктураЗначений);
					КонецЕсли;
					
				КонецЕсли;
				
				//Заполняем Характеристику
				Если СокрЛП(СтруктураЗначений.Характеристика) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания[СтруктураЗначений.Характеристика];
					ЗначениеТипа = СтруктураЗначений.Значение;
					
					МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
					МЗ.Место = ТекущееМестоОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;	
	
	Пока МассивНеОбработанныхЗначений.Количество()>0 Цикл
		
		Если МассивНеОбработанныхЗначений.Количество()>0 Тогда 
			
			СтруктураЗначений = МассивНеОбработанныхЗначений[0];
			ТекущееМестоСсылка = Справочники.Места.НайтиПоКоду(СтруктураЗначений.КодМеста);
			Если ЗначениеЗаполнено(ТекущееМестоСсылка) Тогда
				ТекущееМестоОбъект = ТекущееМестоСсылка.ПолучитьОбъект();
			Иначе
				ТекущееМестоОбъект = Справочники.Места.СоздатьЭлемент();
				ТекущееМестоОбъект.Код = СтруктураЗначений.КодМеста;
			КонецЕсли;
			
			ТекущееМестоОбъект.Наименование = СтруктураЗначений.Место;
			ТекущееМестоОбъект.Родитель = Справочники.Места.НайтиПоКоду(СтруктураЗначений.КодРодителя);
			ТекущееМестоОбъект.ВидМеста = Справочники.ВидыМест[СтруктураЗначений.ВидМеста];
			ТекущееМестоОбъект.Записать();
			
			МассивНеОбработанныхЗначений.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ЗаполнитьМестаЖД() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеМест.Значение КАК Значение,
	               |	ОписаниеМест.Место КАК Место
	               |ИЗ
	               |	РегистрСведений.ОписаниеМест КАК ОписаниеМест
	               |ГДЕ
	               |	ОписаниеМест.ТипОписания = &ТипОписания";
	Запрос.УстановитьПараметр("ТипОписания", Справочники.ТипыОписания.ЖДКод);
	ТЗКоды = Запрос.Выполнить().Выгрузить();
	//
	Макет = ПолучитьМакет("КлассификаторЖДСтанций");
	
	Выполняемся = Истина;
	ИндексТекущейСтроки = 2;
	
	ТекущееМесто = Справочники.Места.ПустаяСсылка();
	ТекущееМестоОбъект = Неопределено;//ТекущееМесто.ПолучитьОбъект();
	
	Пока Выполняемся Цикл
		//
		СтруктураЗначений = Новый Структура("НазваниеСтанции, НаименованиеЖД, Регион, КодСтанции, НазваниеОтделения");
		СтруктураЗначений.НазваниеСтанции 			= Макет.Область(ИндексТекущейСтроки, 1, ИндексТекущейСтроки, 1).Текст;
		СтруктураЗначений.НаименованиеЖД 			= Макет.Область(ИндексТекущейСтроки, 2, ИндексТекущейСтроки, 2).Текст;
		СтруктураЗначений.Регион 					= Макет.Область(ИндексТекущейСтроки, 3, ИндексТекущейСтроки, 3).Текст;
		СтруктураЗначений.КодСтанции 				= Макет.Область(ИндексТекущейСтроки, 4, ИндексТекущейСтроки, 4).Текст;
		СтруктураЗначений.НазваниеОтделения 		= Макет.Область(ИндексТекущейСтроки, 5, ИндексТекущейСтроки, 5).Текст;
		
		Если СокрЛП(СтруктураЗначений.НазваниеСтанции) = "" Тогда
			Выполняемся = Ложь;
		Иначе	
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ТекущееМестоОбъект <> Неопределено И ТекущееМестоОбъект.Наименование = СтруктураЗначений.НазваниеСтанции Тогда
					//
				Иначе
					ТекущееМестоСсылкаМассив = ТЗКоды.НайтиСтроки(Новый Структура("Значение", СтруктураЗначений.КодСтанции));
					
					Если Не ТекущееМестоСсылкаМассив.Количество() = 0 Тогда
						ТекущееМестоОбъект = ТекущееМестоСсылкаМассив[0].Место.ПолучитьОбъект();
					Иначе
						ТекущееМестоОбъект = Справочники.Места.СоздатьЭлемент(); 						
					КонецЕсли;
					
					ТекущееМестоОбъект.Наименование = СтруктураЗначений.НазваниеСтанции;
					ТекущееМестоОбъект.ВидМеста = Справочники.ВидыМест.ЖДСтанция;
					ТекущееМестоОбъект.Записать();
					
				КонецЕсли;
				
				//Заполняем Характеристику
				 //НаименованиеЖД, Регион, КодСтанции, НазваниеОтделения
				Если СокрЛП(СтруктураЗначений.НаименованиеЖД) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания.НаименованиеЖД;
					ЗначениеТипа = СтруктураЗначений.НаименованиеЖД;
					
					МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
					МЗ.Место = ТекущееМестоОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				Если СокрЛП(СтруктураЗначений.Регион) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания.Регион;
					ЗначениеТипа = СтруктураЗначений.Регион;
					
					МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
					МЗ.Место = ТекущееМестоОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				Если СокрЛП(СтруктураЗначений.КодСтанции) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания.ЖДКод;
					ЗначениеТипа = СтруктураЗначений.КодСтанции;
					
					МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
					МЗ.Место = ТекущееМестоОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				Если СокрЛП(СтруктураЗначений.НазваниеОтделения) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания.НазваниеОтделения;
					ЗначениеТипа = СтруктураЗначений.НазваниеОтделения;
					
					МЗ = РегистрыСведений.ОписаниеМест.СоздатьМенеджерЗаписи();
					МЗ.Место = ТекущееМестоОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
			
			ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

Функция ЗаполнитьАвиакомпании() Экспорт
	
	ПартнерАвиакомпании = Справочники.Партнеры.НайтиПоНаименованию("Авиакомпании");
	Если Не ЗначениеЗаполнено(ПартнерАвиакомпании) Тогда
		ПартнерАвиакомпанииОб = Справочники.Партнеры.СоздатьЭлемент();
		ПартнерАвиакомпанииОб.Наименование = "Авиакомпании";
		ПартнерАвиакомпанииОб.Записать();
		ПартнерАвиакомпании = ПартнерАвиакомпанииОб.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеКонтрагентов.Значение КАК Значение,
	               |	ОписаниеКонтрагентов.Контрагент КАК Контрагент
	               |ИЗ
	               |	РегистрСведений.ОписаниеКонтрагентов КАК ОписаниеКонтрагентов
	               |ГДЕ
	               |	ОписаниеКонтрагентов.ТипОписания = &ТипОписания";
	Запрос.УстановитьПараметр("ТипОписания", Справочники.ТипыОписания.IATA);
	ТЗКоды = Запрос.Выполнить().Выгрузить();
	//
	Макет = ПолучитьМакет("КлассификаторАвиакомпаний");

	Текст = "";
	Для Индекс = 1 По Макет.КоличествоСтрок() Цикл
		Текст  = Текст + Макет.ПолучитьСтроку(Индекс);
    КонецЦикла;

	Структура = УправлениеБТВызовСервера.ИзJSON(Текст);
	
	Для Каждого ТекСтр Из Структура Цикл 
		//
		СтруктураЗначений = Новый Структура("code, name, name_translations");
		СтруктураЗначений.code 					= ТекСтр.code;
		СтруктураЗначений.name 					= ТекСтр.name;
		СтруктураЗначений.name_translations 	= ТекСтр.name_translations;
			
			НачатьТранзакцию();
			
			Попытка
				
					ТекКонтрагентСсылкаМассив = ТЗКоды.НайтиСтроки(Новый Структура("Значение", СтруктураЗначений.code));
					
					Если Не ТекКонтрагентСсылкаМассив.Количество() = 0 Тогда
						ТекКонтрагентОбъект = ТекКонтрагентСсылкаМассив[0].Контрагент.ПолучитьОбъект();
					Иначе
						ТекКонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
						
					КонецЕсли;
					
					Для Каждого ТекКлюч Из СтруктураЗначений.name_translations Цикл 
						ИмяАнгл = ТекКлюч.Значение;
					КонецЦикла;
					
					Если ЗначениеЗаполнено(СтруктураЗначений.name) Тогда
						ТекКонтрагентОбъект.Наименование = СтруктураЗначений.name;
						ТекКонтрагентОбъект.НаименованиеПолное = СтруктураЗначений.name;
					Иначе
						ТекКонтрагентОбъект.Наименование = ИмяАнгл;
						ТекКонтрагентОбъект.НаименованиеПолное = ИмяАнгл;
					КонецЕсли;

					ТекКонтрагентОбъект.Партнер = ПартнерАвиакомпании;
					ТекКонтрагентОбъект.Записать();
				
				//Заполняем Характеристику
				// code,... 
				Если СокрЛП(СтруктураЗначений.code) <> "" Тогда
					//
					ТипМеста = Справочники.ТипыОписания.IATA;
					ЗначениеТипа = СтруктураЗначений.code;
					
					МЗ = РегистрыСведений.ОписаниеКонтрагентов.СоздатьМенеджерЗаписи();
					МЗ.Контрагент = ТекКонтрагентОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяАнгл) Тогда
					//
					ТипМеста = Справочники.ТипыОписания.ИмяАнг;
					ЗначениеТипа = ИмяАнгл;
					
					МЗ = РегистрыСведений.ОписаниеКонтрагентов.СоздатьМенеджерЗаписи();
					МЗ.Контрагент = ТекКонтрагентОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				//
				Если ЗначениеЗаполнено(ИмяАнгл) Тогда
					//
					ТипМеста = Справочники.ТипыОписания.НРегИмяАнг;
					ЗначениеТипа = НРег(ИмяАнгл);
					
					МЗ = РегистрыСведений.ОписаниеКонтрагентов.СоздатьМенеджерЗаписи();
					МЗ.Контрагент = ТекКонтрагентОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураЗначений.name) Тогда
					//
					ТипМеста = Справочники.ТипыОписания.НРегИмя;
					ЗначениеТипа = НРег(СтруктураЗначений.name);
					
					МЗ = РегистрыСведений.ОписаниеКонтрагентов.СоздатьМенеджерЗаписи();
					МЗ.Контрагент = ТекКонтрагентОбъект.Ссылка;
					МЗ.ТипОписания = ТипМеста;
					МЗ.Значение = ЗначениеТипа;
					МЗ.Записать(Истина);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
	КонецЦикла;	
	
КонецФункции

Функция ЗаполнитьСтавкиНДС() Экспорт
	
	Ставка = Справочники.СтавкиНДСБТ.БезНДС.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 0;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Ставка.СуммаВключаетНДС = Ложь;
	Ставка.ЗначениеJSON = -1;
	Ставка.Записать();
	
	Ставка = Справочники.СтавкиНДСБТ.НДС0.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 0;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
	Ставка.СуммаВключаетНДС = Ложь;
	Ставка.ЗначениеJSON = 0;
	Ставка.Записать();
	
	Ставка = Справочники.СтавкиНДСБТ.НДС10.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 10;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
	Ставка.СуммаВключаетНДС = Ложь;
	Ставка.ЗначениеJSON = 10;
	Ставка.Записать();
	
	Ставка = Справочники.СтавкиНДСБТ.НДС10110.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 10;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
	Ставка.СуммаВключаетНДС = Истина;
	Ставка.ЗначениеJSON = 110;
	Ставка.Записать();
	
	Ставка = Справочники.СтавкиНДСБТ.НДС18.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 18;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Ставка.СуммаВключаетНДС = Ложь;
	Ставка.ЗначениеJSON = 18;
	Ставка.Записать();
	
	Ставка = Справочники.СтавкиНДСБТ.НДС18118.ПолучитьОбъект();
	Ставка.СтавкаНДСЧислом = 18;
	Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	Ставка.СуммаВключаетНДС = Истина;
	Ставка.ЗначениеJSON = 118;
	Ставка.Записать();
	
	Попытка
		Ставка = Справочники.СтавкиНДСБТ.НДС20.ПолучитьОбъект();
		Ставка.СтавкаНДСЧислом = 20;
		Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		Ставка.СуммаВключаетНДС = Ложь;
		Ставка.ЗначениеJSON = 20;
		Ставка.Записать();
	Исключение
	КонецПопытки;
	
	Попытка
		Ставка = Справочники.СтавкиНДСБТ.НДС20120.ПолучитьОбъект();
		Ставка.СтавкаНДСЧислом = 20;
		Ставка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
		Ставка.СуммаВключаетНДС = Истина;
		Ставка.ЗначениеJSON = 120;
		Ставка.Записать();
	Исключение
	КонецПопытки;
	
КонецФункции


Функция ЗаполнитьВидыНоменклатурУТ() Экспорт
		
КонецФункции