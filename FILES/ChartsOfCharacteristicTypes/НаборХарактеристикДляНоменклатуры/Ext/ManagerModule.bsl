
Функция ЗагрузитьПредопределенныеЗначения() Экспорт
	
	Макет = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ПолучитьМакет("ПредопределенныеЗначения");
	
	ТекущаяСтрока = 1;
	ВыполнятьЗагрузку = Истина;
	Пока ВыполнятьЗагрузку Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		ИмяПредопределенного = Макет.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Наименование = Макет.Область(ТекущаяСтрока, 2, ТекущаяСтрока, 2).Текст;
		НаименованиеJSON = Макет.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		ФункцияПоУмолчанию = Макет.Область(ТекущаяСтрока, 4, ТекущаяСтрока, 4).Текст;
		ТипСтрокой = Макет.Область(ТекущаяСтрока, 5, ТекущаяСтрока, 5).Текст;
		
		ФункцияПоУмолчаниюСсылка = Справочники.ФункцииОписания.ПустаяСсылка();
		Если ФункцияПоУмолчанию<>"" Тогда 
			ФункцияПоУмолчаниюСсылка = Справочники.ФункцииОписания[ФункцияПоУмолчанию];
		КонецЕсли;
		
		Если ИмяПредопределенного = "" Тогда
			ВыполнятьЗагрузку = Ложь;
		Иначе
			Попытка
				//Метаданные.Справочники.ФункцииОписания.Предопределенные
				ЭлементСправочника = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры[ИмяПредопределенного].ПолучитьОбъект();
				Если Наименование <> "" Тогда
					ЭлементСправочника.Наименование = Наименование;
				КонецЕсли;
				ЭлементСправочника.НаименованиеJSON = НаименованиеJSON;
				ЭлементСправочника.ФункцияПоУмолчанию = ФункцияПоУмолчаниюСсылка;
				
				Массив = Новый Массив;
				Массив.Добавить(Тип(ТипСтрокой));
				Если ТипСтрокой = "Число" Тогда
					КЧ = Новый КвалификаторыЧисла(15,2);
					ОписаниеТипов = Новый ОписаниеТипов(Массив, , ,КЧ);
				ИначеЕсли ТипСтрокой = "Строка" Тогда
					КС = Новый КвалификаторыСтроки(250);
					ОписаниеТипов = Новый ОписаниеТипов(Массив, , КС);
				Иначе
					ОписаниеТипов = Новый ОписаниеТипов(Массив);
				КонецЕсли;
				ЭлементСправочника.ТипЗначения = ОписаниеТипов;
				
				ЭлементСправочника.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
			
	КонецЦикла;
	
КонецФункции




Функция ПолучитьСтруктуруJSON() Экспорт
	
	Результат = Новый Структура();
	Макет = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ПолучитьМакет("ПредопределенныеЗначения");
	
	ТекущаяСтрока = 1;
	ВыполнятьЗагрузку = Истина;
	Пока ВыполнятьЗагрузку Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		Ключ = Макет.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		Значение = Макет.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		ИмяФункции = Макет.Область(ТекущаяСтрока, 4, ТекущаяСтрока, 4).Текст;
		
		Если Ключ = "" Тогда
			ВыполнятьЗагрузку = Ложь;
		Иначе
			Попытка
				Если ИмяФункции <> "" Тогда
					СсылкаНаФункцию = Справочники.ФункцииОписания[ИмяФункции];
				Иначе
					СсылкаНаФункцию = Справочники.ФункцииОписания.ПустаяСсылка();
				КонецЕсли;
				
				Результат.Вставить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры[Ключ], Новый Структура("Реквизит, КакЗаполнять", Значение, СсылкаНаФункцию));
			Исключение
			КонецПопытки;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитов() Экспорт
	
	Результат = Новый Структура();
	Макет = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ПолучитьМакет("ПредопределенныеЗначения");
	
	ТекущаяСтрока = 1;
	ВыполнятьЗагрузку = Истина;
	Пока ВыполнятьЗагрузку Цикл
		ТекущаяСтрока = ТекущаяСтрока + 1;
		
		Ключ = Макет.Область(ТекущаяСтрока, 3, ТекущаяСтрока, 3).Текст;
		Значение = Макет.Область(ТекущаяСтрока, 1, ТекущаяСтрока, 1).Текст;
		ИмяФункции = Макет.Область(ТекущаяСтрока, 4, ТекущаяСтрока, 4).Текст;
		
		Если Ключ = "" Тогда
			ВыполнятьЗагрузку = Ложь;
		Иначе
			Попытка
				Если ИмяФункции <> "" Тогда
					СсылкаНаФункцию = Справочники.ФункцииОписания[ИмяФункции];
				Иначе
					СсылкаНаФункцию = Справочники.ФункцииОписания.ПустаяСсылка();
				КонецЕсли;
				
				Результат.Вставить(Ключ, Новый Структура("Реквизит, ФункцияПоУмолчанию", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры[Значение], СсылкаНаФункцию));
			Исключение
			КонецПопытки;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
