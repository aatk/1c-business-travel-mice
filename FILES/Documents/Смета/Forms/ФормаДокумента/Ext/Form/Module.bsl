
&НаКлиенте
Процедура УслугиПриАктивизацииЯчейки(Элемент)
	//ТД = Элементы.Услуги.ТекущиеДанные;
	//Если ТД <> Неопределено Тогда
	//	Если ЗначениеЗаполнено(ТД.Услуга) Тогда
	//		Элементы.УслугиНоменклатураБТ.Доступность = Ложь;
	//	Иначе	
	//		Элементы.УслугиНоменклатураБТ.Доступность = Истина;
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УслугиПересчетПриИзмененииНаСервере(ТС)
	ТД = Объект.Услуги.НайтиПоИдентификатору(ТС);
	ТД.Сумма = ТД.Цена;
	РасчетСуммыВсегоНаСервере(ТС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПересчетПриИзменении(Элемент)
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	УслугиПересчетПриИзмененииНаСервере(ТС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзмененииСервер(ТС)
	ТД = Объект.Услуги.НайтиПоИдентификатору(ТС);
	ТД.Цена = ТД.Сумма;
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	УслугиСуммаПриИзмененииСервер(ТС);
КонецПроцедуры

&НаСервере
Процедура РасчетСуммыВсегоНаСервере(ТС)
	ТД = Объект.Услуги.НайтиПоИдентификатору(ТС);
	ТД.СуммаВсего = ТД.Сумма - ТД.Скидка + ТД.Наценка;
	ТД.СуммаНДС = УправлениеБТВызовСервера.ПолучитьСуммуНДС(ТД.СуммаВсего, ТД.СтавкаНДС, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасчетСуммыВсего(Элемент)
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	РасчетСуммыВсегоНаСервере(ТС);
КонецПроцедуры

&НаСервере
Процедура УслугиСуммаВсегоПриИзмененииНаСервере(ТС)
	ТД = Объект.Услуги.НайтиПоИдентификатору(ТС);
	ТД.Сумма = ТД.СуммаВсего + ТД.Скидка - ТД.Наценка;
	ТД.Цена = ТД.Сумма;
	ТД.СуммаНДС = ТД.СуммаВсего/118*0.18;
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВсегоПриИзменении(Элемент)
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	УслугиСуммаВсегоПриИзмененииНаСервере(ТС);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтавкуНДС()
	
	Если ЗначениеЗаполнено(ЭтаФорма.СтавкаНДСОрганизации) Тогда
		СтавкаНДС = ЭтаФорма.СтавкаНДСОрганизации;
	//Иначе
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = "ВЫБРАТЬ
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.Период,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.Организация,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикЕНВД,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.УчетнаяПолитика,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяПБУ18,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПлательщикНалогаНаПрибыль,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСН,
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.ПрименяетсяУСНДоходыМинусРасходы
	//	               |ИЗ
	//	               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
	//	               |ГДЕ
	//	               |	УчетнаяПолитикаОрганизацийСрезПоследних.Организация = &Организация";
	//	Запрос.УстановитьПараметр("Организация",Объект.Организация);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Если Выборка.Следующий() Тогда
	//		Если Выборка.ПрименяетсяУСН Тогда
	//			СтавкаНДС = Справочники.СтавкиНДСБТ.БезНДС;//Перечисления.СтавкиНДС.БезНДС;
	//		Иначе			
	//			СтавкаНДС = Справочники.СтавкиНДСБТ.НДС20;//Перечисления.СтавкиНДС.НДС18;
	//		КонецЕсли;
	//	КонецЕсли;
	КонецЕсли;
		
	Возврат СтавкаНДС;
	
КонецФункции

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.СтавкаНДС = ПолучитьСтавкуНДС()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СделкаПриИзмененииНаСервере()
	//Объект.Партнер = Объект.Сделка.Партнер;	
КонецПроцедуры

&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	//СделкаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЭтаФорма.СтавкаНДСОрганизации = Неопределено;
	ЭтаФорма.СтавкаНДСОрганизации = ПолучитьСтавкуНДС();
КонецПроцедуры











#Область ТиповойФункционал

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	УправляемыеФормыСервер.ВыполнитьНазначаемуюКомандуНаСервере("ДополнительныеОтчетыИОбработки", ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ УправляемыеФормыКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте("ДополнительныеОтчетыИОбработкиКлиент", ЭтаФорма, Команда.Имя) Тогда 	
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправляемыеФормыКлиент.УПВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуОтчет("МенюОтчетыКлиент", Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании("ВводНаОснованииКлиент", Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	УправляемыеФормыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	УправляемыеФормыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	УправляемыеФормыКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти


// ТИПОВЫЙ ОБРАБОТЧИКИ

#Область Действия

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОчистка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОткрытие(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСоздание(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииСтроки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииПоля(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииЯчейки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломИзменения(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередУдалением(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередРазворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередСворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПослеУдаления(Элемент)
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриСменеТекущегоРодителя(Элемент)
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры

#КонецОбласти


// КЛИЕНТ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Начало");	
	Если НЕ УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Вместо") Тогда
		//Вставить содержимое обработчика
		ОтобратьСтрокиОписанияПоГуид();
	КонецЕсли;
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Начало");	
	//
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Конец");	
КонецПроцедуры

// КЛИЕНТ ФОРМЫ ОБЪЕКТА

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Конец");	
КонецПроцедуры



//СЕРВЕР

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Начало");
	
	Если НЕ УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Вместо") Тогда
		Если Не Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь") = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
				Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
				Объект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ОрганизацияПоУмолчанию);
			//Объект.Организация = Справочники.Организации.УправленческаяОрганизация;	
		КонецЕсли;
		
		//Типовой функционал
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("МенюОтчеты", ЭтаФорма, Элементы.ПодменюОтчеты);
		УправляемыеФормыСервер.ПриСозданииНаСервереМодуль("СобытияФорм", ЭтаФорма, Отказ, СтандартнаяОбработка);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("УправлениеПечатью", ЭтаФорма, Элементы.ПодменюПечать);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("ВводНаОсновании", ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
		//Конец Типового функционала 
		
		УслугиКол = ЗаказИзКорзиныПриИзмененииНаСервере();
	КонецЕсли;
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Конец");
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры


// СЕРВЕР ФОРМЫ ОБЪЕКТА
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры


&НаКлиенте
Функция ВыполняемсяНаКлиенте(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции
&НаСервере
Функция ВыполняемсяНаСервере(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции



&НаСервере
Процедура ЗаполнитьУслугамиПоПроектуНаСервере()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	УправлениеБТСервер.ЗаполнитьСметуУслугамиПоПроекту(ОбъектСервер);
	
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугамиПоПроекту(Команда)
	ЗаполнитьУслугамиПоПроектуНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ЗаказИзКорзиныПриИзмененииНаСервере()
	Услуги.Загрузить(Объект.ЗаказИзКорзины.Услуги.Выгрузить());
	ОписаниеНоменклатуры.Загрузить(Объект.ЗаказИзКорзины.ОписаниеНоменклатуры.Выгрузить());
	Возврат Услуги.Количество()
КонецФункции

&НаКлиенте
Процедура ЗаказИзКорзиныПриИзменении(Элемент)
	УслугиКол = ЗаказИзКорзиныПриИзмененииНаСервере();
	Если Не УслугиКол = 0 Тогда
		СтрокаТЗ = Услуги[0]; // для примера возьмем строку 1
		ИдентификаторСтроки = СтрокаТЗ.ПолучитьИдентификатор();
		Элементы.УслугиПлан.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПланПриАктивизацииСтроки(Элемент)	
	ОтобратьСтрокиОписанияПоГуид();	             
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьСтрокиОписанияПоГуид()
	
	ГУИД = "";
	Если НЕ Элементы.УслугиПлан.ТекущиеДанные = Неопределено Тогда
		ГУИД = Элементы.УслугиПлан.ТекущиеДанные.ГУИД;
		Если ГУИД = "" Тогда
			ГУИД = ПолучитьГУИД();
			Элементы.УслугиПлан.ТекущиеДанные.ГУИД = ГУИД;  	
		КонецЕсли;		
	КонецЕсли;		
	
	ПараментрыОтбора = Новый Структура("ГУИД",ГУИД);
	Элементы.ОписаниеНоменклатурыПлан.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараментрыОтбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГУИД()
	Возврат Строка(Новый УникальныйИдентификатор()); 
КонецФункции

&НаКлиенте
Процедура ЗаказИзКорзиныНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаДок = ПолучитьФорму("Документ.ЗаказИзКорзины.ФормаВыбора");
	ЭлементОтбора = ФормаДок.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Объект.Контрагент;
	ФормаДок.Параметры.РежимВыбора = Истина;
	ФормаДок.ВладелецФормы = ЭтаФорма.Элементы.ЗаказИзКорзины;
	ФормаДок.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНаценкаРасчет()
	Элементы.Услуги.ТекущиеДанные.Наценка =  ?(Элементы.Услуги.ТекущиеДанные.НаценкаПроцент, Элементы.Услуги.ТекущиеДанные.Сумма * Элементы.Услуги.ТекущиеДанные.НаценкаРазмер / 100, Элементы.Услуги.ТекущиеДанные.НаценкаРазмер);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаРасчет()
	Элементы.Услуги.ТекущиеДанные.Скидка =  ?(Элементы.Услуги.ТекущиеДанные.СкидкаПроцент, (Элементы.Услуги.ТекущиеДанные.Сумма + Элементы.Услуги.ТекущиеДанные.Наценка) * Элементы.Услуги.ТекущиеДанные.СкидкаРазмер / 100, Элементы.Услуги.ТекущиеДанные.СкидкаРазмер);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНаценкаРазмерПриИзменении(Элемент)
	УслугиНаценкаРасчет();
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	РасчетСуммыВсегоНаСервере(ТС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНаценкаПроцентПриИзменении(Элемент)
	УслугиНаценкаРасчет();
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	РасчетСуммыВсегоНаСервере(ТС);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаРазмерПриИзменении(Элемент)
	УслугиСкидкаРасчет();
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	РасчетСуммыВсегоНаСервере(ТС); 
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПроцентПриИзменении(Элемент)
	УслугиСкидкаРасчет();
	ТС = Элементы.Услуги.ТекущиеДанные.ПолучитьИдентификатор();
	РасчетСуммыВсегоНаСервере(ТС);
КонецПроцедуры

&НаСервере
Процедура УслугиПриИзмененииНаСервере()
	Объект.Премия = Объект.Услуги.Итог("Наценка") - Объект.Услуги.Итог("Скидка");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	УслугиПриИзмененииНаСервере();
КонецПроцедуры






&НаСервере
Функция УслугиУслугаПриИзмененииНаСервере(Услуга)
	
	Значения = Новый Структура("НоменклатураБТ, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС");
	Если ЗначениеЗаполнено(Услуга) Тогда
		Значения.НоменклатураБТ = Услуга.НоменклатураБТ;
		Значения.Цена = Услуга.ЦенаКлиента;
		Значения.Количество = 1;
		Значения.Сумма = Услуга.СуммаКлиента;
		Значения.СтавкаНДС = Услуга.СтавкаНДСКлиента;
		Значения.СуммаНДС = Услуга.СуммаНДСКлиента;
	КонецЕсли;
	Возврат Значения;
	
КонецФункции

&НаКлиенте
Процедура УслугиУслугаПриИзменении(Элемент)
	
	ТД = Элементы.Услуги.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Значения = УслугиУслугаПриИзмененииНаСервере(ТД.Услуга);
		ЗаполнитьЗначенияСвойств(ТД, Значения);
		УслугиПересчетПриИзменении(Элемент);	
	КонецЕсли;
	
	
КонецПроцедуры



