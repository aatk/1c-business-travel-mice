

&НаСервере
Процедура ЗаполнитьСкрытыеСтрокиОписанияУслуг()
	
	ОтборОписания = Новый Структура("НеОтображать", Истина);		
	СтрокиХарактеристики = Объект.НоменклатураБТ.Характеристики.НайтиСтроки(ОтборОписания);		
		
	Для Каждого СтрокаНастроек ИЗ СтрокиХарактеристики Цикл		
		ОтборОписания = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);		
		Строки = Объект.ОписаниеУслуги.НайтиСтроки(ОтборОписания);		
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка ИЗ Строки Цикл 
				Строка.СкрытаяСтрока = Истина;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьХарактеристикиНаСервере(НоменклатураБТ)
	
	СписокХарактеристик = Новый Массив;
	
	СтарыеХарактеристики = Объект.ОписаниеУслуги.Выгрузить();
	Объект.ОписаниеУслуги.Очистить();
	
	Для Каждого СтрокаНастроек ИЗ НоменклатураБТ.Характеристики Цикл		
		
		НоваяСтрока = Объект.ОписаниеУслуги.Добавить();		
		НоваяСтрока.Характеристика = СтрокаНастроек.Характеристика;
		
		ОтборОписания = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);		
		Строки = СтарыеХарактеристики.НайтиСтроки(ОтборОписания);		
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка ИЗ Строки Цикл 
				НоваяСтрока.Значение = Строка.Значение;
			КонецЦикла;	
		КонецЕсли;
		
		Если СтрокаНастроек.ХранитьИсторию Тогда
			СписокХарактеристик.Добавить(СтрокаНастроек.Характеристика);
		КонецЕсли;
		
		Если СтрокаНастроек.НеОтображать Тогда
			СписокСкрытых.Добавить(СтрокаНастроек.Характеристика);
		КонецЕсли;
		
		Если СтрокаНастроек.ОбязательноеЗаполнение Тогда
			СписокОбязательных.Добавить(СтрокаНастроек.Характеристика);
		КонецЕсли;
		
		НоваяСтрока.СкрытаяСтрока = СтрокаНастроек.НеОтображать;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УслугаОписаниеУслуги", Объект.ОписаниеУслуги.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	УслугаОписаниеУслуги.Характеристика КАК Характеристика,
	               |	УслугаОписаниеУслуги.Значение КАК Значение
	               |ПОМЕСТИТЬ ТекущиеДанные
	               |ИЗ
	               |	&УслугаОписаниеУслуги КАК УслугаОписаниеУслуги
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеДанные.Характеристика КАК Характеристика,
	               |	ТекущиеДанные.Значение КАК Значение
	               |ИЗ
	               |	ТекущиеДанные КАК ТекущиеДанные";
	Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗначениеВРеквизитФормы(Выгрузка, "ДеревоОписаниеУслуги");
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураБТПриИзменении(Элемент)
	ЗаполнитьХарактеристикиНаСервере(Объект.НоменклатураБТ);
КонецПроцедуры




&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	
	ВключаяНДС = Истина;
	Если ВключаяНДС Тогда
		Объект.Сумма = Объект.Цена;
	Иначе
		Объект.Сумма = Объект.Цена + Объект.СуммаНДС;
	КонецЕсли;
	
	СтавкаНДСПриИзмененииНаСервере();
	
	Объект.ЦенаКлиента = Объект.Цена;
	Объект.СуммаКлиента = Объект.Сумма;
	СтавкаНДСКлиентаПриИзмененииНаСервере();
		
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Услуга", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИспользованыеУслуги.Регистратор
		               |ИЗ
		               |	РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
		               |ГДЕ
		               |	ИспользованыеУслуги.Услуга = &Услуга";			  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтаФорма.ЗаказКомандируемого = Выборка.Регистратор;
		КонецЕсли;
		
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Услуга", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	УслугиВЗаказеКлиента.ЗаказКлиентаБТ
		               |ИЗ
		               |	РегистрСведений.УслугиВЗаказеКлиента КАК УслугиВЗаказеКлиента
		               |ГДЕ
		               |	УслугиВЗаказеКлиента.Услуга = &Услуга";			  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭтаФорма.ЗаказКлиентаБТ = Выборка.ЗаказКлиентаБТ;
		Иначе
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Услуга", Объект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ПодготовитьДляФормированияДокументов.ДатаФормирования КАК ДатаФормирования
			               |ИЗ
			               |	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
			               |ГДЕ
			               |	ПодготовитьДляФормированияДокументов.Услуга = &Услуга";			  
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЭтаФорма.ЗаказКлиентаБТ = "Заказ клиента БТ будет сформирован на " + Формат(Выборка.ДатаФормирования, "ДЛФ=DDT");
			КонецЕсли;			
		КонецЕсли;
		
		
		СтатусУслуги = УправлениеБТСервер.ПолучитьСтатусУслуги(Объект.Ссылка, ТекущаяДата());
		
	КонецЕсли;
	
КонецПроцедуры

#Область ТиповойФункционал

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	УправляемыеФормыСервер.ВыполнитьНазначаемуюКомандуНаСервере("ДополнительныеОтчетыИОбработки", ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	//ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	//Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
	Если НЕ УправляемыеФормыКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте("ДополнительныеОтчетыИОбработкиКлиент", ЭтаФорма, Команда.Имя) Тогда 	
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправляемыеФормыКлиент.УПВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуОтчет("МенюОтчетыКлиент", Команда, ЭтаФорма, Объект);
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании("ВводНаОснованииКлиент", Команда, ЭтаФорма, Объект);
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	УправляемыеФормыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	УправляемыеФормыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	УправляемыеФормыКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


#КонецОбласти




&НаСервере
Функция ЗаполнитьИзИсходногоФайлаНаСервере(ВариантЗагрузки = Неопределено)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Если ЗначениеЗаполнено(ВариантЗагрузки) Тогда
		//Загрузить файл в шину	и прикрепить исходный файл к услуге
		//ОбъектСервер = Документы.Услуга.СоздатьДокумент();
		СтрокаСИД = ОбъектСервер.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.IDСинхронизации, "Характеристика");
		Если СтрокаСИД = Неопределено Тогда
			Сообщить("Не нашел Характеристики со значением ""IDСинхронизации""");
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСИД.Значение) Тогда
			Сообщить("Не заполнена Характеристика ""IDСинхронизации""");			
		Иначе
			IDУслуги = СтрокаСИД.Значение;
			ПолучилиФайл = УправлениеБТВызовСервера.ПолучитьИПрикрепитьИсходныйФайл(ОбъектСервер, ВариантЗагрузки, IDУслуги);
			Если НЕ ПолучилиФайл Тогда
				Сообщить("Произошла ошибка получения файла из шины предприятия");			
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	ЕстьИсходныйФайл = УправлениеБТСервер.ЗагрузкаИзИсходника(ОбъектСервер);
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	Возврат ЕстьИсходныйФайл; 
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеВыбораНастройкиУслуги(ВыбранноеЗначение, П2) Экспорт
	ЗаполнитьИзИсходногоФайлаНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзИсходногоФайла(Команда)
	ЕстьИсходныйФайл = ЗаполнитьИзИсходногоФайлаНаСервере();
	Если НЕ ЕстьИсходныйФайл Тогда
		// Вызов процедуры клиентского модуля
		Параметр = "1";
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораНастройкиУслуги", ЭтотОбъект, Параметр);
		ОткрытьФорму("Справочник.НастройкиЗагрузокУслуг.ФормаВыбора",,,,,,Оп);		
	КонецЕсли;
	
КонецПроцедуры







&НаСервере
Процедура СоздатьЗаказИзКорзиныНаСервере()
	// Вставить содержимое обработчика.
	Если ЭтаФорма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Сообщить("Требуется сохранить документ", СтатусСообщения.Внимание);
	Иначе
		Если Объект.Командируемые.Количество()>0 Тогда
			
			ВхПараметры = Новый Структура;
			ВхПараметры.Вставить("ЗначениеJSON", "");
			ОбъектУслуга = РеквизитФормыВЗначение("Объект");
			ВхПараметры.Вставить("Услуга", ОбъектУслуга);
			НаименованиеИсточника = "";
			ЗаказИзКорзины = СоздатьЗаказИзКорзиныИЗаказКомандируемого(ВхПараметры, НаименованиеИсточника, Ложь);
			
			Объект.ЗаказИзКорзины = ЗаказИзКорзины.Ссылка;
			ОбъектУслуга = РеквизитФормыВЗначение("Объект");			
			ОбъектУслуга.Записать(РежимЗаписиДокумента.Проведение);
			ЗначениеВРеквизитФормы(ОбъектУслуга, "Объект");
			
			ВхПараметры = Новый Структура;
			ВхПараметры.Вставить("Услуга", ОбъектУслуга);
			//СсылкаНаЗаказ = СоздатьЗаказКомандируемого(ВхПараметры);
			//ЭтаФорма.ЗаказКомандируемого = СсылкаНаЗаказ; 
			Объект.Командируемые.Загрузить(СоздатьЗаказКомандируемого(ВхПараметры));
			
			//Заказ клиента БТ
			//ВхПараметры = Новый Структура;
			//ВхПараметры.Вставить("Услуга", ОбъектУслуга);
			//ЭтаФорма.ЗаказКомандируемого = СсылкаНаЗаказ; 
			
		Иначе
			Сообщить("Ошибка создания Заказа из Корзины: Нет командируемых в Услуге", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказИзКорзины(Команда)
	СоздатьЗаказИзКорзиныНаСервере();
КонецПроцедуры



&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	СтавкаНДСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтавкаНДСПриИзмененииНаСервере()
	
	НоваяСуммаНДС = УправлениеБТВызовСервера.ПолучитьСуммуНДС(Объект.Сумма, Объект.СтавкаНДС); 
	Объект.СуммаНДС = НоваяСуммаНДС;
	
	//Старый код до изменения ставки НДС в РФ
	//Если Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
	//	Объект.СуммаНДС = Объект.Сумма / 118 * 18;
	//ИначеЕсли Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
	//	Объект.СуммаНДС = Объект.Сумма / 110 * 10;
	//Иначе
	//	Объект.СуммаНДС = 0;
	//КонецЕсли;
	
	Объект.СтавкаНДСКлиента = Объект.СтавкаНДС;
	СтавкаНДСКлиентаПриИзмененииНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	СуммаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СуммаПриИзмененииНаСервере()
	Объект.Цена = Объект.Сумма;
	СтавкаНДСПриИзмененииНаСервере();	
КонецПроцедуры



&НаКлиенте
Процедура ОписаниеУслугиЗначениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеУслугиЗначениеИзменениеТекстаРедактированияНаСервере(Характеристика, Значение, СписокХарактеристик)
	
	ВозвращаемСписок = Новый СписокЗначений;
	
	Если СписокХарактеристик.НайтиПоЗначению(Характеристика) <> Неопределено Тогда 
		ТаблицаЗначений = УправлениеБТСервер.ИсторияАвтозаполнения(Характеристика, Значение);		
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЗначений Цикл
			ВозвращаемСписок.Добавить(СтрокаТаблицы.Значение);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ВозвращаемСписок;
КонецФункции

&НаКлиенте
Процедура ОписаниеУслугиЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	//
	//Характеристика = Элементы.ОписаниеУслуги.ТекущиеДанные.Характеристика; 
	//Значение = Текст;	
	//СписокЗначений = ОписаниеУслугиЗначениеИзменениеТекстаРедактированияНаСервере(Характеристика, Значение, СписокХарактеристик);
	//
	//Элемент.СписокВыбора.ЗагрузитьЗначения(СписокЗначений.ВыгрузитьЗначения());
	//ДанныеВыбора = СписокЗначений;
	//Если Элемент.СписокВыбора.Количество() > 0 Тогда 
	//	СтандартнаяОбработка = Ложь;	
	//Иначе
	//	СтандартнаяОбработка = Истина;	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеУслугиЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	
	//Элемент.СписокВыбора.Очистить();
	
	Характеристика = Элементы.ОписаниеУслуги.ТекущиеДанные.Характеристика; 
	Значение = Текст;	
	СписокЗначений = ОписаниеУслугиЗначениеИзменениеТекстаРедактированияНаСервере(Характеристика, Значение, СписокХарактеристик);
	
	//Элемент.СписокВыбора.ЗагрузитьЗначения(СписокЗначений.ВыгрузитьЗначения());
	
	ДанныеВыбора = СписокЗначений; 
	Если ДанныеВыбора.Количество() > 0 Тогда 
		СтандартнаяОбработка = Ложь;	
	Иначе
		СтандартнаяОбработка = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеУслугиЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеУслугиЗначениеПриИзменении(Элемент)
	
	ТД = Элементы.ОписаниеУслуги.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТБ = ТребуетсяОбрабатывать(ТД.Характеристика, "ПриИзмененииЗначения");
		Если ТБ.Результат Тогда
			ОписаниеУслугиЗначениеПриИзмененииНаСервере(ТБ.Функция, ТД.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяОбрабатывать(Объект, Событие)
	
	Событие = Перечисления.СобытияБТ[Событие];
	ВхФункция = УправлениеБТСервер.УОбъектаЕстьСобытия(Объект, Событие);
	
	Результат = Новый Структура;
	Результат.Вставить("Результат", ?(ВхФункция = Справочники.ФункцииОписания.ПустаяСсылка(), Ложь, Истина));
	Результат.Вставить("Функция", ВхФункция);
	Возврат Результат;		
	
КонецФункции

&НаСервере
Процедура ОписаниеУслугиЗначениеПриИзмененииНаСервере(ВхФункция, Характеристика)
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ИсхПараметры = Новый Структура();
	ИсхПараметры.Вставить("Объект", ОбъектСервер);
	ИсхПараметры.Вставить("Характеристика", Характеристика);
	Результат = УправлениеБТСервер.ВыполнитьПростуюФункцию(ВхФункция, ИсхПараметры);
	ЗначениеВРеквизитФормы(Результат, "Объект");
	
КонецПроцедуры





&НаСервере
Процедура ЗаполнитьЭкстраПоляНаСервере()
	
	Для Каждого Командированный ИЗ Объект.Командируемые Цикл 
		ТаблицаПолей = УправлениеБТСервер.ПолучитьТаблицуЭкстраПолей(
			Объект.Дата,
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Договор,
			Командированный.Командируемый);
			
		Объект.ЭкстраПоля.Загрузить(ТаблицаПолей);
		
		УслугаОбъект = РеквизитФормыВЗначение("Объект");
		УправлениеБТСервер.ЗаполнитьЭкстраПоляАвтоматически(УслугаОбъект, УслугаОбъект.ЭкстраПоля);
		ЗначениеВРеквизитФормы(УслугаОбъект, "Объект");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭкстраПоля(Команда)
	Если ЭтаФорма.Модифицированность ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Документ.ЗаказКлиентаБТ.ПустаяСсылка") Тогда
		Сообщить("Требуется записать документ!");
	Иначе
		ЗаполнитьЭкстраПоляНаСервере();
		ЭтаФорма.Модифицированность = Истина;
		Оповестить("ИзменениеТабличнойЧастиУслуги", Объект);
	КонецЕсли;
КонецПроцедуры





&НаСервере
Процедура СформироватьНаименованиеУслугиНаСервере()
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ЭкстраПоля = ОбъектСервер.ЭкстраПоля.Выгрузить();			
	Характеристики = ОбъектСервер.ОписаниеУслуги.Выгрузить();
	ПолноеНаименованиеУслуги = УправлениеБТСервер.ПолучитьОписание(ОбъектСервер, ОбъектСервер.НоменклатураБТ, Характеристики, ЭкстраПоля);
	Объект.ПолноеНаименованиеУслуги = ПолноеНаименованиеУслуги;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеУслуги(Команда)
	СформироватьНаименованиеУслугиНаСервере();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//КОМИССИИ
		СформироватьКомиссииНаСервере();
		
		//СБОРЫ
		ЗаполнитьОписаниеНаСервере();
		Оповестить("ИзменениеТабличнойЧастиУслуги", Объект);
		
		//НАИМЕНОВАНИЕ
		СформироватьНаименованиеУслуги(Неопределено);
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		Сообщить("Требуется сохранить документ");
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеНаСервере()
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	УправлениеБТСервер.ЗаполнитьОписаниеУслугиНаСервере(ОбъектСервер); 
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеУслуги(Команда)
	
	Если ЭтаФорма.Модифицированность ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Документ.ЗаказКлиентаБТ.ПустаяСсылка") Тогда
		Сообщить("Требуется записать документ!");
	Иначе
		ЗаполнитьОписаниеНаСервере();
		//ЭтаФорма.Модифицированность = Истина;
		Оповестить("ИзменениеТабличнойЧастиУслуги", Объект);
	КонецЕсли;
	
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура СформироватьКомиссииНаСервере()
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	КомиссииАгентстваДокументы = УправлениеБТСервер.СформироватьКомиссииНаСервере(ОбъектСервер); 
	Элементы.КомиссииАгентства.Обновить();
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКомиссии(Команда)
		
	Если ЭтаФорма.Модифицированность ИЛИ Объект.Ссылка = ПредопределенноеЗначение("Документ.ЗаказКлиентаБТ.ПустаяСсылка") Тогда
		Сообщить("Требуется записать документ!");
	Иначе
		СформироватьКомиссииНаСервере();
		//ЭтаФорма.Модифицированность = Истина;
		Оповестить("ИзменениеТабличнойЧастиУслуги", Объект);
	КонецЕсли;

КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура СтавкаНДСКлиентаПриИзмененииНаСервере()
	СуммаНДС = УправлениеБТСервер.ВычислитьСуммуНДС(Объект.ЦенаКлиента * Объект.КоличествоКлиента, Объект.СтавкаНДСКлиента);
	Объект.СуммаНДСКлиента = СуммаНДС;
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСКлиентаПриИзменении(Элемент)
	СтавкаНДСКлиентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаКлиентаПриИзменении(Элемент)
	Объект.СуммаКлиента = Объект.ЦенаКлиента;
	СтавкаНДСКлиентаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СуммаКлиентаПриИзменении(Элемент)
	Объект.ЦенаКлиента = Объект.СуммаКлиента / ?(ЗначениеЗаполнено(Объект.КоличествоКлиента), Объект.КоличествоКлиента, 1);
	СтавкаНДСКлиентаПриИзмененииНаСервере();
КонецПроцедуры


// ТИПОВЫЙ ОБРАБОТЧИКИ

// КЛИЕНТ


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Конец");	
КонецПроцедуры



&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Конец");	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
    ЭтаФорма.Прочитать();
	ЭтаФорма.Элементы.КомиссииАгентства.Обновить();
	ЭтаФорма.Элементы.УслугиКлиента.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Начало");	
	
	Если НЕ УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Вместо") Тогда
		Если ИмяСобытия = "ИзменениеТабличнойЧастиУслуги" И Параметр = Объект Тогда
			ЭтаФорма.Элементы.УслугиКлиента.Обновить();
			ЭтаФорма.ОбновитьОтображениеДанных();
		КонецЕсли;
		
		Если ИмяСобытия = "ИзменениеУслуги" И Параметр = Объект.Ссылка Тогда
			ОбновитьДанныеНаСервере();
			ОбновитьДанныеФормы();
		КонецЕсли;
	КонецЕсли;	
	
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Конец");	
КонецПроцедуры

// КЛИЕНТ ФОРМЫ ОБЪЕКТА

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Начало");	
	
	Если НЕ УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Вместо") Тогда
		Если Объект.КоличествоКлиента = 0 Тогда
			Объект.КоличествоКлиента = 1;
		КонецЕсли;
	КонецЕсли;
	
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Конец");	
КонецПроцедуры



//СЕРВЕР

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Начало");
	
	Если НЕ УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Вместо") Тогда
		УслугиКлиента.Параметры.УстановитьЗначениеПараметра("УслугаРодитель", Объект.Ссылка);
		//Типовой функционал
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("МенюОтчеты", ЭтаФорма, Элементы.ПодменюОтчеты);
		УправляемыеФормыСервер.ПриСозданииНаСервереМодуль("СобытияФорм", ЭтаФорма, Отказ, СтандартнаяОбработка);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("УправлениеПечатью", ЭтаФорма, Элементы.ПодменюПечать);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("ВводНаОсновании", ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
		//Конец Типового функционала 
		
		КомиссииАгентства.Параметры.УстановитьЗначениеПараметра("УслугаРодитель", Объект.Ссылка);
		
		Если УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.КонфигурацияДонор) = "БухгалтерияПредприятия" Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент");
		Иначе	
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
	    КонецЕсли;
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.Договор.СвязиПараметровВыбора = НовыеСвязи; 		
		
		Если УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.КонфигурацияДонор) = "БухгалтерияПредприятия" Тогда
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Поставщик");
		Иначе	
			НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Поставщик");
	    КонецЕсли;
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДоговорСПоставщиком.СвязиПараметровВыбора = НовыеСвязи; 		

		
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтавкиНДСБТ"));
		ОписаниеТиповС = Новый ОписаниеТипов(Массив);
		Элементы.СтавкаНДС.ОграничениеТипа = ОписаниеТиповС;
		Элементы.СтавкаНДСКлиента.ОграничениеТипа = ОписаниеТиповС;
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
		//Надо дозаполнить комнадировки если они есть
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИспользованыеУслуги.Командируемый,
		               |	ИспользованыеУслуги.Регистратор КАК Командировка
		               |ИЗ
		               |	РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
		               |ГДЕ
		               |	ИспользованыеУслуги.Услуга = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		ТаблицаКомандировок = Запрос.Выполнить().Выгрузить();
		Для Каждого ТекКомандируемый Из Объект.Командируемые Цикл
			НайденнаяСтрока = ТаблицаКомандировок.НайтиСтроки(Новый Структура("Командируемый", ТекКомандируемый.Командируемый));
			Если Не НайденнаяСтрока.Количество() = 0 Тогда
				ТекКомандируемый.Командировка = НайденнаяСтрока[0].Командировка;	
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Менеджер) Тогда
			Попытка
				Объект.Менеджер = ПараметрыСеанса.ТекущийПользователь;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ОрганизацияПоУмолчанию);
			Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда			
				Попытка
					Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
				Исключение					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;

		СписокХарактеристик = Новый Массив;
		Для Каждого СтрокаНастроек ИЗ Объект.НоменклатураБТ.Характеристики Цикл		
			Если СтрокаНастроек.ХранитьИсторию Тогда
				СписокХарактеристик.Добавить(СтрокаНастроек.Характеристика);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьДанныеФормы();
		
		Если НЕ ЗначениеЗаполнено(СтатусУслуги) Тогда
			СтатусУслуги = Перечисления.СтатусыУслуг.УслугаРеализована;
		КонецЕсли;
		
		
		Настройка = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.ИспользоватьКоличествоКлиентаВУслуге);
		Если Настройка = Истина Тогда
			ЭтаФорма.Элементы.КоличествоКлиента.Видимость = Истина;
		КонецЕсли;
				
		ЗаполнитьСкрытыеСтрокиОписанияУслуг();
		СкрытьНеобязательныеНаСервере();
	КонецЕсли;
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Конец");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Начало");
	
	Если НЕ УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Вместо") Тогда 
		//Вставить содержимое обработчика
		МассивСообщенийОбОшибках = Новый Массив;
		Если ЗначениеЗаполнено(Объект.НоменклатураБТ) Тогда
			ОтборОбязательных = Новый Структура("ОбязательноеЗаполнение", Истина);
			МассивОбязательныхХарактеристик = Объект.НоменклатураБТ.Характеристики.НайтиСтроки(ОтборОбязательных);
			Для Каждого ОбязательнаяХарактеристика ИЗ МассивОбязательныхХарактеристик Цикл
				ОтборХарактеристики = Новый Структура("Характеристика", ОбязательнаяХарактеристика.Характеристика);
				СтрокиОписанияУслуги = Объект.ОписаниеУслуги.НайтиСтроки(ОтборХарактеристики);
				Для Каждого СтрокаОписанияУслуги ИЗ СтрокиОписанияУслуги Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаОписанияУслуги.Значение) Тогда
						//Ошибка требуется заполнение характеристики
						МассивСообщенийОбОшибках.Добавить(Новый Структура("СтрокаСОшибкой, ОписаниеОшибки", СтрокаОписанияУслуги, "Обязательное заполнение характеристики: "+Строка(СтрокаОписанияУслуги.Характеристика)));
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если МассивСообщенийОбОшибках.Количество()>0 Тогда
				
				Для Каждого СообщениеОбОшибке ИЗ МассивСообщенийОбОшибках Цикл 
					Сообщение = Новый СообщениеПользователю();
				    Сообщение.Текст = СообщениеОбОшибке.ОписаниеОшибки;
				    Сообщение.Поле = "ОписаниеУслуги["+СообщениеОбОшибке.СтрокаСОшибкой.НомерСтроки+"].Значение";
				    Сообщение.УстановитьДанные(Объект.ОписаниеУслуги); //Уже все перепробовали
				    Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры


// СЕРВЕР ФОРМЫ ОБЪЕКТА
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Начало");
	//Вставить содержимое обработчика
	//Командируемые.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	
	Если НЕ УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Вместо") Тогда
		//Вставить содержимое обработчика
		УслугиКлиента.Параметры.УстановитьЗначениеПараметра("УслугаРодитель", Объект.Ссылка);
		УправлениеБТСервер.УстановитьСтатусУслуги(Объект.Ссылка, СтатусУслуги);
		
		КомиссииАгентства.Параметры.УстановитьЗначениеПараметра("УслугаРодитель", Объект.Ссылка);
	КонецЕсли;
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры


#Область Действия

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОчистка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОткрытие(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСоздание(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииСтроки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииПоля(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииЯчейки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломИзменения(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередУдалением(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередРазворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередСворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПослеУдаления(Элемент)
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриСменеТекущегоРодителя(Элемент)
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Функция ВыполняемсяНаКлиенте(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции
&НаСервере
Функция ВыполняемсяНаСервере(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции



&НаСервере
Процедура ОбновитьЗаказКлиентаБТНаСервере()
	
	Если ЗначениеЗаполнено(ЭтаФорма.ЗаказКлиентаБТ) Тогда
		УправлениеБТВызовСервера.ВключитьУслугуВЗаказКлиента(Объект.Ссылка, ЭтаФорма.ЗаказКлиентаБТ);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказКлиентаБТ(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Требуется предварительно записать услугу");
	Иначе
		Если ТипЗнч(ЗаказКлиентаБТ) = Тип("Строка") Тогда
			Сообщить("Нельзя обновить несуществующий заказ");
		Иначе
			ОтветНаВопрос = Неопределено;
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьЗаказКлиентаБТЗавершение", ЭтотОбъект), "Обновить также сервисные сборы и полные наименования услуг?", РежимДиалогаВопрос.ДаНет, 10, КодВозвратаДиалога.Да, "Обновление описаний", КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаказКлиентаБТЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОтветНаВопрос = РезультатВопроса;
	Если  ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОписаниеНаСервере();
		СформироватьНаименованиеУслугиНаСервере();
		ЭтаФорма.Записать();		
	КонецЕсли;	
	ОбновитьЗаказКлиентаБТНаСервере();

КонецПроцедуры





&НаСервере
Процедура ПоказатьСкрытыеНаСервере()	
	ЭтаФорма.Элементы.ОписаниеУслуги.ОтборСтрок = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытые(Команда)
	ЭтаФорма.Элементы.ОписаниеУслугиПоказатьСкрытые.Видимость = Ложь;
	ЭтаФорма.Элементы.ОписаниеУслугиСкрытьНеобязательные.Видимость = Истина;
	ПоказатьСкрытыеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкрытьНеобязательныеНаСервере()
	ОтборСтрок = Новый ФиксированнаяСтруктура("СкрытаяСтрока", Ложь);
	ЭтаФорма.Элементы.ОписаниеУслуги.ОтборСтрок = ОтборСтрок;
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНеобязательные(Команда)
	ЭтаФорма.Элементы.ОписаниеУслугиСкрытьНеобязательные.Видимость = Ложь;
	ЭтаФорма.Элементы.ОписаниеУслугиПоказатьСкрытые.Видимость = Истина;
	СкрытьНеобязательныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаКонтрагентов = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора");
	ЭлементОтбора = ФормаКонтрагентов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер.Поставщик");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ФормаКонтрагентов.Параметры.РежимВыбора = Истина;
	ФормаКонтрагентов.ВладелецФормы = ЭтаФорма.Элементы.Поставщик;
	ФормаКонтрагентов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаКонтрагентов = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора");
    ЭлементОтбора = ФормаКонтрагентов.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер.Клиент");
    ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование = Истина;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.ПравоеЗначение = Истина;	
	ФормаКонтрагентов.Параметры.РежимВыбора = Истина;
	ФормаКонтрагентов.ВладелецФормы = ЭтаФорма.Элементы.Контрагент;
	ФормаКонтрагентов.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеУслугиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТД = Элементы.ОписаниеУслуги.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТБ = ТребуетсяОбрабатывать(ТД.Характеристика, "НачалоВыбора");
		Если ТБ.Результат Тогда
			ОписаниеУслугиЗначениеПриИзмененииНаСервере(ТБ.Функция, ТД.Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




&НаСервере
Процедура КоличествоКлиентаПриИзмененииНаСервере()
	Объект.ЦенаКлиента = Объект.СуммаКлиента / Объект.КоличествоКлиента;
КонецПроцедуры


&НаКлиенте
Процедура КоличествоКлиентаПриИзменении(Элемент)
	КоличествоКлиентаПриИзмененииНаСервере();
КонецПроцедуры

