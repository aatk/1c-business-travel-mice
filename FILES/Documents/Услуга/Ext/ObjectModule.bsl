
Функция СоздатьНовуюХарактеристику(Услуга, ВхХарактеристикаНоменклатуры = Неопределено, Знач Наименование = "", Знач НаименованиеПолное = "")
	НоменклатураУТ = Услуга.НоменклатураБТ.Номенклатура;
	
	Если НаименованиеПолное = "" Тогда
		НаименованиеПолное = Услуга.ПолноеНаименованиеУслуги;	
	КонецЕсли;
	
	Если Наименование = "" Тогда
		Наименование = Строка(Услуга);	
	КонецЕсли;

	ОтборНоменклатуры = Новый Структура("Номенклатура", НоменклатураУТ);
	Данные = РегистрыСведений.РеквизитыНоменклатуры.Получить(ОтборНоменклатуры);
	
	Если ЗначениеЗаполнено(ВхХарактеристикаНоменклатуры) Тогда
		НоваяХарактеристика = ВхХарактеристикаНоменклатуры.ПолучитьОбъект();
	Иначе
		НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	КонецЕсли;	
	НоваяХарактеристика.Наименование = Наименование;
	НоваяХарактеристика.НаименованиеПолное = НаименованиеПолное;
	НоваяХарактеристика.Владелец = НоменклатураУТ;
	НоваяХарактеристика.Принципал = ?(ЗначениеЗаполнено(Данные.ПринципалПоУмолчанию), Данные.ПринципалПоУмолчанию, Справочники.Контрагенты.РозничныйПокупатель);
	НоваяХарактеристика.Контрагент = ?(ЗначениеЗаполнено(Данные.КонтрагентПоУмолчанию), Данные.КонтрагентПоУмолчанию, Справочники.Контрагенты.РозничныйПокупатель);
	НоваяХарактеристика.Записать();	
	
	МЗ = РегистрыСведений.РеквизитыУслуги.СоздатьМенеджерЗаписи();
	МЗ.Услуга = Услуга;
	МЗ.Прочитать();
	МЗ.Услуга = Услуга;
	МЗ.ХарактеристикаНоменклатуры = НоваяХарактеристика.Ссылка;
	МЗ.Записать(Истина);
	
	Возврат НоваяХарактеристика.Ссылка;
КонецФункции


Процедура ПриЗаписи(Отказ)
	
	МодульОбъектаСервер.ПриЗаписи(ЭтотОбъект, Отказ, "Начало");
	
	Если НЕ МодульОбъектаСервер.ПриЗаписи(ЭтотОбъект, Отказ, "Вместо") Тогда
		// регистр УникальныеИдентификаторы
		УправлениеБТСервер.ЗаписатьGUID(Ссылка);
		
		//Если ЭтотОбъект.Контрагент <> ЭтотОбъект.Ссылка.Контрагент Тогда
		//	УправлениеБТСервер.ЗаполнитьОписаниеУслугиНаСервере(ЭтотОбъект);
		//КонецЕсли;
		
		//ПЕРЕНЕСЕНО В РАСШИРЕНИЯ - НЕ СОВМЕСТИМО С ТИПОВОЙ КОНФИГУРАЦИЕЙ
		//Если УправлениеБТСервер.ПолучитьСтатусУслуги(ЭтотОбъект.Ссылка) = Перечисления.СтатусыУслуг.УслугаОтменена Тогда
		//	//Аннулировать услугу	
		//	Услуга = ЭтотОбъект.Ссылка;
		//	ЗатронутыеДокументы = УправлениеБТСервер.УдалитьУслугуИзПакетаДокументов(Услуга);
		//	Для Каждого СсылкаНаДокумент ИЗ ЗатронутыеДокументы.ЗатронутыеДокументы Цикл 
		//		Сообщить(СсылкаНаДокумент);
		//	КонецЦикла;	
		//КонецЕсли;
		
		ПолноеИмяМетаданных = ЭтотОбъект.Ссылка.Метаданные().ПолноеИмя();	
		СсылкаНаМетаданные = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", ПолноеИмяМетаданных);
		Событие = Перечисления.СобытияБТ.ПриЗаписиУслуги;
		ВхФункция = УправлениеБТСервер.УОбъектаЕстьСобытия(СсылкаНаМетаданные, Событие);
		Если ВхФункция <> Справочники.ФункцииОписания.ПустаяСсылка() Тогда
			Параметры = Новый Структура();
			Параметры.Вставить("Объект", ЭтотОбъект);
			Результат = УправлениеБТСервер.ВыполнитьПростуюФункцию(ВхФункция, Параметры);
		КонецЕсли;
			
		СтатусУслуги = УправлениеБТСервер.ПолучитьСтатусУслуги(ЭтотОбъект.Ссылка);
		Если НЕ ЗначениеЗаполнено(СтатусУслуги) Тогда
			УправлениеБТСервер.УстановитьСтатусУслуги(ЭтотОбъект.Ссылка, Перечисления.СтатусыУслуг.УслугаРеализована);
		КонецЕсли;
		
		УправлениеБТСервер.УстановитьАвтоматическийСтатусПроверки(ЭтотОбъект.Ссылка, ЭтотОбъект.ПроверитьЗаполнение());
	КонецЕсли;	
	
	МодульОбъектаСервер.ПриЗаписи(ЭтотОбъект, Отказ, "Конец");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	
	МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Начало");

	Если НЕ МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Вместо") Тогда
		УправлениеБТСервер.ЗаписатьGUID(Ссылка);

		//Создаем недостающие характеристики
		СоздаватьХарактеристикиНоменклатуры = УправлениеБТВызовСервера.ПолучитьНастройкуСистемы(ПланыВидовХарактеристик.НаборХарактеристикСистемный.СоздаватьХарактеристикиНоменклатуры);
		Если ТипЗнч(СоздаватьХарактеристикиНоменклатуры) = Тип("Булево") И СоздаватьХарактеристикиНоменклатуры Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
			               |	РеквизитыУслуги.Услуга.НоменклатураБТ.Номенклатура КАК НоменклатураУТ,
			               |	РеквизитыУслуги.Услуга.ПолноеНаименованиеУслуги КАК Наименование,
			               |	РеквизитыУслуги.Услуга.ПолноеНаименованиеУслуги КАК НаименованиеПолное,
			               |	РеквизитыУслуги.Услуга КАК Услуга
			               |ИЗ
			               |	РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
			               |ГДЕ
			               |	РеквизитыУслуги.Услуга = &Ссылка";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СоздатьНовуюХарактеристику(Выборка.Услуга, Выборка.ХарактеристикаНоменклатуры);
			Иначе
				СоздатьНовуюХарактеристику(ЭтотОбъект.Ссылка);		
			КонецЕсли;
		КонецЕсли;
			
		// регистр ИнформацияПоУслуге
		Движения.ИнформацияПоУслуге.Записывать = Истина;   //
		Движения.ИнформацияПоУслуге.Очистить();
		Для Каждого ТекСтрокаОписаниеУслуги Из ОписаниеУслуги Цикл
			Движение = Движения.ИнформацияПоУслуге.Добавить();
			Движение.Услуга = Ссылка;
			Движение.Характеристика = ТекСтрокаОписаниеУслуги.Характеристика;
			Движение.ЗначениеХарактеристики = ТекСтрокаОписаниеУслуги.Значение;
		КонецЦикла;

		// регистр КомиссииАгентств и СвязанныеУслуги
		Если ЭтотОбъект.НоменклатураБТ.КомиссионнаяУслуга Тогда
			Движения.КомиссииАгентств.Записывать = Истина;
			Движения.КомиссииАгентств.Очистить();
			Если ЗначениеЗаполнено(ЭтотОбъект.УслугаВладелец) Тогда
				Движение = Движения.КомиссииАгентств.Добавить();
				Движение.ВложеннаяУслуга = Ссылка;
				Движение.УслугаРодитель = ЭтотОбъект.УслугаВладелец;
				Движение.ВложенаВРодителя = (ЭтотОбъект.УслугаВладелец = ЭтотОбъект.ВложеноВ);
			КонецЕсли;	
		Иначе
			Движения.СвязанныеУслуги.Записывать = Истина;
			Движения.СвязанныеУслуги.Очистить();
			Если ЗначениеЗаполнено(ЭтотОбъект.УслугаВладелец) Тогда
				Движение = Движения.СвязанныеУслуги.Добавить();
				Движение.ВложеннаяУслуга = Ссылка;
				Движение.УслугаРодитель = ЭтотОбъект.УслугаВладелец;
				Движение.ВложенаВРодителя = (ЭтотОбъект.УслугаВладелец = ЭтотОбъект.ВложеноВ);
			ИначеЕсли ЗначениеЗаполнено(ЭтотОбъект.ВложеноВ) Тогда
				Движение = Движения.СвязанныеУслуги.Добавить();
				Движение.ВложеннаяУслуга = Ссылка;
				Движение.УслугаРодитель = ЭтотОбъект.ВложеноВ;
				Движение.ВложенаВРодителя = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// регистр УслугиДляЗаказовИзКорзины
		Движения.УслугиДляЗаказовИзКорзины.Записывать = Истина;
		Движения.УслугиДляЗаказовИзКорзины.Очистить();
		Если ЗначениеЗаполнено(ЭтотОбъект.ЗаказИзКорзины) И НЕ ЗначениеЗаполнено(ЭтотОбъект.УслугаВладелец) Тогда
			Движение = Движения.УслугиДляЗаказовИзКорзины.Добавить();
			Движение.Услуга = Ссылка;
			Движение.ЗаказИзКорзины = ЭтотОбъект.ЗаказИзКорзины;
		КонецЕсли;
		
		//
		ОтборИстории = Новый Структура("ХранитьИсторию", Истина);
		СтрокиДляИстории = НоменклатураБТ.Характеристики.НайтиСтроки(ОтборИстории);
		Для Каждого СтрокаХарактеристики ИЗ СтрокиДляИстории Цикл
			Характеристика = СтрокаХарактеристики.Характеристика;
			
			ОтборИстории = Новый Структура("Характеристика", Характеристика);
			СтрокиДляИстории = ОписаниеУслуги.НайтиСтроки(ОтборИстории);
			
			Для Каждого СтрокаСоЗначением ИЗ СтрокиДляИстории Цикл
				Если ЗначениеЗаполнено(СтрокаСоЗначением.Значение) Тогда
					МЗ = РегистрыСведений.АвтозаполнениеХарактеристик.СоздатьМенеджерЗаписи();
					МЗ.Характеристика = Характеристика;
					МЗ.Значение = СтрокаСоЗначением.Значение;
					МЗ.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// регистр ИнформацияПоСуммамУслуги
		Движения.ИнформацияПоСуммамУслуги.Записывать = Истина;
		Движения.ИнформацияПоСуммамУслуги.Очистить();
		
		Движение = Движения.ИнформацияПоСуммамУслуги.Добавить();
		Движение.Период = Дата;
		Если ЗначениеЗаполнено(УслугаВладелец) И УслугаВладелец <> Документы.Услуга.ПустаяСсылка() Тогда
			Движение.Услуга = УслугаВладелец;
		Иначе
			Движение.Услуга = Ссылка;
		КонецЕсли;
		Если НоменклатураБТ.СуммаПоставщика Тогда
			Движение.СуммаПоставщика = Сумма;
		КонецЕсли;
		Если НоменклатураБТ.СуммаКлиента Тогда
			Движение.СуммаКлиента = СуммаКлиента;
			//Если Сумма < СуммаКлиента Тогда
			//	Движение.СуммаКлиента = Сумма;
			//Иначе				
			//	Движение.СуммаКлиента = СуммаКлиента;
			//КонецЕсли;			
		КонецЕсли;
		Если НоменклатураБТ.СуммаСервисногоСбора Тогда
			Движение.СуммаСервисногоСбора = СуммаКлиента;
		КонецЕсли;
		Если НоменклатураБТ.СуммаНаценки Тогда
			Если Сумма < СуммаКлиента Тогда
				Движение.СуммаНаценки = СуммаКлиента - Сумма;
			Иначе				
				Движение.СуммаНаценки = СуммаКлиента;
			КонецЕсли;			
		КонецЕсли;
		Если НоменклатураБТ.СуммаСкидки Тогда
			Движение.СуммаСкидки = СуммаКлиента;
		КонецЕсли;
		Если НоменклатураБТ.СуммаКомиссии Тогда
			Движение.СуммаКомиссии = Сумма;
		КонецЕсли;
		Если НоменклатураБТ.СуммаНДСПоставщика Тогда
			Движение.СуммаНДСПоставщика = СуммаНДС;
			Движение.СтавкаНДСПоставщика = СтавкаНДС;
		КонецЕсли;
		Если НоменклатураБТ.СуммаНДСКлиента Тогда
			Движение.СуммаНДСКлиента = СуммаНДСКлиента;
			Движение.СтавкаНДСКлиента = СтавкаНДСКлиента;
		КонецЕсли;
		
		//// ИсторияКомандированных
		Движения.ПредставлениеКомандируемыхВУслугах.Записывать = Истина;   //
		Движения.ПредставлениеКомандируемыхВУслугах.Очистить();
		ПредставлениеКомандированных = "";
		Для Каждого ТекСтрокаКомандируемые Из Командируемые Цикл
			ПредставлениеКомандированных = ПредставлениеКомандированных + ?(ПредставлениеКомандированных = "", "", ", ") + ТекСтрокаКомандируемые.Командируемый;
		КонецЦикла;
		Движение = Движения.ПредставлениеКомандируемыхВУслугах.Добавить();
		Движение.Услуга = ЭтотОбъект.Ссылка;
		Движение.ПредставлениеКомандированных = СокрЛП(ПредставлениеКомандированных);
		
		//Клиентская часть
		Если ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда
	
			//// ИсторияКомандированных
			Движения.ИсторияКомандированных.Записывать = Истина;   //
			Движения.ИсторияКомандированных.Очистить();
			Для Каждого ТекСтрокаКомандируемые Из Командируемые Цикл
				Движение = Движения.ИсторияКомандированных.Добавить();
				Движение.Период = ТекущаяДата();
				Движение.Командированный = ТекСтрокаКомандируемые.Командируемый;
				Движение.ОбъектИстории = Ссылка;
				Движение.Контрагент = Контрагент;
				Движение.Договор = Договор;
				Движение.Сумма = СуммаКлиента;
			КонецЦикла;
			
			//// ИнформацияПоУслугеЭкстраполя
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	УслугаЭкстраПоля.Ссылка КАК Услуга,
			               |	УслугаЭкстраПоля.Характеристика КАК ЭкстраПоле,
			               |	УслугаЭкстраПоля.Значение КАК Значение
			               |ИЗ
			               |	Документ.Услуга.ЭкстраПоля КАК УслугаЭкстраПоля
			               |ГДЕ
			               |	УслугаЭкстраПоля.Ссылка = &Ссылка";
			Движения.ИнформацияПоУслугеЭкстраполя.Записывать = Истина;
			Движения.ИнформацияПоУслугеЭкстраполя.Загрузить(Запрос.Выполнить().Выгрузить());

			Если ТипЗнч(СоздаватьХарактеристикиНоменклатуры) = Тип("Булево") И СоздаватьХарактеристикиНоменклатуры Тогда
				//// ХарактеристикаНоменклатурыРасшифровка
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
				               |	УслугаОписаниеУслуги.Характеристика,
				               |	УслугаОписаниеУслуги.Значение
				               |ИЗ
				               |	Документ.Услуга.ОписаниеУслуги КАК УслугаОписаниеУслуги
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
				               |		ПО УслугаОписаниеУслуги.Ссылка = РеквизитыУслуги.Услуга
				               |ГДЕ
				               |	УслугаОписаниеУслуги.Ссылка = &Ссылка";
				Движения.ХарактеристикаНоменклатурыРасшифровка.Записывать = Истина;
				Движения.ХарактеристикаНоменклатурыРасшифровка.Загрузить(Запрос.Выполнить().Выгрузить());
		
			
				//// РеквизитыХарактеристикаНоменклатуры
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
				Запрос.Текст = "ВЫБРАТЬ
				               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
				               |	УслугаКомандируемые.Ссылка КАК Услуга,
				               |	УслугаКомандируемые.Командируемый КАК Командированный,
				               |	УслугаКомандируемые.Ссылка.НоменклатураБТ КАК НоменклатураБТ
				               |ИЗ
				               |	Документ.Услуга.Командируемые КАК УслугаКомандируемые
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыУслуги КАК РеквизитыУслуги
				               |		ПО УслугаКомандируемые.Ссылка = РеквизитыУслуги.Услуга
				               |ГДЕ
				               |	УслугаКомандируемые.Ссылка = &Ссылка
				               |	И УслугаКомандируемые.НомерСтроки = 1
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	РеквизитыУслуги.ХарактеристикаНоменклатуры,
				               |	УслугаКомандируемые.Ссылка,
				               |	УслугаКомандируемые.Командируемый,
				               |	УслугаКомандируемые.Ссылка.НоменклатураБТ";
				Движения.РеквизитыХарактеристикаНоменклатуры.Записывать = Истина;
				Движения.РеквизитыХарактеристикаНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());
			КонецЕсли;
			
		КонецЕсли;
		
		
		
	КонецЕсли;	
	
	МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Конец");

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Начало");
	
	Если НЕ МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Вместо") Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			Если ДанныеЗаполнения.Свойство("ЗаказИзКорзины") Тогда
				НовыйКомандируемый = ЭтотОбъект.Командируемые.Добавить();
				НовыйКомандируемый.Командируемый = ДанныеЗаполнения.ЗаказИзКорзины.Командируемый;
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("Номенклатура") Тогда
				НоваяСтрока = ЭтотОбъект.Услуги.Добавить();
				НоваяСтрока.Услуга = ДанныеЗаполнения.Номенклатура;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Конец");
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Начало");
	
	Если НЕ МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Вместо") Тогда
		//
	КонецЕсли;

	МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Конец");
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	МодульОбъектаСервер.ПередУдалением(ЭтотОбъект, Отказ, "Начало");
	
	Если НЕ МодульОбъектаСервер.ПередУдалением(ЭтотОбъект, Отказ,  "Вместо") Тогда
		УправлениеБТСервер.УдалитьGUID(Ссылка);
		
		//Если УправлениеБТСервер.ПолучитьСтатусУслуги(ЭтотОбъект.Ссылка) = Перечисления.СтатусыУслуг.УслугаОтменена Тогда
		//	//УправлениеБТСервер.УстановитьСтатусУслуги(ЭтотОбъект.Ссылка, Перечисления.СтатусыУслуг.УслугаОтменена); 
		//	//Аннулировать услугу	
		//	ЗатронутыеДокументы = Новый Массив;
		//	ЗатронутыеДокументы.Добавить(УправлениеБТСервер.УдалитьУслугу(ЭтотОбъект.Ссылка, Ложь));	
		//	//Возврат ЗатронутыеДокументы; 
		//КонецЕсли;
	КонецЕсли;
	
	МодульОбъектаСервер.ПередУдалением(ЭтотОбъект, Отказ, "Конец");
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//УстановитьБезопасныйРежим(Ложь);
	МодульОбъектаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, "Начало");
	
	Если НЕ МодульОбъектаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, "Вместо") Тогда
	
		Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда		
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ДатаСоздания) Тогда
				ЭтотОбъект.ДатаСоздания = ТекущаяДата();
			КонецЕсли;
			
			Для Каждого СтрокаХарактеристики ИЗ ЭтотОбъект.ОписаниеУслуги Цикл
				
				Если СтрокаХарактеристики.Значение = Неопределено Тогда                             
					СтрокаХарактеристики.Значение = СтрокаХарактеристики.Характеристика.ТипЗначения.ПривестиЗначение();   //ПрХарактеристика.Ссылка.ТипЗначения.ПривестиЗначение()
				КонецЕсли;
				
			КонецЦикла;
			
			
			ПересчитыватьСуммыКлиетовВУслуге = УправлениеБТВызовСервера.ПолучитьНастройкуПользователя("ПересчитыватьСуммыКлиетовВУслуге");
			Если ПересчитыватьСуммыКлиетовВУслуге = "" Тогда
				ПересчитыватьСуммыКлиетовВУслуге = Истина; 
			КонецЕсли;
			
			//По умолчанию как у поствщика
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтавкаНДСКлиента) Тогда
				ЭтотОбъект.СтавкаНДСКлиента = ЭтотОбъект.СтавкаНДС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЦенаКлиента) Тогда
				ЭтотОбъект.ЦенаКлиента = ЭтотОбъект.Цена;			
			КонецЕсли;				
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СуммаНДСКлиента) Тогда
				ЭтотОбъект.СуммаНДСКлиента = ЭтотОбъект.СуммаНДС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СуммаКлиента) Тогда
				ЭтотОбъект.СуммаКлиента = ЭтотОбъект.Сумма;
			КонецЕсли;
				
			Если ПересчитыватьСуммыКлиетовВУслуге Тогда
				ПерСуммаУслуги = 0;
				ПерЦенаКлиента = 0;
				ПерСуммаКлиента = 0;
				ПерСуммаНДСКлиента = 0;		
				ТЧОписаниеУслуги = ЭтотОбъект.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.СуммаУслуги, "Характеристика");
				Если ТЧОписаниеУслуги <> Неопределено Тогда
					Если ТЧОписаниеУслуги.Значение <> 0 Тогда 
						ПерСуммаУслуги = ТЧОписаниеУслуги.Значение;
						
						ЭтотОбъект.ЦенаКлиента = ПерСуммаУслуги;
						ЭтотОбъект.СуммаКлиента = ПерСуммаУслуги;
						ПерСуммаНДСКлиента = УправлениеБТСервер.ВычислитьСуммуНДС(ПерСуммаУслуги, ЭтотОбъект.СтавкаНДСКлиента);
						Если ПерСуммаНДСКлиента > (ЭтотОбъект.СуммаНДС - 5) И ПерСуммаНДСКлиента < (ЭтотОбъект.СуммаНДС + 5) Тогда
							ЭтотОбъект.СуммаНДСКлиента = ЭтотОбъект.СуммаНДС;
						Иначе
							ЭтотОбъект.СуммаНДСКлиента = ПерСуммаНДСКлиента;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
				
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ПолноеНаименованиеУслуги) Тогда
				ТЭкстраПоля = ЭтотОбъект.ЭкстраПоля.Выгрузить();			
				ТХарактеристики = ЭтотОбъект.ОписаниеУслуги.Выгрузить();
				ЭтотОбъект.ПолноеНаименованиеУслуги = УправлениеБТСервер.ПолучитьОписание(ЭтотОбъект, ЭтотОбъект.НоменклатураБТ, ТХарактеристики, ТЭкстраПоля);
			КонецЕсли;
			
		КонецЕсли;
		
		
		Попытка
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Организация) Тогда
				ЭтотОбъект.Организация = Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Автор) Тогда
				ЭтотОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
			КонецЕсли;
					
			ПолноеИмяМетаданных = ЭтотОбъект.Ссылка.Метаданные().ПолноеИмя();	
			СсылкаНаМетаданные = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", ПолноеИмяМетаданных);
			Событие = Перечисления.СобытияБТ.ПередЗаписьюУслуги;
			ВхФункция = УправлениеБТСервер.УОбъектаЕстьСобытия(СсылкаНаМетаданные, Событие);
			Если ВхФункция <> Справочники.ФункцииОписания.ПустаяСсылка() Тогда
				Параметры = Новый Структура();
				Параметры.Вставить("Объект", ЭтотОбъект);
				Результат = УправлениеБТСервер.ВыполнитьПростуюФункцию(ВхФункция, Параметры);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			Если ЭтотОбъект.ПометкаУдаления = Истина Тогда 
				УправлениеБТСервер.УстановитьСтатусУслуги(ЭтотОбъект.Ссылка, Перечисления.СтатусыУслуг.УслугаОтменена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МодульОбъектаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, "Конец");
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	МодульОбъектаСервер.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, "Начало");
	
	Если НЕ МодульОбъектаСервер.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, "Вместо") Тогда
		// Вставить содержимое обработчика.
	КонецЕсли;
	
	МодульОбъектаСервер.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, "Конец");
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Начало");
	
	Если НЕ МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Вместо") Тогда
		// Вставить содержимое обработчика.
	КонецЕсли;
	
	МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Конец");
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МодульОбъектаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, "Начало");
	
	Если НЕ МодульОбъектаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, "Вместо") Тогда
		// Вставить содержимое обработчика.
	КонецЕсли;
	
	МодульОбъектаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, "Конец");
КонецПроцедуры
