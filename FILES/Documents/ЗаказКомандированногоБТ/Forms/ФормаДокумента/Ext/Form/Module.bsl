
#Область ТиповойФункционал

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	УправляемыеФормыСервер.ВыполнитьНазначаемуюКомандуНаСервере("ДополнительныеОтчетыИОбработки", ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	//ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ УправляемыеФормыКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте("ДополнительныеОтчетыИОбработкиКлиент", ЭтаФорма, Команда.Имя) Тогда 	
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		
	КонецЕсли;
	//Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
	//	РезультатВыполнения = Неопределено;
	//	ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
	//	
	//КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправляемыеФормыКлиент.УПВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	//УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуОтчет("МенюОтчетыКлиент", Команда, ЭтаФорма, Объект);
	//МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	УправляемыеФормыКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании("ВводНаОснованииКлиент", Команда, ЭтаФорма, Объект);
	//ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	УправляемыеФормыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	УправляемыеФормыСервер.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	УправляемыеФормыКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Процедура ОбновитьСтатусТП()	
	ОтборТП = Новый Структура("ЗаказКомандированного", Объект.Ссылка);
	РС = РегистрыСведений.ПройденТревелПолитикой.СрезПоследних(ТекущаяДата(), ОтборТП);
	Если РС.Количество()>0 Тогда
		Этаформа.СтатусТревелПолитики = РС[0].СтатусТревелПолитики;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСтатусПакета()	
	
	Этаформа.СтатусПакетаДокументов = УправлениеБТСервер.ПолучитьСтатусПакетаДокументов(Объект.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГУИД()
	Возврат Строка(Новый УникальныйИдентификатор()); 
КонецФункции
	

#Область ТабличнвяЧастьУслугиДляКлиента

&НаСервере
Процедура ЗаполнитьОписаниеНаСервере()
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ОбъектСервер); 
	ЭтаФорма.Модифицированность = Истина;
	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписание(Команда)
	Если НЕ ЭтаФорма.Модифицированность Тогда
		ЗаполнитьОписаниеНаСервере();
		СформироватьДеревоНаСервере();
	Иначе
		Сообщить("Требуется записать заказ!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВключитьВНаСервере(ГУИДОткуда,ГУИДКуда)
	
	Для Каждого СтрокаУслуг ИЗ Объект.УслугиДляКлиента Цикл
		СтрокаУслуг.ЦенаВложенныхУслуг = 0;	
	КонецЦикла;
	
	ОтборСтрокКуда = Новый Структура("ГУИД", ГУИДКуда);	
	СтрокиКуда = Объект.УслугиДляКлиента.НайтиСтроки(ОтборСтрокКуда);
	
	ОтборСтрок = Новый Структура("ГУИД", ГУИДОткуда);	
	Строки = Объект.УслугиДляКлиента.НайтиСтроки(ОтборСтрок);
	
	Для Каждого СтрокаГ2 ИЗ СтрокиКуда Цикл
		Для Каждого СтрокаГ ИЗ Строки Цикл
			СтрокаГ.ВключеноВ = ГУИДКуда; 
			СтрокаГ2.ЦенаВложенныхУслуг = СтрокаГ2.ЦенаВложенныхУслуг + СтрокаГ.Цена;
		КонецЦикла;		
	КонецЦикла;
	
	Для Каждого СтрокаУслуг ИЗ Объект.УслугиДляКлиента Цикл
		СтрокаУслуг.СуммаИтого = СтрокаУслуг.Цена + СтрокаУслуг.ЦенаВложенныхУслуг;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСтрок(ГУИДОткуда)
	
	УслугиДляКлиента = Объект.УслугиДляКлиента.Выгрузить();
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("УслугиДляКлиента", УслугиДляКлиента);
	Запрос.УстановитьПараметр("ГУИД", ГУИДОткуда);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ГУИД,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Номенклатура,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ОписаниеУслуги,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.Цена,
	               |	ЗаказКомандированногоБТУслугиДляКлиента.ВключеноВ
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&УслугиДляКлиента КАК ЗаказКомандированногоБТУслугиДляКлиента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.ГУИД,
	               |	ВТ.Номенклатура,
	               |	ВТ.ОписаниеУслуги,
	               |	ВТ.Цена,
	               |	ВТ.ВключеноВ
	               |ИЗ
	               |	ВТ КАК ВТ
	               |ГДЕ
	               |	ВТ.ГУИД <> &ГУИД
	               |	И ВТ.ВключеноВ = """"";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокиВыгрузки ИЗ Выгрузка Цикл
		Значение = Новый Структура;
		Для Каждого Колонка ИЗ Выгрузка.Колонки Цикл
			Значение.Вставить(Колонка.Имя, СтрокиВыгрузки[Колонка.Имя]);
		КонецЦикла;
		МассивСтрок.Добавить(Значение);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

&НаКлиенте
Процедура ВыбранаСтрока(ГУИДКуда, ГУИДОткуда= неопределено) Экспорт
	Если ЗначениеЗаполнено(ГУИДКуда) Тогда
		ВключитьВНаСервере(ГУИДОткуда ,ГУИДКуда);
		СформироватьДеревоНаСервере();		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВ(Команда)
		
	Если НЕ ЭтаФорма.Элементы.ДеревоУслугКлиента.ТекущиеДанные = Неопределено Тогда
		ГУИДОткуда = ЭтаФорма.Элементы.ДеревоУслугКлиента.ТекущиеДанные.ГУИД;
		
		ПараметрыФормы = Новый Структура("СтрокиВыбора");
		ПараметрыФормы.Вставить("СтрокиВыбора", ПолучитьМассивСтрок(ГУИДОткуда));
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбранаСтрока", ЭтаФорма, ГУИДОткуда);
		ОткрытьФорму("Документ.ЗаказКомандированногоБТ.Форма.ФормаВыбораУслуги", ПараметрыФормы, ,,,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактеристику(Услуга)
	Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ОтборПоУслуге = Новый Структура("Услуга", Услуга);
	РезультатОтбора = РегистрыСведений.РеквизитыУслуги.Получить(ОтборПоУслуге);
	РезультатОтбора.Свойство("ХарактеристикаНоменклатуры", Результат);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СформироватьДеревоНаСервере()
	
	ДеревоУслугКлиента.ПолучитьЭлементы().Очистить();
	ОтборДерева0 = Новый Структура("ВключеноВ", "");
	СтрокиДерева = Объект.УслугиДляКлиента.НайтиСтроки(ОтборДерева0);
	
	Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		НовыяСтрока = ДеревоУслугКлиента.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыяСтрока, СтрокаДерева);
		НовыяСтрока.ХарактеристикаНоменклатуры = ПолучитьХарактеристику(СтрокаДерева.Услуга);
		
		ОтборДерева1 = Новый Структура("ВключеноВ", СтрокаДерева.ГУИД);
		СтрокиДерева2 = Объект.УслугиДляКлиента.НайтиСтроки(ОтборДерева1);
		Для Каждого СтрокаДерева2 ИЗ СтрокиДерева2 Цикл
			НовыяСтрока2 = НовыяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовыяСтрока2, СтрокаДерева2);
			НовыяСтрока2.ХарактеристикаНоменклатуры = ПолучитьХарактеристику(СтрокаДерева2.Услуга);
			НовыяСтрока.СуммаИтого = НовыяСтрока.СуммаИтого + НовыяСтрока2.СуммаИтого;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДерево(Команда)
	СформироватьДеревоНаСервере();
КонецПроцедуры

#КонецОбласти



&НаСервере
Процедура ЗаполнитьЭкстраПоляНаСервере()
	
	ТаблицаПолей = УправлениеБТСервер.ПолучитьТаблицуЭкстраПолей(
		Объект.Дата,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Договор,
		Объект.Командированный);
		
	Объект.ЭкстраПоля.Загрузить(ТаблицаПолей);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭкстраПоля(Команда)
	ЗаполнитьЭкстраПоляНаСервере();
КонецПроцедуры




&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ГУИД = Элемент.ТекущиеДанные.ГУИД;
		
		ПараметрыОтбора = Новый Структура("ГУИД",ГУИД);
		ФиксОтбор = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		ЭтаФорма.Элементы.ОписаниеНоменклатуры.ОтборСтрок = ФиксОтбор;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаршрутНаСервере()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ТаблицаМаршрута = УправлениеБТСервер.ПостроитьМаршрут(ОбъектСервер, ?(Объект.ДатаНачалаМаршрута = '00010101', Неопределено, Объект.ДатаНачалаМаршрута), ?(Объект.ДатаОкончанияМаршрута = '00010101', Неопределено, Объект.ДатаОкончанияМаршрута));	
	Объект.Маршрут.Загрузить(ТаблицаМаршрута);
	Если Не ТаблицаМаршрута.Количество() = 0 Тогда
		МинДатаНачала = '00010101'; МаксДатаОкончания = '00010101';
		Для Каждого ТекСтрокаМаршрута Из ТаблицаМаршрута Цикл 
			Если МинДатаНачала = '00010101' Тогда
				МинДатаНачала = ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута;
			ИначеЕсли МинДатаНачала > ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута Тогда
				МинДатаНачала = ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута;
			КонецЕсли;
			Если МаксДатаОкончания = '00010101' Тогда
				МаксДатаОкончания = ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута;
			ИначеЕсли МаксДатаОкончания < ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута Тогда
				МаксДатаОкончания = ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута;
			КонецЕсли;
		КонецЦикла;
		Объект.ДатаНачалаМаршрута = МинДатаНачала;
		Объект.ДатаОкончанияМаршрута = МаксДатаОкончания;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМаршрут(Команда)
	ЗаполнитьМаршрутНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКомандируемомуНаСервере()
	
	Объект.СуммаДокумента = 0;
	Объект.УслугиДляКлиента.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УслугаКомандируемые.Ссылка КАК Услуга,
	               |	УслугаКомандируемые.Ссылка.НоменклатураБТ КАК Номенклатура,
	               |	УслугаКомандируемые.Ссылка.Сумма КАК Цена,
	               |	ИспользованыеУслуги.Услуга КАК Услуга1
	               |ИЗ
	               |	Документ.Услуга.Командируемые КАК УслугаКомандируемые
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
	               |		ПО УслугаКомандируемые.Ссылка = ИспользованыеУслуги.Услуга
	               |ГДЕ
	               |	УслугаКомандируемые.Командируемый = &Командируемый
	               |	И ИспользованыеУслуги.Регистратор ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Командируемый", Объект.Командированный);
	СтрокаСУслугой = Запрос.Выполнить().Выбрать();
	
	Пока СтрокаСУслугой.Следующий() Цикл
		
		Характеристики = СтрокаСУслугой.Услуга.ОписаниеУслуги.Выгрузить();
		ЭкстраПоля = Объект.ЭкстраПоля.Выгрузить();			
 		ОписаниеУслуги = УправлениеБТСервер.ПолучитьОписание(Объект, СтрокаСУслугой.Услуга, Характеристики, ЭкстраПоля);
		
		НоваяСтрока = Объект.УслугиДляКлиента.Добавить();
		НоваяСтрока.ГУИД = ПолучитьГУИД();
		НоваяСтрока.Номенклатура = СтрокаСУслугой.Номенклатура; 
		НоваяСтрока.Услуга = СтрокаСУслугой.Услуга;
		НоваяСтрока.ОписаниеУслуги = ОписаниеУслуги;
		НоваяСтрока.Цена = СтрокаСУслугой.Цена;
		НоваяСтрока.СуммаИтого = СтрокаСУслугой.Цена;
		
		Объект.СуммаДокумента = Объект.СуммаДокумента + НоваяСтрока.СуммаИтого
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКомандируемому(Команда)
	Если НЕ ЭтаФорма.Модифицированность Тогда
		//ЗаполнитьОписаниеНаСервере();
		ЗаполнитьПоКомандируемомуНаСервере();
		СформироватьДеревоНаСервере();
	Иначе
		Сообщить("Требуется записать заказ!");
	КонецЕсли;
КонецПроцедуры




&НаСервере
Процедура ЗаполнитьОписаниеУслугНаСервере()
	
	ЭкстраПоля = Объект.ЭкстраПоля.Выгрузить();			
	Для Каждого СтрокаСУслугой ИЗ Объект.УслугиДляКлиента Цикл
		Характеристики = СтрокаСУслугой.Услуга.ОписаниеУслуги.Выгрузить();
	 	ОписаниеУслуги = УправлениеБТСервер.ПолучитьОписание(Объект, СтрокаСУслугой.Услуга, Характеристики, ЭкстраПоля);
		
		СтрокаСУслугой.ОписаниеУслуги = ОписаниеУслуги;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеУслуг(Команда)
	
	ЗаполнитьОписаниеУслугНаСервере();
	СформироватьДеревоНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура УдалитьСтрокуДерева(ГУИД)
	//
	ПОтб = Новый Структура("ВключеноВ", ГУИД);
	НСтроки = Объект.УслугиДляКлиента.НайтиСтроки(ПОтб);
	Для каждого СтрокаС ИЗ НСтроки Цикл
		Объект.УслугиДляКлиента.Удалить(СтрокаС);
	КонецЦикла;
	
	ПОтб = Новый Структура("ГУИД", ГУИД);
	НСтроки = Объект.УслугиДляКлиента.НайтиСтроки(ПОтб);
	Для каждого СтрокаС ИЗ НСтроки Цикл
		Объект.УслугиДляКлиента.Удалить(СтрокаС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугКлиентаПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
	ГУИД = Элемент.ТекущиеДанные.ГУИД;
	УдалитьСтрокуДерева(ГУИД);
	Модифицированность = Истина;
КонецПроцедуры






&НаКлиенте
Процедура ДеревоУслугКлиентаСуммаИтогоПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные.Цена + Элемент.ТекущиеДанные.ЦенаВложенныхУслуг <> Элемент.ТекущиеДанные.СуммаИтого Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоУслугКлиентаСуммаИтогоПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), "Сумма поставщика и клиенту не соответствует, добавить услуги организации?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоУслугКлиентаСуммаИтогоПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Разница = Элемент.ТекущиеДанные.СуммаИтого - (Элемент.ТекущиеДанные.Цена + Элемент.ТекущиеДанные.ЦенаВложенныхУслуг);			
		ДеревоУслугКлиентаСуммаИтогоПриИзмененииНаСервере(Разница);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДеревоУслугКлиентаСуммаИтогоПриИзмененииНаСервере(Разница)
	//Создать услугу с наценкой и вложить ее.
			
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
	ЗаполнитьОписаниеНаСервере();
	СформироватьДеревоНаСервере();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Объект.Партнер = Объект.Контрагент.Партнер;
КонецПроцедуры




&НаКлиенте
Процедура ДеревоУслугКлиентаОписаниеУслугиПриИзменении(Элемент)
	
	ГУИД = Элементы.ДеревоУслугКлиента.ТекущиеДанные.ГУИД;
	Значение = Элементы.ДеревоУслугКлиента.ТекущиеДанные.ОписаниеУслуги;
	ДеревоУслугКлиентаОписаниеУслугиПриИзмененииНаСервере(ГУИД, Значение);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоУслугКлиентаОписаниеУслугиПриИзмененииНаСервере(ГУИД, Описание)
	
	ОтборСтрок = Новый Структура("ГУИД", ГУИД);
	Строки = Объект.УслугиДляКлиента.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока ИЗ Строки Цикл
		НайденнаяСтрока.ОписаниеУслуги = Описание;
		ЭтаФорма.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры






// ТИПОВЫЙ ОБРАБОТЧИКИ

#Область Действия

&НаКлиенте
Процедура ДействиеПриИзменении(Элемент)
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриИзменении(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоВыбораИзСписка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОчистка(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОчистка(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеРегулирование(ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОткрытие(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСоздание(Элемент, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеСоздание(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаВыбора(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеИзменениеТекстаРедактирования(ЭтаФорма, Элемент, Текст, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеВводаТекста(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииСтроки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииСтроки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеВыборЗначения(ЭтаФорма, Элемент, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииПоля(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииПоля(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриАктивизацииЯчейки(Элемент)
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриАктивизацииЯчейки(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломДобавления(ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередНачаломИзменения(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередНачаломИзменения(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередУдалением(Элемент, Отказ)
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередУдалением(ЭтаФорма, Элемент, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриНачалеРедактирования(ЭтаФорма, Элемент, НоваяСтрока, Копирование, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.Действие(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередРазворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередРазворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПередСворачиванием(Элемент, Строка, Отказ)
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПередСворачиванием(ЭтаФорма, Элемент, Строка, Отказ, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПослеУдаления(Элемент)
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПослеУдаления(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПриСменеТекущегоРодителя(Элемент)
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПриСменеТекущегоРодителя(ЭтаФорма, Элемент, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеНачалоПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, Выполнение, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПроверкаПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеОкончаниеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Конец");	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Начало");	
	//	
	УправляемыеФормыКлиент.ДействиеПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, "Конец");	
КонецПроцедуры

#КонецОбласти


// КЛИЕНТ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения,СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПередЗакрытием(ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриОткрытии(ЭтаФорма, Отказ, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриПовторномОткрытии(ЭтаФорма, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Начало");	
	//	
	УправляемыеФормыКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаАктивизации(ЭтаФорма, АктивныйОбъект, Источник, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаЗаписиНового(ЭтаФорма, НовыйОбъект, Источник, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВнешнееСобытие(ЭтаФорма, Источник, Событие, Данные, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода, СтандартнаяОбработка, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПриИзмененииПараметровЭкрана(ЭтаФорма, "Конец");	
КонецПроцедуры

// КЛИЕНТ ФОРМЫ ОБЪЕКТА

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПередЗаписью(ЭтаФорма, Отказ, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи, "Конец");	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначения(СтандартнаяОбработка)
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Начало");	
	//Вставить содержимое обработчика
	УправляемыеФормыКлиент.ВыборЗначения(ЭтаФорма, СтандартнаяОбработка, "Конец");	
КонецПроцедуры



//СЕРВЕР

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Начало");
	
	Если НЕ УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Вместо") Тогда
		Если ЗначениеЗаполнено(ЭтаФорма.Параметры.ЗначениеКопирования) Тогда
			Отказ = Истина;
			Сообщить("Запрещено копировать заказы командированных!");
		КонецЕсли;
		
		СформироватьДеревоНаСервере();		
		
		//Типовой функционал
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("МенюОтчеты", ЭтаФорма, Элементы.ПодменюОтчеты);
		УправляемыеФормыСервер.ПриСозданииНаСервереМодуль("СобытияФорм", ЭтаФорма, Отказ, СтандартнаяОбработка);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("УправлениеПечатью", ЭтаФорма, Элементы.ПодменюПечать);
		УправляемыеФормыСервер.ПриСозданииНаСервереПодменю("ВводНаОсновании", ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
		//Конец Типового функционала 
		
		УправлениеБТСервер.СоздатьНаОснованииПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
		
		ОбновитьСтатусТП();
		ОбновитьСтатусПакета();
	КонецЕсли;
	
	УправляемыеФормыСервер.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, "Конец");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриСохраненииДанныхВНастройкахНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗагрузкойДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтаФорма, Настройки, "Конец");
КонецПроцедуры


// СЕРВЕР ФОРМЫ ОБЪЕКТА
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Начало");
	//Вставить содержимое обработчика
	УправляемыеФормыСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи, "Конец");
КонецПроцедуры


&НаКлиенте
Функция ВыполняемсяНаКлиенте(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции
&НаСервере
Функция ВыполняемсяНаСервере(Действие, Параметры = Неопределено) Экспорт
	Результат = Неопределено;
	Выполнить(Действие);
	Возврат Результат;	
КонецФункции

