
Процедура ПриЗаписи(Отказ)
	МодульОбъектаСервер.ПриЗаписи(ЭтотОбъект, Отказ, "Начало");
	//
	МодульОбъектаСервер.ПриЗаписи(ЭтотОбъект, Отказ, "Конец");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)	
	МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Начало");
	
	Если НЕ МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Вместо") Тогда 
		// регистр УникальныеИдентификаторы
		УправлениеБТСервер.ЗаписатьGUID(Ссылка);
		
		// регистр ИспользованыеУслуги	
		Движения.ИспользованыеУслуги.Записывать = Истина;
		Для Каждого ТекСтрокаУслуги Из УслугиДляКлиента Цикл
			Движение = Движения.ИспользованыеУслуги.Добавить();
			Движение.Услуга = ТекСтрокаУслуги.Услуга;
			Движение.Командируемый = Командированный;
		КонецЦикла;
	КонецЕсли;
	
	МодульОбъектаСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения, "Конец");
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Начало");
	//
	Если НЕ МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Вместо") Тогда 
		УправляемыеФормыСервер.ОбработкаЗаполнения("ОбщегоНазначенияУТ", ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

		Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
			
			Для Каждого Услуга ИЗ ДанныеЗаполнения Цикл
				
				Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ЗаказИзКорзины) И ЗначениеЗаполнено(Услуга.ЗаказИзКорзины) Тогда 
					ЭтотОбъект.ЗаказИзКорзины = Услуга.ЗаказИзКорзины;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Командированный) И ЗначениеЗаполнено(ЭтотОбъект.ЗаказИзКорзины.Командируемый) Тогда 
					ЭтотОбъект.Командированный = ЭтотОбъект.ЗаказИзКорзины.Командируемый;
				КонецЕсли;	
					
				КонтрагентИзУслуги = Справочники.Контрагенты.ПустаяСсылка();
				Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Контрагент) Тогда 
					СтрокаУслуги = Услуга.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Плательщик, "Характеристика");
					Если СтрокаУслуги <> Неопределено Тогда
						КонтрагентИзУслуги = СтрокаУслуги.Значение;
					КонецЕсли;
				КонецЕсли;
					
					Если ЗначениеЗаполнено(КонтрагентИзУслуги) Тогда
						ЭтотОбъект.Партнер = КонтрагентИзУслуги.Партнер;
						ЭтотОбъект.Контрагент = КонтрагентИзУслуги;					
					Иначе
						Если ЗначениеЗаполнено(ЭтотОбъект.Командированный) Тогда
							Запрос = Новый Запрос;
							Запрос.УстановитьПараметр("Командированный", ЭтотОбъект.Командированный);
							Запрос.УстановитьПараметр("ДатаСреза", Услуга.Дата);
							Запрос.Текст = "ВЫБРАТЬ
							               |	ИсторияКомандированныхСрезПоследних.Командированный,
							               |	ИсторияКомандированныхСрезПоследних.Контрагент.Партнер КАК Партнер,
							               |	ИсторияКомандированныхСрезПоследних.Контрагент,
							               |	ИсторияКомандированныхСрезПоследних.Договор,
							               |	ИсторияКомандированныхСрезПоследних.Сумма
							               |ИЗ
							               |	РегистрСведений.ИсторияКомандированных.СрезПоследних(&ДатаСреза, ) КАК ИсторияКомандированныхСрезПоследних
							               |ГДЕ
							               |	ИсторияКомандированныхСрезПоследних.Командированный = &Командированный
							               |
							               |СГРУППИРОВАТЬ ПО
							               |	ИсторияКомандированныхСрезПоследних.Командированный,
							               |	ИсторияКомандированныхСрезПоследних.Контрагент,
							               |	ИсторияКомандированныхСрезПоследних.Договор,
							               |	ИсторияКомандированныхСрезПоследних.Сумма";
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								//
								ЭтотОбъект.Партнер = Выборка.Партнер;
								ЭтотОбъект.Контрагент = Выборка.Контрагент;
								ЭтотОбъект.Договор = Выборка.Договор;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				
				
			КонецЦикла;
			
			
			ТаблицаПолей = УправлениеБТСервер.ПолучитьТаблицуЭкстраПолей(
				ЭтотОбъект.Дата,
				ЭтотОбъект.Партнер,
				ЭтотОбъект.Контрагент,
				ЭтотОбъект.Договор,
				ЭтотОбъект.Командированный);
			Если ЭтотОбъект.ЭкстраПоля.Количество() = 0 Тогда
				ЭтотОбъект.ЭкстраПоля.Загрузить(ТаблицаПолей);
			Иначе
				СтараяТаблица = ЭтотОбъект.ЭкстраПоля.Выгрузить();
				ЭтотОбъект.ЭкстраПоля.Загрузить(ТаблицаПолей);
				
				Для Каждого СтрокаНовойТаблицы ИЗ ЭтотОбъект.ЭкстраПоля Цикл
					
					СтрокаСтаройТаблицы = СтараяТаблица.Найти(СтрокаНовойТаблицы.Характеристика, "Характеристика");
					Если СтрокаСтаройТаблицы <> Неопределено Тогда
						СтрокаНовойТаблицы.Значение = СтрокаСтаройТаблицы.Значение; 
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			//УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЭтотОбъект);
					
		КонецЕсли;
	КонецЕсли;
	
	МодульОбъектаСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка, "Конец");
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Начало");
	
	Если НЕ МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Вместо") Тогда 
		//	
		УправлениеБТСервер.УдалитьGUID(Ссылка);
	КонецЕсли;
	
	МодульОбъектаСервер.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ, "Конец");
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	МодульОбъектаСервер.ПередУдалением(ЭтотОбъект, Отказ, "Начало");
	//	
	МодульОбъектаСервер.ПередУдалением(ЭтотОбъект, Отказ, "Конец");
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	МодульОбъектаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, "Начало");
	//	
	МодульОбъектаСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения, "Конец");
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	МодульОбъектаСервер.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, "Начало");
	// Вставить содержимое обработчика.
	МодульОбъектаСервер.ПриУстановкеНовогоНомера(ЭтотОбъект, СтандартнаяОбработка, Префикс, "Конец");
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Начало");
	Если НЕ МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Вместо") Тогда
		// Вставить содержимое обработчика.
		ЭтотОбъект.Услуги.Очистить();
		ЭтотОбъект.ОписаниеНоменклатуры.Очистить();
		ЭтотОбъект.УслугиДляКлиента.Очистить();
	КонецЕсли;
	
	МодульОбъектаСервер.ПриКопировании(ЭтотОбъект, ОбъектКопирования, "Конец");
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МодульОбъектаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, "Начало");
	// Вставить содержимое обработчика.
	МодульОбъектаСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, "Конец");
КонецПроцедуры

