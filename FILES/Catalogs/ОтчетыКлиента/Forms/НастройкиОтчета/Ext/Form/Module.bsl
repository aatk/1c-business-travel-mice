
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СсылкаНаОбработку = ЭтаФорма.Параметры.СсылкаНаДопОтчеты;
	ВариантОтчета = ЭтаФорма.Параметры.ВариантОтчета;	
	НастройкаJSON = ЭтаФорма.Параметры.Настройки;
	ФильтрыJSON = ЭтаФорма.Параметры.Фильтры;
	ИдентификаторОтчета = ЭтаФорма.Параметры.ИдентификаторОтчета;
	
	//Сделать нормальную функцию
	ВОбработка = ДополнительныеОтчетыИПечатныеФормыВызовСервер.ВернутьОбработкуПоСсылке(СсылкаНаОбработку);
	
	Если ВОбработка <> Неопределено Тогда
		СКД = ВОбработка.СхемаКомпоновкиДанных;//ВОбработка.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		URLСхемы = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
		НастройкиОтчета.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		//УстановитьНастройкиJSON(НастройкиОтчета, НастройкаJSON);
		Если НЕ УстановитьНастройкиJSON(НастройкиОтчета, НастройкаJSON) Тогда
			
			Вариант = "";
			Варианты = УправлениеБТВызовСервера.ИзJSON(ВариантОтчета);
			Для Каждого ВариантЖСОН ИЗ Варианты Цикл
				Если ВариантЖСОН.Значение.Выбран Тогда
					Вариант = ВариантЖСОН.Ключ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Вариант) Тогда
				Настройки = ВОбработка.СхемаКомпоновкиДанных.ВариантыНастроек[Вариант].Настройки;
				НастройкиОтчета.ЗагрузитьНастройки(Настройки);
			КонецЕсли;
		КонецЕсли;
		
		НастройкиПользовательские.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));
		УстановитьНастройкиJSON(НастройкиПользовательские, ФильтрыJSON)
	КонецЕсли;
	
	
	ИзменитьЭкспертныйРежим(Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеренестиПользовательскиеНастройкиВФорму();
	ЗаполнитьНастройкиПечати();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПользовательскиеНастройкиВФорму()
	
	ОбъектВладельца = ЭтаФорма.ВладелецФормы.Объект; 	
	СтрокиПреобразованиеИмен = ОбъектВладельца.ПреобразованиеИмен.НайтиСтроки(Новый Структура("ИдентификаторОтчета", ИдентификаторОтчета));
	Для Каждого СтрокаПреобразованиеИмен ИЗ СтрокиПреобразованиеИмен Цикл
		НоваяСтрока = ПреобразованиеИмен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПреобразованиеИмен);
		
		ИдентификаторИмени = СтрокаПреобразованиеИмен.ИдентификаторИмени;
		СтрокиВариантыВыбора = ОбъектВладельца.ВариантыВыбора.НайтиСтроки(Новый Структура("ИдентификаторИмени", ИдентификаторИмени));
		Для Каждого СтрокаВариантыВыбора ИЗ СтрокиВариантыВыбора Цикл
			НоваяСтрока = ВариантыВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВариантыВыбора);			
		КонецЦикла;				
	КонецЦикла;	
КонецПроцедуры





Функция УстановитьНастройкиJSON(ВхНастройкиОтчета, НастройкаJSON)
	Установлено = Ложь;
	Если ЗначениеЗаполнено(НастройкаJSON) Тогда  
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON; 
			ЧтениеJSON.УстановитьСтроку(НастройкаJSON);
			ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data-composition-system/settings", "Settings");
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьJSON(ЧтениеJSON,ТипОбъектаXDTO); 
			ОбъектXDTO.Проверить();
			
			НастройкиОтчетаСериализатор = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
			ВхНастройкиОтчета.ЗагрузитьНастройки(НастройкиОтчетаСериализатор);
			Установлено = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Установлено;
КонецФункции
	
	
Функция ПолучитьНастройкиСтрокой(ВхНастройки)
	Возврат Строка(ВхНастройки.Настройки.Отбор);
КонецФункции

Функция ПолучитьНастройкиJSON(ВхНастройки)
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(ВхНастройки.Настройки);	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO);
		Стр = ЗаписьJSON.Закрыть(); 
	Исключение
	КонецПопытки;
	
	Возврат Стр; 
КонецФункции




&НаКлиенте
Процедура ПеренестиПользовательскиеНастройкиВОбъект()
	
	ОбъектВладельца = ЭтаФорма.ВладелецФормы.Объект; 	
	СтрокиДляУдаления = ОбъектВладельца.ПреобразованиеИмен.НайтиСтроки(Новый Структура("ИдентификаторОтчета", ИдентификаторОтчета));
	Для Каждого СтрокаДляУдаления ИЗ СтрокиДляУдаления Цикл
		ИдентификаторИмени = СтрокаДляУдаления.ИдентификаторИмени;
		СтрокиВариантаДляУдаления = ОбъектВладельца.ВариантыВыбора.НайтиСтроки(Новый Структура("ИдентификаторИмени", ИдентификаторИмени));
		Для Каждого СтрокаВариантаДляУдаления ИЗ СтрокиВариантаДляУдаления Цикл
			ОбъектВладельца.ВариантыВыбора.Удалить(СтрокаВариантаДляУдаления);
		КонецЦикла;				
		ОбъектВладельца.ПреобразованиеИмен.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	СтрокиДляУдаления = ОбъектВладельца.НастройкаПечати.НайтиСтроки(Новый Структура("ИдентификаторОтчета", ИдентификаторОтчета));
	Для Каждого СтрокаДляУдаления ИЗ СтрокиДляУдаления Цикл
		ОбъектВладельца.НастройкаПечати.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	
	Для Каждого СтрокаПреобразованиеИмен ИЗ ПреобразованиеИмен Цикл
		НоваяСтрока = ОбъектВладельца.ПреобразованиеИмен.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПреобразованиеИмен);
	КонецЦикла;
	Для Каждого СтрокаВариантыВыбора ИЗ ВариантыВыбора Цикл
		НоваяСтрока = ОбъектВладельца.ВариантыВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВариантыВыбора);
	КонецЦикла;
	
	Для Каждого СтрокаНастройкаПечати ИЗ НастройкаПечати Цикл
		Если ЗначениеЗаполнено(СтрокаНастройкаПечати.Значение) ИЛИ ЗначениеЗаполнено(СтрокаНастройкаПечати.Функция) Тогда
			НоваяСтрока = ОбъектВладельца.НастройкаПечати.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастройкаПечати);
			НоваяСтрока.ИдентификаторОтчета = ИдентификаторОтчета;
			Если ТипЗнч(СтрокаНастройкаПечати.Значение) = Тип("Булево") Тогда
				НоваяСтрока.Значение = Формат(СтрокаНастройкаПечати.Значение, "БЛ=Ложь; БИ=Истина");
				
			ИначеЕсли ТипЗнч(СтрокаНастройкаПечати.Значение) = Тип("ЧередованиеРасположенияСтраниц") Тогда
				Если СтрокаНастройкаПечати.Значение = ЧередованиеРасположенияСтраниц.ЗеркальноСверху Тогда
					НоваяСтрока.Значение = "ЗеркальноСверху";
				ИначеЕсли СтрокаНастройкаПечати.Значение = ЧередованиеРасположенияСтраниц.ЗеркальноСлева Тогда
					НоваяСтрока.Значение = "ЗеркальноСлева";
				ИначеЕсли СтрокаНастройкаПечати.Значение = ЧередованиеРасположенияСтраниц.НеИспользовать Тогда
					НоваяСтрока.Значение = "НеИспользовать";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ТипЗначения = ТипЗнч(СтрокаНастройкаПечати.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	ВыхПараметры = Новый Структура();
	ВыхПараметры.Вставить("ИдентификаторОтчета", ИдентификаторОтчета );
	ВыхПараметры.Вставить("Отчет", СсылкаНаОбработку );
	ВыхПараметры.Вставить("ВариантОтчета", ВариантОтчета );
	ВыхПараметры.Вставить("НастройкиСтрокой", ПолучитьНастройкиСтрокой(НастройкиОтчета) );
	ВыхПараметры.Вставить("Настройки", ПолучитьНастройкиJSON(НастройкиОтчета) );
	
	ВыхПараметры.Вставить("ФильтрыСтрокой", ПолучитьНастройкиСтрокой(НастройкиПользовательские) );
	ВыхПараметры.Вставить("Фильтры", ПолучитьНастройкиJSON(НастройкиПользовательские) );
	
	Оповестить("НовыеНастройкиОтчетаКлиента", ВыхПараметры , ЭтаФорма.ВладелецФормы);
	
	ПеренестиПользовательскиеНастройкиВОбъект();
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВариантыНаСервере(ВхЗначение)
	//
	МассивВариантов = Новый Массив;
	Если ТипЗнч(ВхЗначение) <> Тип("Булево") И ТипЗнч(ВхЗначение) <> Тип("Строка") И ТипЗнч(ВхЗначение) <> Тип("Число") Тогда
		Попытка
			МД = ВхЗначение.Метаданные();
			Если Метаданные.Справочники.Найти(МД.Имя) <> Неопределено Тогда
				//Это справочник
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ДанныеСправочника.Ссылка КАК Ссылка
				               |ИЗ
				               |	Справочник."+МД.Имя+" КАК ДанныеСправочника
				               |ГДЕ
				               |	ДанныеСправочника.ПометкаУдаления = Ложь";
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					МассивВариантов.Добавить(Новый Структура("Имя, Значение", Строка(Выборка.Ссылка), Выборка.Ссылка));
				КонецЦикла;
				
			ИначеЕсли Метаданные.Перечисления.Найти(МД.Имя) <> Неопределено Тогда
				//Это Перечисление
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ДанныеПеречисления.Ссылка КАК Ссылка
				               |ИЗ
				               |	Перечисление."+МД.Имя+" КАК ДанныеПеречисления";
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					МассивВариантов.Добавить(Новый Структура("Имя, Значение", Строка(Выборка.Ссылка), Выборка.Ссылка));
				КонецЦикла;
				
			КонецЕсли;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	Возврат МассивВариантов;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоТипу(Команда)
	ТД = Элементы.ПреобразованиеИмен.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		МассивВариантов = ПолучитьВариантыНаСервере(ТД.ПравоеЗначение);
		Если МассивВариантов.Количество() > 0 Тогда
			ТД.ТипЭлемента = "select";
			
			ОтборСтрок = Новый Структура("ИдентификаторИмени", ТД.ИдентификаторИмени);
			СтрокаДляУдаления = ВариантыВыбора.НайтиСтроки(ОтборСтрок);
			Для Каждого СтрокаУдаления ИЗ СтрокаДляУдаления Цикл
				ВариантыВыбора.Удалить(СтрокаУдаления);
			КонецЦикла;
			
			Для Каждого ЭлементВыбора ИЗ МассивВариантов Цикл
				НовыйВариант = ВариантыВыбора.Добавить();
				НовыйВариант.ВариантВыбора = ЭлементВыбора.Имя;
				НовыйВариант.ЗначениеВарианта = ЭлементВыбора.Значение;
				НовыйВариант.ИдентификаторИмени = ТД.ИдентификаторИмени;				
			КонецЦикла;
			
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоСтрокеОтбора(ПользовательскийОтбор)
	
	Если ПользовательскийОтбор.Использование И ЗначениеЗаполнено(ПользовательскийОтбор.Представление) Тогда
		НоваяСтрокаИмен = ПреобразованиеИмен.Добавить();
		НоваяСтрокаИмен.ИдентификаторОтчета = ИдентификаторОтчета;
		НоваяСтрокаИмен.ЛевоеЗначение = ПользовательскийОтбор.ЛевоеЗначение;
		Если ПользовательскийОтбор.Представление = "" Тогда
			НоваяСтрокаИмен.Представление = НоваяСтрокаИмен.ЛевоеЗначение;
		Иначе
			НоваяСтрокаИмен.Представление = ПользовательскийОтбор.Представление;
		КонецЕсли;
		НоваяСтрокаИмен.Имя = УправлениеБТВызовСервера.ТранслитерацияRUEN(НоваяСтрокаИмен.Представление);
		НоваяСтрокаИмен.ИдентификаторИмени = Строка(Новый УникальныйИдентификатор());
		НоваяСтрокаИмен.ПравоеЗначение = ПользовательскийОтбор.ПравоеЗначение;
		
		НоваяСтрокаИмен.ТипЭлемента = "input";

		Если ТипЗнч(ПользовательскийОтбор.ПравоеЗначение) = Тип("Булево") Тогда
			НоваяСтрокаИмен.ТипЭкспорта = "checkbox";
		ИначеЕсли ТипЗнч(ПользовательскийОтбор.ПравоеЗначение) = Тип("Дата") ИЛИ 
			ТипЗнч(ПользовательскийОтбор.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
			НоваяСтрокаИмен.ТипЭкспорта = "date";
		ИначеЕсли ТипЗнч(ПользовательскийОтбор.ПравоеЗначение) = Тип("Число") Тогда
			НоваяСтрокаИмен.ТипЭкспорта = "number";
		Иначе
			НоваяСтрокаИмен.ТипЭкспорта = "text";
		КонецЕсли;
		
		//<select>
		//  <option>Пункт 1</option>
		//  <option>Пункт 2</option>
		//</select>
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОтбору(Команда)
	
	ПреобразованиеИмен.Очистить();
	ВариантыВыбора.Очистить();
	Для Каждого ПользовательскийОтбор ИЗ НастройкиПользовательские.Настройки.Отбор.Элементы Цикл
		ЗаполнитьПоСтрокеОтбора(ПользовательскийОтбор);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПользовательскиеНастройкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ПользовательскийОтбор = НастройкиПользовательские.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Элемент.ТекущаяСтрока);
		ЗаполнитьПоСтрокеОтбора(ПользовательскийОтбор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПреобразованиеИменПриАктивизацииСтроки(Элемент)
	ТД = Элементы.ПреобразованиеИмен.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		Элементы.ВариантыВыбора.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторИмени", ТД.ИдентификаторИмени);
	Иначе
		Элементы.ВариантыВыбора.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторИмени", "");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВариантыВыбораПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТД = Элементы.ВариантыВыбора.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТДПИ = Элементы.ПреобразованиеИмен.ТекущиеДанные;
		Если ТДПИ <> Неопределено Тогда
			ТД.ИдентификаторИмени = ТДПИ.ИдентификаторИмени;
			ТДПИ.ТипЭлемента = "select";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеПользовательскогоОтбора(Данные)
	Если ЗначениеЗаполнено(Данные.Представление) Тогда 
		Представление = Данные.Представление;
	Иначе
		Представление = Данные.ЛевоеЗначение;
	КонецЕсли;
	Строки = ПреобразованиеИмен.НайтиСтроки(Новый Структура("Представление", Представление));
	Для Каждого СтрокаПИ ИЗ Строки Цикл
		СтрокиВариантов = ВариантыВыбора.НайтиСтроки(Новый Структура("ИдентификаторИмени", СтрокаПИ.ИдентификаторИмени));
		Для Каждого СтрокаВарианта ИЗ СтрокиВариантов Цикл
			ВариантыВыбора.Удалить(СтрокаВарианта);
		КонецЦикла;
		ПреобразованиеИмен.Удалить(СтрокаПИ);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПользовательскиеНастройкиПередУдалением(Элемент, Отказ)
	УдалитьДанныеПользовательскогоОтбора(Элемент.ТекущиеДанные);	
КонецПроцедуры




&НаСервере
Процедура ИзменитьЭкспертныйРежим(ТекущийРежим)
	Элементы.ПреобразованиеИменИмя.Видимость = НЕ ТекущийРежим;
	Элементы.ПреобразованиеИменТипЭлемента.Видимость = НЕ ТекущийРежим;
	Элементы.ПреобразованиеИменТипЭкспорта.Видимость = НЕ ТекущийРежим;
	Элементы.ПреобразованиеИменПравоеЗначение.Видимость = НЕ ТекущийРежим;
	Элементы.ПреобразованиеИменИдентификаторИмени.Видимость = НЕ ТекущийРежим;
	
	Элементы.ВариантыВыбораИдентификаторИмени.Видимость = НЕ ТекущийРежим;
	Элементы.НастройкаПечатиИмя.Видимость = НЕ ТекущийРежим;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспертныйРежим(Команда)
	ТекущийРежим = Элементы.ПреобразованиеИменИмя.Видимость;
	
	ИзменитьЭкспертныйРежим(ТекущийРежим);
КонецПроцедуры


&НаКлиенте
Процедура ВариантыВыбораПослеУдаления(Элемент)
	
	ТДПИ = Элементы.ПреобразованиеИмен.ТекущиеДанные;
	Если ТДПИ <> Неопределено Тогда
		СтрокиВариантов = ВариантыВыбора.НайтиСтроки(Новый Структура("ИдентификаторИмени", ТДПИ.ИдентификаторИмени));
		Если СтрокиВариантов.Количество() = 0 Тогда
			ТДПИ.ТипЭлемента = "input";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНастройкиПечатиСервер(ОбъектВладельца)
	
	ОбъектВладельцаСервер = ДанныеФормыВЗначение(ОбъектВладельца, Тип("СправочникОбъект.ОтчетыКлиента"));
	ТабДок = ОбъектВладельцаСервер.ПолучитьМакет("СвойстваТабличногоДокумента");
	
	НастройкиПечатиОбъект = ОбъектВладельцаСервер.НастройкаПечати;
	Ключи = Новый Структура();

	СтрокаЧтения = 1;
	ПродолжатьЗагружать = Истина;
	Пока ПродолжатьЗагружать Цикл
		СтрокаЧтения = СтрокаЧтения+1;
		 
		ВхИмя	        = СокрЛП(ТабДок.Область(СтрокаЧтения, 1, СтрокаЧтения, 1).Текст);
		Если ВхИмя = "" Тогда
			ПродолжатьЗагружать = Ложь;
			Прервать;
		КонецЕсли;
		
		ВхПредставление = СокрЛП(ТабДок.Область(СтрокаЧтения, 2, СтрокаЧтения, 2).Текст);
		Если ВхПредставление = "" Тогда
			ВхПредставление = ВхИмя;
		КонецЕсли;
		
		ВхТип	        = СокрЛП(ТабДок.Область(СтрокаЧтения, 3, СтрокаЧтения, 3).Текст);
		ВхЗначения	    = СокрЛП(ТабДок.Область(СтрокаЧтения, 4, СтрокаЧтения, 4).Текст);
		Если ЗначениеЗаполнено(ВхТип) Тогда
			ВхТип = Тип(ВхТип);
			
			ПараметрыОтбора = Новый Структура("ИдентификаторОтчета, Имя", ИдентификаторОтчета, ВхИмя);
			НайденныеСтроки = НастройкиПечатиОбъект.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() <> 0 Тогда
				ВхЗначения = НайденныеСтроки[0].Значение;	
			КонецЕсли;
			
			
			Если ВхТип = Тип("ОриентацияСтраницы") Тогда
				ВхЗначения = ОриентацияСтраницы[ВхЗначения];
				
			ИначеЕсли ВхТип = Тип("ЧередованиеРасположенияСтраниц") Тогда
				Если ВхЗначения = "НеИспользовать" Тогда
					ВхЗначения = ЧередованиеРасположенияСтраниц.НеИспользовать;
				ИначеЕсли ВхЗначения = "ЗеркальноСлева" Тогда
					ВхЗначения = ЧередованиеРасположенияСтраниц.ЗеркальноСлева;
				ИначеЕсли ВхЗначения = "ЗеркальноСверху" Тогда
					ВхЗначения = ЧередованиеРасположенияСтраниц.ЗеркальноСверху;
				Иначе
					Массив = Новый Массив;
					Массив.Очистить();
					Массив.Добавить(ВхТип);
					ОписаниеТипов1 = Новый ОписаниеТипов(Массив);
					ВхЗначения = ОписаниеТипов1.ПривестиЗначение(ВхЗначения);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ВхЗначения) ИЛИ ВхТип = Тип("Число") Тогда
				КЧ = Новый КвалификаторыЧисла(12,2);
				Массив = Новый Массив;
				Массив.Очистить();
				Массив.Добавить(ВхТип);
				ОписаниеТипов1 = Новый ОписаниеТипов(Массив, , ,КЧ);
				ВхЗначения = ОписаниеТипов1.ПривестиЗначение(ВхЗначения);
			КонецЕсли;
				
		КонецЕсли;
		
		
		ВхФункция	    = ТабДок.Область(СтрокаЧтения, 5, СтрокаЧтения, 5).Текст;
		ВхФункция = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", ВхФункция);
		
		
		
		НоваяСтрока = НастройкаПечати.Добавить();
		НоваяСтрока.Имя           = ВхИмя;
		НоваяСтрока.Представление = ВхПредставление;
		НоваяСтрока.Значение      = ВхЗначения;
		НоваяСтрока.Функция       = ВхФункция;
		
		
		Значение = Новый Структура("Представление, Значение, Функция", ВхПредставление, ВхЗначения, ВхФункция);
		Ключи.Вставить(ВхИмя, Значение);
		
	КонецЦикла;        
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиПечати()
	ОбъектВладельца = ЭтаФорма.ВладелецФормы.Объект; 	
	ЗаполнитьНастройкиПечатиСервер(ОбъектВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВариантыВыбораЗначениеВариантаПриИзменении(Элемент)
	ТД = Элементы.ВариантыВыбора.ТекущиеДанные;
	Если ТД <> Неопределено И ЗначениеЗаполнено(ТД.ЗначениеВарианта) Тогда
		ТД.ВариантВыбора = Строка(ТД.ЗначениеВарианта);
	КонецЕсли;
	
КонецПроцедуры
