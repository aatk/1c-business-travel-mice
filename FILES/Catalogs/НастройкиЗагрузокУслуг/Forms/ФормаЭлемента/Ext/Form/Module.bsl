
&НаСервере
Функция ТестЗагрузкиНаСервере(Услуга)
	
	ПолноеИмя = ПолучитьИмяФормы();
	Разд = СтрРазделить(ПолноеИмя, ".", Истина);
	Разд[0] = Разд[0]+"Объект";
	ТипСтр = СтрСоединить(Разд, ".");
	
	УслугаСервер = ДанныеФормыВЗначение(Услуга, Тип(ТипСтр)); 
	УправлениеБТСервер.ЗагрузитьДанныеВУслугу(Объект.JSON, УслугаСервер, Объект.Ссылка, Истина);
	ЗначениеВДанныеФормы(УслугаСервер, Услуга); 
КонецФункции

&НаСервере
Функция ПолучитьИмяФормы()
	
	Возврат Объект.ОбъектЗагрузки.ПолноеИмя;
	
КонецФункции

&НаКлиенте
Процедура ТестЗагрузки(Команда)
	
	Форма = ПолучитьФорму(ПолучитьИмяФормы() +".ФормаОбъекта");
	Услуга = Форма.Объект;
	ТестЗагрузкиНаСервере(Услуга);
	КопироватьДанныеФормы(Услуга, Форма.Объект);
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура УслугаПриИзмененииНаСервере(ОчищатьХарактеристики) 
	
	ОтобразитьДанные();

	//Сохраним старые настройки
	СтараяТабЧасть = Объект.ХарактеристикиДляЗагрузки.Выгрузить();
	
    Если ОчищатьХарактеристики Тогда
		Объект.ХарактеристикиДляЗагрузки.Очистить();	
    КонецЕсли;
	
	Для Каждого СтрокаНастроек ИЗ Объект.НоменклатураБТ.Характеристики Цикл		
		
		ПараметрыОтбора = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);
		НайденныеСтроки = Объект.ХарактеристикиДляЗагрузки.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда			
			НоваяСтрока = Объект.ХарактеристикиДляЗагрузки.Добавить();
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		НоваяСтрока.Характеристика = СтрокаНастроек.Характеристика;
		
		ОтборОписания = Новый Структура("Характеристика", СтрокаНастроек.Характеристика);		
		Строки = СтараяТабЧасть.НайтиСтроки(ОтборОписания);
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка ИЗ Строки Цикл 
				НоваяСтрока.ОбъектJSON = Строка.ОбъектJSON;
				НоваяСтрока.Обработчик = Строка.Обработчик;
				НоваяСтрока.СтатическоеЗначение = Строка.СтатическоеЗначение;
				НоваяСтрока.Приоритет = Строка.Приоритет;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзмененииКлиент(Результат, Параметры) Экспорт	
	ОчищатьХарактеристики = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчищатьХарактеристики = Истина;
	КонецЕсли;
	
	УслугаПриИзмененииНаСервере(ОчищатьХарактеристики);
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("УслугаПриИзмененииКлиент", ЭтаФорма, Параметры);
	ПоказатьВопрос(Оповещение, "Очистить все характеристики?", Режим, 0);
КонецПроцедуры

&НаСервере
Процедура ПроверитьДерево()
	ДеревоJSONЗаполнено = Ложь;
	Если СтрДлина(Объект.JSON)>0 Тогда
		ДеревоJSONЗаполнено = Истина;
	КонецЕсли;
	ЭтаФорма.Элементы.Основная.Доступность = ДеревоJSONЗаполнено;
КонецПроцедуры


Процедура ОтобразитьДанные()
	
	МД = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектЗагрузки.ПолноеИмя); //Убрать, не использовать данный справочник...
	Если МД = Неопределено Тогда
		МД = Метаданные.Документы.Услуга;
	КонецЕсли;	
		
	Попытка
		СписокДляУдаления = Новый Массив;
		Для Каждого Строка ИЗ Объект.ДопДанные Цикл
			ТЧ = МД.ТабличныеЧасти.Найти(Строка.Таблица);
			Если ТЧ = Неопределено Тогда
				СписокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СУ ИЗ СписокДляУдаления Цикл
			Объект.ДопДанные.Удалить(СУ);
		КонецЦикла;
		
		Для Каждого ЭлементМетаданных ИЗ МД.ТабличныеЧасти Цикл		
			ОтборОписания = Новый Структура("Таблица", ЭлементМетаданных.Имя);		
			Строки = Объект.ДопДанные.НайтиСтроки(ОтборОписания);
			Если Строки.Количество() <> 1 Тогда
				Для Каждого Строка ИЗ Строки Цикл 
					Объект.ДопДанные.Удалить(Строка);
				КонецЦикла;
				
				НоваяСтрока = Объект.ДопДанные.Добавить();		
				НоваяСтрока.Таблица = ЭлементМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
	
		//Объект.ОбъектыДляЗагрузки.Очистить();
		СписокДляУдаления = Новый Массив;
		Для Каждого Строка ИЗ Объект.ОбъектыДляЗагрузки Цикл
			
			СР1 = Неопределено;
			Для Каждого СР ИЗ МД.СтандартныеРеквизиты Цикл   //МД.СтандартныеРеквизиты[0].Имя
				Если СР.Имя = Строка.ЭлементМетаданных Тогда
					СР1 = СР;
				КонецЕсли;
			КонецЦикла;
			
			СР2 = МД.Реквизиты.Найти(Строка.ЭлементМетаданных);
			Если СР1 = Неопределено И СР2 = Неопределено Тогда
				СписокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		Для Каждого СУ ИЗ СписокДляУдаления Цикл
			Объект.ОбъектыДляЗагрузки.Удалить(СУ);
		КонецЦикла;
		
		Для Каждого ЭлементМетаданных ИЗ МД.СтандартныеРеквизиты Цикл		
			ОтборОписания = Новый Структура("ЭлементМетаданных", ЭлементМетаданных.Имя);		
			Строки = Объект.ОбъектыДляЗагрузки.НайтиСтроки(ОтборОписания);
			Если Строки.Количество() <> 1 Тогда
				Для Каждого Строка ИЗ Строки Цикл 
					Объект.ОбъектыДляЗагрузки.Удалить(Строка);
				КонецЦикла;	
				НоваяСтрока = Объект.ОбъектыДляЗагрузки.Добавить();		
				НоваяСтрока.ЭлементМетаданных = ЭлементМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМетаданных ИЗ МД.Реквизиты Цикл		
			ОтборОписания = Новый Структура("ЭлементМетаданных", ЭлементМетаданных.Имя);		
			Строки = Объект.ОбъектыДляЗагрузки.НайтиСтроки(ОтборОписания);
			Если Строки.Количество() <> 1 Тогда
				Для Каждого Строка ИЗ Строки Цикл 
					Объект.ОбъектыДляЗагрузки.Удалить(Строка);
				КонецЦикла;	
				НоваяСтрока = Объект.ОбъектыДляЗагрузки.Добавить();		
				НоваяСтрока.ЭлементМетаданных = ЭлементМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
	
	Исключение
		Сообщить("Что-то пошло не так!");
	КонецПопытки;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВидимостьЭлементов();
	ПроверитьДерево();
	
	Попытка
		Если НЕ ЗначениеЗаполнено(Объект.ОбъектЗагрузки) Тогда
			Объект.ОбъектЗагрузки = Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданныхПоПолномуИмени("Документ.Услуга");
		КонецЕсли;
	Исключение
		//	
	КонецПопытки;
	
	ОтобразитьДанные();

	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВыбора(Результат, Параметр) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Параметр.ОбъектJSON = Результат.Значение;
	КонецЕсли;
	Элементы.ОбъектыДляЗагрузки.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ХарактеристикиДляЗагрузки.ЗакончитьРедактированиеСтроки(Ложь);
	Элементы.ДопДанные.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура JSONПриИзменении(Элемент)
	ПроверитьДерево()
КонецПроцедуры


&НаКлиенте
Процедура ОбъектыДляЗагрузкиОбъектJSONОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТД = Элементы.ОбъектыДляЗагрузки.ТекущиеДанные;
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбора", ЭтотОбъект, ТД);
	
	Пар = Новый Структура("ЖСОН");
	Пар.ЖСОН = Объект.JSON;
	
	ОткрытьФорму("Справочник.НастройкиЗагрузокУслуг.Форма.ФормаОтбора", Пар,,,,,Оп);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиДляЗагрузкиОбъектJSONОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТД = Элементы.ХарактеристикиДляЗагрузки.ТекущиеДанные;
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбора", ЭтотОбъект, ТД);
	
	Пар = Новый Структура("ЖСОН");
	Пар.ЖСОН = Объект.JSON;
	
	ОткрытьФорму("Справочник.НастройкиЗагрузокУслуг.Форма.ФормаОтбора", Пар,,,,,Оп);
КонецПроцедуры


&НаКлиенте
Процедура ВходящиеУслугиОбъектJSONОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТД = Элементы.ДопДанные.ТекущиеДанные;
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбора", ЭтотОбъект, ТД);
	
	Пар = Новый Структура("ЖСОН");
	Пар.ЖСОН = Объект.JSON;
	
	ОткрытьФорму("Справочник.НастройкиЗагрузокУслуг.Форма.ФормаОтбора", Пар,,,,,Оп);
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьНаСервере()
	// Вставить содержимое обработчика.
	ЭтаФорма.Элементы.МассивJSON.Доступность = Объект.СоздаватьНесколькоУслуг;
	
	Если ЗначениеЗаполнено(Объект.СерверШины) И ЗначениеЗаполнено(Объект.RESTЗапрос) Тогда
		Результат = УправлениеБТСервер.СтатусПодпискиЗагрузкиВШине(Объект.СерверШины, НРег(Объект.RESTЗапрос));
		ЭтаФорма.Элементы.ФормаЗарегистрироватьПодписку.Видимость = НЕ Результат;
		ЭтаФорма.Элементы.ФормаСнятьСРегистрации.Видимость = Результат;
	КонецЕсли;

	//ЭтаФорма.Элементы.ФормаЗарегестрироватьПодписку.Картинка = Метаданные.ОбщиеКартинки.Светофор.Картинка[2];
	//ЭтаФорма.Элементы.ФормаЗарегестрироватьПодписку.Картинка = Метаданные.ОбщиеКартинки.Светофор.Картинка[2];
КонецПроцедуры


&НаКлиенте
Процедура СоздаватьНесколькоУслугПриИзменении(Элемент)
	УстановитьВидимостьНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура МассивJSONОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияВыбораДляМассиваJSON", ЭтотОбъект);
	
	Пар = Новый Структура("ЖСОН");
	Пар.ЖСОН = Объект.JSON;
	
	ОткрытьФорму("Справочник.НастройкиЗагрузокУслуг.Форма.ФормаОтбора", Пар,,,,,Оп);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияВыбораДляМассиваJSON(Результат, Параметр) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.МассивJSON = Результат.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЗагрузкиПриИзменении(Элемент)
	ОбъектЗагрузкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбъектЗагрузкиПриИзмененииНаСервере()
	ОтобразитьДанные();
КонецПроцедуры

&НаСервере
Процедура ПродЗагрузкаНаСервере()
	УправлениеБТСервер.ЗагрузитьДанныеВУслугу(Объект.JSON, Неопределено, Объект.Ссылка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПродЗагрузка(Команда)
	ПродЗагрузкаНаСервере();
КонецПроцедуры





&НаКлиенте
Процедура ВыполнитьПослеВыбораФайла(Пар1, Пар2) Экспорт
	
	Если ТипЗнч(Пар1) = Тип("Массив") Тогда
		
	    Для Каждого ИмяФайла Из Пар1 Цикл
			Файл = Новый Файл(ИмяФайла);
			Имя = Файл.Имя;
						
			ДД = Новый ДвоичныеДанные(ИмяФайла);
			СсылкаНаФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(ДД, ЭтаФорма.УникальныйИдентификатор);
			
			Модифицированность = Истина; 
			Объект.НаименованиеОбработки = Имя;
		КонецЦикла;
			
	Иначе
	    Сообщить(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораФайлаСохранение(Пар1, Пар2) Экспорт
	
	Если ТипЗнч(Пар1) = Тип("Массив") Тогда
		
		Для Каждого ИмяФайла Из Пар1 Цикл
			СсылкаНаФайлВИБ = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "ВнешняяОбработка");			
			ПолучитьФайл(СсылкаНаФайлВИБ, ИмяФайла, Ложь);
		КонецЦикла;
		
	Иначе
	    Сообщить(НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов() 

	Элементы.Тестирование.Видимость = Объект.ИспользоватьПользовательскуюЗагрузку;
	Элементы.Основная.Видимость = Объект.ИспользоватьПользовательскуюЗагрузку;
	
	ИспользоватьИнтерфейсV2 = ПолучитьФункциональнуюОпцию("ИспользоватьИнтерфейсV2");
	Элементы.ГруппаДопДанные.Видимость = 				ИспользоватьИнтерфейсV2;
	Элементы.ГруппаДополнительныхНастроек.Видимость = 	ИспользоватьИнтерфейсV2;
	Элементы.Родитель.Видимость = 						ИспользоватьИнтерфейсV2;
	Элементы.ОбъектЗагрузки.Видимость = 				ИспользоватьИнтерфейсV2;
	Элементы.ХарактеристикаДляПоискаУслуги.Видимость = 	ИспользоватьИнтерфейсV2;
	Элементы.ОбработчикПоискаОбъекта.Видимость = 		ИспользоватьИнтерфейсV2;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработку(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Внешняя обработка (*.epf)|*.epf";
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФайла", ЭтотОбъект, "");
	ДиалогОткрытияФайла.Показать(Оп);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбработку(Команда)
	Если Объект.НаименованиеОбработки = "" Тогда
		Сообщить("У вас нет сохраненного в базе обработки");
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = "Внешняя обработка (*.epf)|*.epf";
		
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
		ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.НаименованиеОбработки;
		
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФайлаСохранение", ЭтотОбъект, "");
		ДиалогОткрытияФайла.Показать(Оп);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайлВоВременномХранилище) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
		ТекущийОбъект.ВнешняяОбработка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	КонецЕсли;       

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайлВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
		СсылкаНаФайлВоВременномХранилище = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнешнююОбработкуПриИзменении(Элемент)
	//УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПользовательскуюЗагрузкуПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры




&НаСервере
Процедура ЗарегистрироватьПодпискуНаСервере()
	Результат = УправлениеБТСервер.ЗарегистрироватьПодпискуНаЗагрузкуВШине(Объект.СерверШины, НРег(Объект.RESTЗапрос));
	ЭтаФорма.Элементы.ФормаЗарегистрироватьПодписку.Видимость = НЕ Результат;
	ЭтаФорма.Элементы.ФормаСнятьСРегистрации.Видимость = Результат;
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПодписку(Команда)
	ЗарегистрироватьПодпискуНаСервере();
КонецПроцедуры

&НаСервере
Процедура СнятьСРеистрацииНаСервере()
	Результат = УправлениеБТСервер.УдалитьПодпискуЗагрузкиВШине(Объект.СерверШины, НРег(Объект.RESTЗапрос));
	ЭтаФорма.Элементы.ФормаЗарегистрироватьПодписку.Видимость = Результат;
	ЭтаФорма.Элементы.ФормаСнятьСРегистрации.Видимость = НЕ Результат;
КонецПроцедуры

&НаКлиенте
Процедура СнятьСРегистрации(Команда)
	СнятьСРеистрацииНаСервере();
КонецПроцедуры






&НаСервере
Функция СоздатьКомпонентИСохранитьНаДискНаСервере()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Если Объект.Ссылка.Метаданные().Имя = "НастройкиЗагрузокУслуг" Тогда 
		ШаблонОбработки = ОбъектСервер.ПолучитьМакет("ШаблонОбработкиV3");	
	Иначе
		ШаблонОбработки = ОбъектСервер.ПолучитьМакет("ШаблонОбработкиV2");	
	КонецЕсли;
	
	JSONСтрока = УправлениеБТСервер.ЭкспортНастройки(Объект.Ссылка);
	РЕСТ = Новый HTTPЗапрос();
	РЕСТ.УстановитьТелоИзСтроки(JSONСтрока);
	JSON = РЕСТ.ПолучитьТелоКакДвоичныеДанные();
	
	Результат = Новый Структура("Результат, Обработка, JSON", Истина, ШаблонОбработки, JSON);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПослеСозданиеКаталога(ИмяКаталога, СсылкаНаФайлВИБ) Экспорт
	
	СсылкаНаФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(СсылкаНаФайлВИБ.Обработка);
	ПолучитьФайл(СсылкаНаФайлВоВременномХранилище, ИмяКаталога+"\DataProcessors.epf", Ложь); //ИмяФайла+"\"+Объект.Наименование
	УдалитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);

	СсылкаНаФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(СсылкаНаФайлВИБ.JSON);
	ПолучитьФайл(СсылкаНаФайлВоВременномХранилище, ИмяКаталога+"\DataProcessors.json", Ложь); //ИмяФайла+"\"+Объект.Наименование
	УдалитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДополнительныйФункционал) Тогда
		//Создать компонент по умолчанию
		ПараметрыВнутри = Новый Структура("Наименование, ТипДопФункционала", Объект.Наименование, ПредопределенноеЗначение("Перечисление.ТипыДополнительногоФункционала.КомпонентЗагрузкиДанных"));
		Объект.ДополнительныйФункционал = МаркетПлейсВызовСервера.СоздатьЭлементДополнительногоФункционала(ПараметрыВнутри);
		ЭтаФорма.Модифицированность = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВыбораКаталогаСохранение(Пар1, Пар2) Экспорт
	
	Если ТипЗнч(Пар1) = Тип("Массив") Тогда
		
		Для Каждого ИмяФайла Из Пар1 Цикл
			СсылкаНаФайлВИБ = СоздатьКомпонентИСохранитьНаДискНаСервере(); //ПолучитьНавигационнуюСсылку(Объект.Ссылка, "ВнешняяОбработка");			
			Если СсылкаНаФайлВИБ.Результат Тогда
				
				
				Оп = Новый ОписаниеОповещения("ВыполнитьПослеСозданиеКаталога", ЭтотОбъект, СсылкаНаФайлВИБ);
				НачатьСозданиеКаталога(Оп, ИмяФайла+"\"+Объект.Наименование);//СоздатьКаталог(ИмяФайла+"\"+Объект.Наименование);				
				
				Сообщить("Нужные файлы сформированы");	
			КонецЕсли;
		КонецЦикла;
		
	Иначе
	    ПоказатьПредупреждение(,НСтр("ru = 'Файл не сформирован!'; en = 'File not creator!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьВсеФайлыДляСозданияКомпоненты(Команда)
	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сохраните предварительно настройку");		
	Иначе	
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
		
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораКаталогаСохранение", ЭтотОбъект, "");
		ДиалогОткрытияФайла.Показать(Оп);		
	КонецЕсли;	
	
КонецПроцедуры
