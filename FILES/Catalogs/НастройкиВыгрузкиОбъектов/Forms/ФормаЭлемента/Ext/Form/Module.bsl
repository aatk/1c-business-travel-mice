
&НаСервере
Процедура СписокДоступныхПолейВыборЗначенияНаСервере(СсылкаФункция)
	
	Префикс = "";
	ИмяХарактеристики = СсылкаФункция;
	
	НС = 0;
	НК = 0;
	КС = 0;
	КК = 0;
	Элементы.ШаблонВыгрузки.ПолучитьГраницыВыделения(НС,НК,КС,КК);
	
	СтрокаТекста = СтрПолучитьСтроку(Объект.ШаблонВыгрузки, НС);
	СтрокаТекста = Сред(СтрокаТекста,0,НК-1) + Префикс+"["+ИмяХарактеристики+"]" + Сред(СтрокаТекста, КК, СтрДлина(СтрокаТекста));
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Объект.ШаблонВыгрузки);
	ТД.ЗаменитьСтроку(НС, СтрокаТекста); 
	
	Объект.ШаблонВыгрузки = ТД.ПолучитьТекст();
КонецПроцедуры

&НаСервере
Процедура СписокФункцийВыборЗначенияНаСервере(СсылкаФункция)
	
	Префикс = "f";
	ИмяХарактеристики = СсылкаФункция.КлючПоиска;
	
	НС = 0;
	НК = 0;
	КС = 0;
	КК = 0;
	Элементы.ШаблонВыгрузки.ПолучитьГраницыВыделения(НС,НК,КС,КК);

	СтрокаТекста = СтрПолучитьСтроку(Объект.ШаблонВыгрузки, НС);
	СтрокаТекста = Сред(СтрокаТекста,0,НК-1) + Префикс+"["+ИмяХарактеристики+"]" + Сред(СтрокаТекста, КК, СтрДлина(СтрокаТекста));
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Объект.ШаблонВыгрузки);
	ТД.ЗаменитьСтроку(НС, СтрокаТекста); 
	Объект.ШаблонВыгрузки = ТД.ПолучитьТекст();
	
	//ШаблонОписания = Сред(Объект.ШаблонВыгрузки,0,НК-1) + Префикс+"["+ИмяХарактеристики+"]" + Сред(Объект.ШаблонВыгрузки,КК, СтрДлина(Объект.ШаблонВыгрузки));	
	//Объект.ШаблонВыгрузки = ШаблонОписания;
КонецПроцедуры

&НаСервере
Процедура НастройкиВыгрузкиВыборЗначенияНаСервере(СсылкаНастройка)
	Префикс = "n";
	ИмяХарактеристики = СсылкаНастройка.КлючПоиска;
	
	НС = 0;
	НК = 0;
	КС = 0;
	КК = 0;
	Элементы.ШаблонВыгрузки.ПолучитьГраницыВыделения(НС,НК,КС,КК);

	СтрокаТекста = СтрПолучитьСтроку(Объект.ШаблонВыгрузки, НС);
	СтрокаТекста = Сред(СтрокаТекста,0,НК-1) + Префикс+"["+ИмяХарактеристики+"]" + Сред(СтрокаТекста, КК, СтрДлина(СтрокаТекста));
	
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Объект.ШаблонВыгрузки);
	ТД.ЗаменитьСтроку(НС, СтрокаТекста); 
	Объект.ШаблонВыгрузки = ТД.ПолучитьТекст();

	//ШаблонОписания = Сред(Объект.ШаблонВыгрузки,0,НК-1) + Префикс+"["+ИмяХарактеристики+"]" + Сред(Объект.ШаблонВыгрузки,КК, СтрДлина(Объект.ШаблонВыгрузки));
	//
	//Объект.ШаблонВыгрузки = ШаблонОписания;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		СсылкаНастройка = Элемент.ТекущиеДанные.Настройка;
		НастройкиВыгрузкиВыборЗначенияНаСервере(СсылкаНастройка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокФункцийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		СсылкаФункция = Элемент.ТекущиеДанные.Функция;
		СписокФункцийВыборЗначенияНаСервере(СсылкаФункция);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	
	Текст = СокрЛП(Объект.ЗапросВыгрузки);
	
	КодПрограммы = "
	|КонструкторЗапроса = Новый КонструкторЗапроса;
	|Если Не ПустаяСтрока(Текст) Тогда
	|		КонструкторЗапроса.Текст = Текст;
	|КонецЕсли;
	|";
		
    #Если ТолстыйКлиентУправляемоеПриложение Тогда
    Попытка
        
        КодПрограммы = КодПрограммы+ "
        |КонструкторЗапроса.АвтоДобавлениеПредставлений = ТекущиеДанные.АвтоДобавлениеПредставлений;
        |КонструкторЗапроса.РежимКомпоновкиДанных        = ТекущиеДанные.РежимКомпоновкиДанных;
        |
        |Если КонструкторЗапроса.ОткрытьМодально() Тогда
        |    ТекущиеДанные.Текст = КонструкторЗапроса.Текст;
        |    ПроверитьТекстЗапроса_ПолучитьПараметры_ОбновитьДанные();
        |КонецЕсли;
        |";
        Выполнить(КодПрограммы);
    Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
    #Иначе
        
    Попытка
		
		КодПрограммы = КодПрограммы+ "
		|КонструкторЗапроса.Показать(Новый ОписаниеОповещения(""ПослеРедактированияЗапроса"", ЭтаФорма, Неопределено));
		|";
		Выполнить(КодПрограммы);
   Исключение
        Сообщить(ОписаниеОшибки());
    КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоляЗапроса()
	
	Если Объект.ЗапросВыгрузки <> "" Тогда
		Попытка
			КонструкторЗапроса = Новый ПостроительЗапроса(Объект.ЗапросВыгрузки);
			КонструкторЗапроса.ЗаполнитьНастройки();
			
			ДоступныеПоляЗапроса.Очистить();
			Для Каждого ДоступноеПоле ИЗ КонструкторЗапроса.ДоступныеПоля Цикл
				НоваяСтрока = ДоступныеПоляЗапроса.Добавить();
				НоваяСтрока.ПолеЗапроса = ДоступноеПоле.Имя;
			КонецЦикла;
			//КонструкторЗапроса.ВыбранныеПоля;
		Исключение
			//	
		КонецПопытки

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияЗапроса(Текст, ЭлементДерева) Экспорт
	Если Не ПустаяСтрока(Текст) Тогда
		
		СписокПараметров = Новый Массив;
		МассивП = СтрРазделить(Текст, "&", Истина);
		Если МассивП.Количество()>0 Тогда
			Для Индекс = 1 ПО МассивП.Количество()-1 Цикл
				СтрокаП = МассивП[Индекс];	
				КС = СтрНайти(СтрокаП, " ");
				КС2 = СтрНайти(СтрокаП, Символы.ПС);
				КС = Мин(КС, КС2);
				СписокПараметров.Добавить(Сред(СтрокаП, 0, КС-1));
			КонецЦикла;
		КонецЕсли;
		Для Каждого Параметр ИЗ СписокПараметров Цикл
			Текст = СтрЗаменить(Текст, "&"+Параметр, "&ОбъектВыгрузки");	
		КонецЦикла;
		
        Объект.ЗапросВыгрузки = Текст;
		ЗаполнитьДоступныеПоляЗапроса();
		Модифицированность = Истина;
    Иначе
        Модифицированность = Ложь;
    КонецЕсли;
КонецПроцедуры



&НаСервере
Функция ТестВыгрузкиНаСервере()
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	ПараметрыФункции = Новый Структура("Ссылка", ОбъектСервер.ОбъектыВыгрузки);
	УправлениеБТСервер.ВыгрузкаДанныхВПапки(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ТестВыгрузки(Команда)
		
	ТестВыгрузкиНаСервере();
	Сообщить("Выгрузка завершена");
	
КонецПроцедуры





&НаКлиенте
Процедура ВнешняяОбработкаПриИзменении(Элемент)
	ВнешняяОбработкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВнешняяОбработкаПриИзмененииНаСервере()
	Элементы.Группа3.Видимость = НЕ Объект.ВнешняяОбработка;
	Элементы.Группа8.Видимость = Объект.ВнешняяОбработка;
КонецПроцедуры



&НаКлиенте
Процедура ВыполнитьПослеВыбораФайла(Пар1, Пар2) Экспорт
	
	Если ТипЗнч(Пар1) = Тип("Массив") Тогда
		
	    Для Каждого ИмяФайла Из Пар1 Цикл
			Файл = Новый Файл(ИмяФайла);
			Имя = Файл.Имя;
						
			ДД = Новый ДвоичныеДанные(ИмяФайла);
			СсылкаНаФайлВоВременномХранилище = ПоместитьВоВременноеХранилище(ДД, ЭтаФорма.УникальныйИдентификатор);
			
			Модифицированность = Истина; 
			Объект.НаименованиеОбработки = Имя;
		КонецЦикла;
			
	Иначе
	    ПоказатьПредупреждение(,НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеВыбораФайлаСохранение(Пар1, Пар2) Экспорт
	
	Если ТипЗнч(Пар1) = Тип("Массив") Тогда
		
		Для Каждого ИмяФайла Из Пар1 Цикл
			СсылкаНаФайлВИБ = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "ВнешняяОбработкаВыгрузки");			
			ПолучитьФайл(СсылкаНаФайлВИБ, ИмяФайла, Ложь);
		КонецЦикла;
		
	Иначе
	    ПоказатьПредупреждение(,НСтр("ru = 'Файл не выбран!'; en = 'File not selected!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = "Внешняя обработка (*.epf)|*.epf";
	
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФайла", ЭтотОбъект, "");
	ДиалогОткрытияФайла.Показать(Оп);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	
	Если Объект.НаименованиеОбработки = "" Тогда
		ПоказатьПредупреждение(,"У вас нет сохраненного в базе обработки");
	Иначе
		Режим = РежимДиалогаВыбораФайла.Сохранение;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Фильтр = "Внешняя обработка (*.epf)|*.epf";
		
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
		ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.НаименованиеОбработки;
		
		Оп = Новый ОписаниеОповещения("ВыполнитьПослеВыбораФайлаСохранение", ЭтотОбъект, "");
		ДиалогОткрытияФайла.Показать(Оп);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.Группа3.Видимость = НЕ Объект.ВнешняяОбработка; 
	Элементы.Группа8.Видимость = Объект.ВнешняяОбработка;
	
	Если НЕ Объект.ВнешняяОбработка Тогда
		ЗаполнитьДоступныеПоляЗапроса();
		Если Объект.РасширениеИсходящегоФайла = "" Тогда
			Объект.РасширениеИсходящегоФайла = "json";
		КонецЕсли;
		Если Объект.КодировкаФайла = "" Тогда
			Объект.КодировкаФайла = "UTF8";
		КонецЕсли;
		
		Если Объект.РасширениеИсходящегоФайла = "json" И Объект.РазделительДочернихЭлементов = "" Тогда
			Объект.РазделительДочернихЭлементов = ", ";
		КонецЕсли;
		
	КонецЕсли;
	
	
	ДополнительныйФункционалПриИзмененииНаСервере()
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Получить файл из хранилища и поместить его в объект.
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайлВоВременномХранилище) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
		ТекущийОбъект.ВнешняяОбработкаВыгрузки = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	КонецЕсли;       

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//Удалить файл из временного хранилища
	Если ЭтоАдресВременногоХранилища(СсылкаНаФайлВоВременномХранилище) Тогда
		УдалитьИзВременногоХранилища(СсылкаНаФайлВоВременномХранилище);
		СсылкаНаФайлВоВременномХранилище = "";
	КонецЕсли;
КонецПроцедуры





&НаСервере
Функция ПолучитьДД()
	ОбъектСервер = РеквизитФормыВЗначение("Объект"); 
	ДД = ОбъектСервер.ВнешняяОбработкаВыгрузки.Получить();
    Возврат ДД;
КонецФункции

&НаКлиенте
Процедура СформироватьКомпоненту(Команда)
	
	
	Если ЭтаФорма.Модифицированность Тогда
		Сообщить("Сохраните предварительно настройку");		
	Иначе	
		
		//Создать компонент по умолчанию
		ТипКомпоненты = ПредопределенноеЗначение("Перечисление.ТипыДополнительногоФункционала.КомпонентВыгрузкиДанных");
		
		ДД = ПолучитьДД();
		ПараметрыВнутри = Новый Структура("Наименование, ТипДопФункционала, ДД, ИмяФайла", 
			Объект.Наименование, 
			ТипКомпоненты, 
			ДД,
			Объект.НаименованиеОбработки
		);
				
		Если ЗначениеЗаполнено(Объект.ДополнительныйФункционал) Тогда
			ПараметрыВнутри.Вставить("ДополнительныйФункционал", Объект.ДополнительныйФункционал);
		КонецЕсли;
		
		
		Объект.ДополнительныйФункционал = МаркетПлейсВызовСервера.СоздатьЭлементДополнительногоФункционала(ПараметрыВнутри);
		ЭтаФорма.Модифицированность = Истина;	
		
	КонецЕсли;	
		
КонецПроцедуры


&НаСервере
Процедура ДополнительныйФункционалПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(Объект.ДополнительныйФункционал) Тогда
		ЭтаФорма.Элементы.Настройки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДополнительныйФункционалПриИзменении(Элемент)
	ДополнительныйФункционалПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ДоступныеПоляЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		СсылкаФункция = Элемент.ТекущиеДанные.ПолеЗапроса;
		СписокДоступныхПолейВыборЗначенияНаСервере(СсылкаФункция);
	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура СформироватьШаблонПоЗапросуНаСервере()
	
	//ШаблонJSON = Новый Массив;
	ЭлементМассива = Новый Структура;
	Для Каждого СтрокаДоступныхПолей ИЗ ДоступныеПоляЗапроса Цикл
		ЭлементМассива.Вставить(СтрокаДоступныхПолей.ПолеЗапроса, "["+СтрокаДоступныхПолей.ПолеЗапроса +"]");
	КонецЦикла;
	//ШаблонJSON.Добавить(ЭлементМассива);
	
	JSON = УправлениеБТВызовСервера.ВJSON(ЭлементМассива);
	JSON = УправлениеБТВызовСервера.ДобавитьТабыВJSON(JSON);
	Объект.ШаблонВыгрузки = JSON;
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьШаблонПоЗапросу(Команда)
	СформироватьШаблонПоЗапросуНаСервере();
КонецПроцедуры


&НаСервере
Процедура СтруктурироватьНаСервере()
	ТД = Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Объект.ШаблонВыгрузки);
	Для ИндексСтроки = 1 ПО ТД.КоличествоСтрок()-1 Цикл
		ТД.ЗаменитьСтроку(ИндексСтроки, СокрЛП(ТД.ПолучитьСтроку(ИндексСтроки)));
	КонецЦикла;
	JSON = УправлениеБТВызовСервера.ДобавитьТабыВJSON(ТД.ПолучитьТекст());
	Объект.ШаблонВыгрузки = СокрЛП(JSON);
КонецПроцедуры


&НаКлиенте
Процедура Структурировать(Команда)
	СтруктурироватьНаСервере();
КонецПроцедуры

