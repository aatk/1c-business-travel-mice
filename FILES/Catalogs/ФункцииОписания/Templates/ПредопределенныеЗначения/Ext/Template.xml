<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://v8.1c.ru/8.2/data/spreadsheet" xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:v8ui="http://v8.1c.ru/8.1/data/ui" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<languageSettings>
		<currentLanguage>ru</currentLanguage>
		<defaultLanguage>ru</defaultLanguage>
		<languageInfo>
			<id>ru</id>
			<code>Русский</code>
			<description>Русский</description>
		</languageInfo>
	</languageSettings>
	<columns>
		<size>5</size>
		<columnsItem>
			<index>0</index>
			<column>
				<formatIndex>1</formatIndex>
			</column>
		</columnsItem>
		<columnsItem>
			<index>1</index>
			<column>
				<formatIndex>2</formatIndex>
			</column>
		</columnsItem>
		<columnsItem>
			<index>2</index>
			<column>
				<formatIndex>3</formatIndex>
			</column>
		</columnsItem>
		<columnsItem>
			<index>3</index>
			<column>
				<formatIndex>4</formatIndex>
			</column>
		</columnsItem>
	</columns>
	<rowsItem>
		<index>0</index>
		<row>
			<c>
				<c>
					<f>5</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ИмяПредопределенного</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>5</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Наименование</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>5</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ТипФункции</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>5</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>КодФункции</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>1</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаВремяОкончанияУслугиВddMMyyyy</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаВремяОкончанияУслуги в dd.MM.yyyy</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаДатаНачалаУслуги = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги,"Характеристика");
Если СтрокаДатаНачалаУслуги &lt;&gt; Неопределено Тогда
	Результат = Формат(СтрокаДатаНачалаУслуги.Значение, "ДФ='dd.MM.yyyy'");
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>2</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаВремяОкончанияУслугиВddMMyyyyHHmm</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаВремяОкончанияУслуги в dd.MM.yyyy HH:mm</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаДатаНачалаУслуги = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяОкончанияУслуги,"Характеристика");
Если СтрокаДатаНачалаУслуги &lt;&gt; Неопределено Тогда
	Результат = Формат(СтрокаДатаНачалаУслуги.Значение, "ДФ='dd.MM.yyyy HH:mm'");
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>3</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаНачалаУслугиВddMMyyyy</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаНачалаУслуги в dd.MM.yyyy</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаДатаНачалаУслуги = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги,"Характеристика");
Если СтрокаДатаНачалаУслуги &lt;&gt; Неопределено Тогда
	Результат = Формат(СтрокаДатаНачалаУслуги.Значение, "ДФ='dd.MM.yyyy'");
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>4</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаНачалаУслугиВddMMyyyyHHmm</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаНачалаУслуги в dd.MM.yyyy HH:mm</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаДатаНачалаУслуги = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаВремяНачалаУслуги,"Характеристика");
Если СтрокаДатаНачалаУслуги &lt;&gt; Неопределено Тогда
	Результат = Формат(СтрокаДатаНачалаУслуги.Значение, "ДФ='dd.MM.yyyy HH:mm'");
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>5</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НомерБилетаВладельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Номер билета Владельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВхНоменклатураИлиПолитика = Объект.УслугаВладелец;
СтрокаХарактеристики = ВхНоменклатураИлиПолитика.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.НомерДокумента, "Характеристика");
Если СтрокаХарактеристики &lt;&gt; Неопределено Тогда
	Результат = СтрокаХарактеристики.Значение; 	
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>6</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НомерБилетаПродажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Номер билета Продажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = "";
СтрокаХарактеристики = Объект.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.БилетПродажи, "Характеристика");
Если СтрокаХарактеристики &lt;&gt; Неопределено Тогда
	УслугаПродажи = СтрокаХарактеристики.Значение;

	СтрокаХарактеристики = УслугаПродажи.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.НомерДокумента, "Характеристика");
	Если СтрокаХарактеристики &lt;&gt; Неопределено Тогда
		Результат = СтрокаХарактеристики.Значение; 	
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>7</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НомерУслуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Номер услуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Объект.Номер; 	
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>8</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НомерУслугиВладельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Номер услуги Владельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВхНоменклатураИлиПолитика = Объект.УслугаВладелец;
Результат = ВхНоменклатураИлиПолитика.Номер; 	
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>9</index>
		<row>
			<c>
				<c>
					<f>8</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НомерУслугиПродажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Номер услуги Продажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = "";
СтрокаХарактеристики = Объект.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.БилетПродажи, "Характеристика");
Если СтрокаХарактеристики &lt;&gt; Неопределено Тогда
	УслугаПродажи = СтрокаХарактеристики.Значение;
	Если ЗначениеЗаполнено(УслугаПродажи) Тогда 
		Результат = УслугаПродажи.Номер; 
	КонецЕсли; 	
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>10</index>
		<row>
			<c>
				<c>
					<f>8</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СклонениеСуток</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Склонение суток</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаНочей = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Ночей,"Характеристика");
Если СтрокаНочей &lt;&gt; Неопределено Тогда
	ВДроби = Цел(СтрокаНочей.Значение) / 10;   //152 -&gt; 15.2
	ВДроби = ВДроби - Цел(ВДроби);             //15.2 -&gt; 0.2
	ВДроби = ВДроби * 10;
	Если ВДроби = 1 Тогда
		Результат = "сутки";
	Иначе
		Результат = "суток";
	КонецЕсли;		
КонецЕсли;

</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>11</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СписокКомандируемыхВУслуге</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СписокКомандируемыхВУслуге</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = "";

МассивФИО = Новый Массив;
Для Каждого СтрокаКомандируемых ИЗ Объект.Командируемые Цикл
	Если МассивФИО.Найти(СтрокаКомандируемых.Командируемый) = Неопределено Тогда
		МассивФИО.Добавить(СтрокаКомандируемых.Командируемый);
	КонецЕсли;
КонецЦикла;


Для Каждого СтрокаКомандируемых ИЗ МассивФИО Цикл
	Результат = Результат + ?(ЗначениеЗаполнено(Результат), ", ", "") + Строка(СтрокаКомандируемых);
КонецЦикла;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>12</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СписокКомандируемыхВУслугеENG</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Список командируемых в услуге ENG</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = "";

МассивФИО = Новый Массив;
Для Каждого СтрокаКомандируемых ИЗ Объект.Командируемые Цикл
	Если МассивФИО.Найти(СтрокаКомандируемых.Командируемый) = Неопределено Тогда
		МассивФИО.Добавить(СтрокаКомандируемых.Командируемый.ФИОНаАнг);
	КонецЕсли;
КонецЦикла;


Для Каждого СтрокаКомандируемых ИЗ МассивФИО Цикл
	Результат = Результат + ?(ЗначениеЗаполнено(Результат), ", ", "") + Строка(СтрокаКомандируемых);
КонецЦикла;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>13</index>
		<row>
			<c>
				<c>
					<f>8</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СтранаПрибытия</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Страна прибытия</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВсеХарактеристики = Объект.ОписаниеУслуги;

Результат = "";
СтрокаДатаНачалаУслуги = ВсеХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоПрибытия,"Характеристика");
Если СтрокаДатаНачалаУслуги &lt;&gt; Неопределено Тогда
	Результат = СтранаВМесте(СтрокаДатаНачалаУслуги.Значение);
КонецЕсли;

</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>14</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьОписаниеУслугиВладельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьОписаниеУслугиВладельца</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВхНоменклатураИлиПолитика = Объект.УслугаВладелец;
Характеристики = Объект.УслугаВладелец.ОписаниеУслуги.Выгрузить();
ЭкстраПоля = Объект.УслугаВладелец.ЭкстраПоля.Выгрузить(); 
Результат = УправлениеБТСервер.ПолучитьОписание(Объект.УслугаВладелец, ВхНоменклатураИлиПолитика, Характеристики, ЭкстраПоля);</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>15</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьОписаниеУслугиПрименения</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>6</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьОписаниеУслугиПрименения</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>7</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СтрокаХарактеристики = Объект.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.УслугаПрименения, "Характеристика");
Если СтрокаХарактеристики &lt;&gt; Неопределено Тогда
	ВхНоменклатураИлиПолитика = СтрокаХарактеристики.Значение;
	Характеристики = ВхНоменклатураИлиПолитика.ОписаниеУслуги.Выгрузить();
	ЭкстраПоля = ВхНоменклатураИлиПолитика.ЭкстраПоля.Выгрузить(); 
	Результат = УправлениеБТСервер.ПолучитьОписание(ВхНоменклатураИлиПолитика, ВхНоменклатураИлиПолитика, Характеристики, ЭкстраПоля);
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>16</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ЗаполнитьКомандированных</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Заполнить командированных при загрузке</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Неопределено;
Если ЗначениеJSON &lt;&gt; "" Тогда
	Результат = УправлениеБТСервер.ПолучитьКомандируемыхV3(ЗначениеJSON);
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>17</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ЗаполнитьЭкстраПоля</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Заполнить экстра поля</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Новый Массив;

Если ТипЗнч(ЗначениеJSON) = Тип("Массив") Тогда
	Для Каждого СтрокаЭкстраПоля ИЗ ЗначениеJSON Цикл
		
		НаименованиеПоля = СтрокаЭкстраПоля.Name;
		Значение = СтрокаЭкстраПоля.Value;
		Характеристика = ПланыВидовХарактеристик.НаборХарактеристикДляЭкстраПолей.НайтиПоНаименованию(НаименованиеПоля);
		НоваяСтрока = Новый Структура("Характеристика, Значение", Характеристика, Значение);
		
		Результат.Добавить(НоваяСтрока);
	КонецЦикла;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>18</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиНоменклатуруБТ</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти НоменклатуруБТ</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.НоменклатураБТ.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСистемы.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.НастройкиСистемы КАК НастройкиСистемы
	               |ГДЕ
	               |	НастройкиСистемы.Характеристика.ИмяПредопределенныхДанных = &amp;ИмяПредопределенныхДанных";
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных",ЗначениеJSON);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;	
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>19</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиКонтрагента</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти контрагента</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.Контрагенты.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.КПП = &amp;КПП
	               |	И Контрагенты.ИНН = &amp;ИНН";
	Запрос.УстановитьПараметр("КПП",ЗначениеJSON.KPP);
	Запрос.УстановитьПараметр("ИНН",ЗначениеJSON.INN);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Наименование = &amp;Наименование";
		Запрос.УстановитьПараметр("Наименование",ЗначениеJSON.Name);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>20</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиСтавкуНДС</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти ставку НДС</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Перечисления.СтавкиНДС.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтавкиНДСБТ.Ссылка КАК СтавкаНДС
	               |ИЗ
	               |	Справочник.СтавкиНДСБТ КАК СтавкиНДСБТ
	               |ГДЕ
	               |	СтавкиНДСБТ.ЗначениеJSON = &amp;ЗначениеJSON";
	Запрос.УстановитьПараметр("ЗначениеJSON",ЗначениеJSON);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.СтавкаНДС;
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>21</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СоздатьСписокДопУслуг</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Создать список доп услуг</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Документы.СписокДопУслуг.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	//Получим список услуг
	Запрос = Новый Запрос;

	ТЗ = Новый ТаблицаЗначений;
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	Для Каждого СтрокаЗН ИЗ ЗначениеJSON Цикл
		НсТЗ = ТЗ.Добавить();
		НсТЗ.Идентификатор = СтрокаЗН;
		Сообщить(СтрокаЗН);
	КонецЦикла;


	Запрос.УстановитьПараметр("Идентификаторы", ТЗ);
	Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.IDСинхронизации); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	Идентификаторы.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ Идентификаторы
	               |ИЗ
	               |	&amp;Идентификаторы КАК Идентификаторы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(ИнформацияПоУслуге.Услуга) КАК Услуга,
	               |	Идентификаторы.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ НайденныеУслуги
	               |ИЗ
	               |	Идентификаторы КАК Идентификаторы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |		ПО Идентификаторы.Идентификатор = ИнформацияПоУслуге.ЗначениеХарактеристики
	               |			И (ИнформацияПоУслуге.Характеристика = &amp;Характеристика)
	               |ГДЕ
	               |	ИнформацияПоУслуге.Характеристика = &amp;Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Идентификаторы.Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДопУслуги.Регистратор КАК СписокДопУслуг,
	               |	ДопУслуги.Услуга КАК Услуга,
	               |	НайденныеУслуги.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ Список
	               |ИЗ
	               |	НайденныеУслуги КАК НайденныеУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопУслуги КАК ДопУслуги
	               |		ПО (ДопУслуги.Услуга = НайденныеУслуги.Услуга)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Список.СписокДопУслуг КАК СписокДопУслуг,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДопУслуги.Услуга) КАК Услуга
	               |ПОМЕСТИТЬ КоличествоУслугВДокументе
	               |ИЗ
	               |	Список КАК Список
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопУслуги КАК ДопУслуги
	               |		ПО Список.СписокДопУслуг = ДопУслуги.Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Список.СписокДопУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Список.СписокДопУслуг КАК СписокДопУслуг,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Список.Услуга) КАК Услуга
	               |ПОМЕСТИТЬ КоличествоУслугНужно
	               |ИЗ
	               |	Список КАК Список
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Список.СписокДопУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КоличествоУслугВДокументе.СписокДопУслуг КАК СписокДопУслуг,
	               |	КоличествоУслугВДокументе.Услуга КАК ВДокументе,
	               |	КоличествоУслугНужно.Услуга КАК Нужно
	               |ПОМЕСТИТЬ ВсеВДокументе
	               |ИЗ
	               |	КоличествоУслугНужно КАК КоличествоУслугНужно
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоУслугВДокументе КАК КоличествоУслугВДокументе
	               |		ПО КоличествоУслугНужно.СписокДопУслуг = КоличествоУслугВДокументе.СписокДопУслуг
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсеВДокументе.СписокДопУслуг КАК СписокДопУслуг,
	               |	ВсеВДокументе.ВДокументе КАК ВДокументе,
	               |	ВсеВДокументе.Нужно КАК Нужно
	               |ИЗ
	               |	ВсеВДокументе КАК ВсеВДокументе
	               |ГДЕ
	               |	ВсеВДокументе.ВДокументе = ВсеВДокументе.Нужно";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.СписокДопУслуг;
	Иначе
		//Нет подходящих списков
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Идентификаторы", ТЗ);
		Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.IDСинхронизации); 
		Запрос.Текст = "ВЫБРАТЬ
		               |	Идентификаторы.Идентификатор КАК Идентификатор
		               |ПОМЕСТИТЬ Идентификаторы
		               |ИЗ
		               |	&amp;Идентификаторы КАК Идентификаторы
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МАКСИМУМ(ИнформацияПоУслуге.Услуга) КАК Услуга,
		               |	Идентификаторы.Идентификатор КАК Идентификатор
		               |ИЗ
		               |	Идентификаторы КАК Идентификаторы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
		               |		ПО Идентификаторы.Идентификатор = ИнформацияПоУслуге.ЗначениеХарактеристики
		               |			И (ИнформацияПоУслуге.Характеристика = &amp;Характеристика)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Идентификаторы.Идентификатор";
		ВыборкаУслуг = Запрос.Выполнить().Выбрать();
			
		НовыйДокумент = Документы.СписокДопУслуг.СоздатьДокумент();
		НовыйДокумент.Дата = ТекущаяДата();	
		Пока ВыборкаУслуг.Следующий() Цикл
			Сообщить(ВыборкаУслуг.Услуга);
			Сообщить(ВыборкаУслуг.Идентификатор);
		
			НоваяСтрока = НовыйДокумент.Услуги.Добавить();
			НоваяСтрока.Услуга = ВыборкаУслуг.Услуга;
			НоваяСтрока.КлючУслуги = ВыборкаУслуг.Идентификатор;
		КонецЦикла;
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
		Результат = НовыйДокумент.Ссылка;                                                          
		
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>22</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиУслугуV3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти услугу v3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Документы.Услуга.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеJSON); 
	Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.IDСинхронизации); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоУслуге.Услуга КАК Услуга,
	               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |ГДЕ
	               |	ИнформацияПоУслуге.Характеристика = &amp;Характеристика
	               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Услуга;
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>23</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиМестоV3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти место v3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.Места.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	МожноСоздать = Ложь;
	Если ТипЗнч(ЗначениеJSON) = Тип("Структура") Тогда
		МестоСтрокой = ЗначениеJSON.Place;
		МожноСоздать = Истина;
	Иначе
		МестоСтрокой = ЗначениеJSON;
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Значение", МестоСтрокой); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеМест.Место КАК Место,
	               |	ОписаниеМест.ТипОписания КАК ТипОписания,
	               |	ОписаниеМест.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ОписаниеМест КАК ОписаниеМест
	               |ГДЕ
	               |	ОписаниеМест.Значение = &amp;Значение";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Место;
	ИначеЕсли МожноСоздать Тогда
		//
		Данные = Новый Структура("name_rus, country_rus, city_rus, name_eng, country_eng, city_eng", ЗначениеJSON["Place"], ЗначениеJSON["Country"], ЗначениеJSON["City"]);
		Результат = УправлениеБТВызовСервера.СоздатьМесто(Данные, Справочники.ВидыМест.ЖДСтанция);
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>24</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиУслугуПоНомеруБилета</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти услугу по номеру билета</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Документы.Услуга.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.НомерДокумента); 
	Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеJSON); 
	Запрос.УстановитьПараметр("Характеристика2", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ТипБилета); 
	Запрос.УстановитьПараметр("ЗначениеХарактеристики2", "R"); 
	Запрос.УстановитьПараметр("Дата", Объект.Дата); 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформацияПоУслуге.Услуга КАК Услуга,
	               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
	               |	ИнформацияПоУслуге.Услуга.Дата КАК УслугаДата
	               |ПОМЕСТИТЬ УслугиСБилетами
	               |ИЗ
	               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |ГДЕ
	               |	ИнформацияПоУслуге.Характеристика = &amp;Характеристика
	               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики
	               |	И ВЫБОР
	               |			КОГДА &amp;Дата = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |					ИЛИ &amp;Дата = НЕОПРЕДЕЛЕНО
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ИнформацияПоУслуге.Услуга.Дата &lt; &amp;Дата
	               |		КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИнформацияПоУслуге.Услуга КАК Услуга,
	               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
	               |ИЗ
	               |	УслугиСБилетами КАК УслугиСБилетами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |		ПО УслугиСБилетами.Услуга = ИнформацияПоУслуге.Услуга
	               |ГДЕ
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики2
	               |	И ИнформацияПоУслуге.Характеристика = &amp;Характеристика2";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Услуга;
	КонецЕсли;
	
	Если Результат = Документы.Услуга.ПустаяСсылка() Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.НомерДокумента); 
		Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеJSON); 
		Запрос.УстановитьПараметр("Характеристика2", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ТипБилета); 
		Запрос.УстановитьПараметр("ЗначениеХарактеристики2", "S"); 
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИнформацияПоУслуге.Услуга КАК Услуга,
		               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
		               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		               |ПОМЕСТИТЬ УслугиСБилетами
		               |ИЗ
		               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
		               |ГДЕ
		               |	ИнформацияПоУслуге.Характеристика = &amp;Характеристика
		               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ИнформацияПоУслуге.Услуга КАК Услуга,
		               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
		               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		               |ИЗ
		               |	УслугиСБилетами КАК УслугиСБилетами
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
		               |		ПО УслугиСБилетами.Услуга = ИнформацияПоУслуге.Услуга
		               |ГДЕ
		               |	ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики2
		               |	И ИнформацияПоУслуге.Характеристика = &amp;Характеристика2";
		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Результат = Выборка.Услуга;
		КонецЕсли;
		
		Если Результат = Документы.Услуга.ПустаяСсылка() Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.НомерДокумента); 
			Запрос.УстановитьПараметр("ЗначениеХарактеристики", ЗначениеJSON); 
			Запрос.УстановитьПараметр("Характеристика2", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ТипБилета); 
			Запрос.УстановитьПараметр("ЗначениеХарактеристики2", "E"); 
			Запрос.Текст = "ВЫБРАТЬ
			               |	ИнформацияПоУслуге.Услуга КАК Услуга,
			               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
			               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
			               |ПОМЕСТИТЬ УслугиСБилетами
			               |ИЗ
			               |	РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
			               |ГДЕ
			               |	ИнформацияПоУслуге.Характеристика = &amp;Характеристика
			               |	И ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ИнформацияПоУслуге.Услуга КАК Услуга,
			               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
			               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
			               |ИЗ
			               |	УслугиСБилетами КАК УслугиСБилетами
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
			               |		ПО УслугиСБилетами.Услуга = ИнформацияПоУслуге.Услуга
			               |ГДЕ
			               |	ИнформацияПоУслуге.ЗначениеХарактеристики = &amp;ЗначениеХарактеристики2
			               |	И ИнформацияПоУслуге.Характеристика = &amp;Характеристика2";
			Выборка = Запрос.Выполнить().Выбрать();

			Если Выборка.Следующий() Тогда
				Результат = Выборка.Услуга;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>25</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаV3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Дата v3</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = ТекущаяДата();
Если ЗначениеJSON &lt;&gt; "" Тогда 
	Результат = Дата(ЗначениеJSON);
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>26</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НажатьКнопкуСформироватьКомиссииВУслуге</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Нажать кнопку сформировать комиссии в услуге</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияСобытияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>УправлениеБТСервер.СформироватьКомиссииНаСервере(РеальныйОбъект);</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>27</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НажатьКнопкуСформироватьНаименованиеУслуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Нажать кнопку сформировать наименование услуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияСобытияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ЭкстраПоля = РеальныйОбъект.ЭкстраПоля.Выгрузить();			
Характеристики = РеальныйОбъект.ОписаниеУслуги.Выгрузить();
ПолноеНаименованиеУслуги = УправлениеБТСервер.ПолучитьОписание(РеальныйОбъект, РеальныйОбъект.НоменклатураБТ, Характеристики, ЭкстраПоля);
РеальныйОбъект.ПолноеНаименованиеУслуги = ПолноеНаименованиеУслуги;
РеальныйОбъект.Записать(РежимЗаписиДокумента.Запись);</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>28</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НажатьКнопкуЗаполнитьСвязанныеУслуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Нажать кнопку заполнить связанные услуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияСобытияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>УправлениеБТСервер.ЗаполнитьОписаниеУслугиНаСервере(РеальныйОбъект); 
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>29</index>
		<row>
			<c>
				<c>
					<f>1</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ЗапретИзмененияЗначенияХарактеристики</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>2</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Запрет изменения значений характеристики</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункицияСобытияБТ</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ХарактеристикаНоменклатуры = Параметры.Характеристика;

Запрос = Новый Запрос;
Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры",);
Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);

Запрос.Текст = "ВЫБРАТЬ
               |	ЗапрещенныеХарактеристики.ЗапрещеноИзменять КАК ЗапрещеноИзменять
               |ИЗ
               |	РегистрСведений.ЗапрещенныеХарактеристики КАК ЗапрещенныеХарактеристики
               |ГДЕ
               |	ЗапрещенныеХарактеристики.ХарактеристикаНоменклатуры = &amp;ХарактеристикаНоменклатуры
               |	И ЗапрещенныеХарактеристики.Пользователь = &amp;Пользователь";
Выборка = Запрос.Выполнить().Выбрать();
Результат = Ложь;
Если Выборка.Следующий() Тогда
	Результат = Выборка.ЗапрещеноИзменять;	
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>30</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьСегментыV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Сформировать сегменты V2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Результат = Неопределено;
	Если ТипЗнч(Параметры.ЗначениеJSON) = Тип("Массив") Тогда
		СписокСегментов = Параметры.ЗначениеJSON;  
	Иначе	
		СписокСегментов = Новый Массив;
		СписокСегментов.Добавить(Параметры.ЗначениеJSON);  
	КонецЕсли;	
	
	Если СписокСегментов.Количество() &gt; 0 Тогда
		//	
		Услуга = Параметры.Услуга.Ссылка;		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание", Услуга.Ссылка);
		Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Сегменты);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СписокДопУслуг.Ссылка КАК Значение
		               |ИЗ
		               |	Документ.СписокДопУслуг КАК СписокДопУслуг
		               |ГДЕ
		               |	СписокДопУслуг.Основание = &amp;Основание
		               |	И СписокДопУслуг.Характеристика = &amp;Характеристика";
		НайденныеСтроки = Запрос.Выполнить().Выгрузить();			   
		
		Если НайденныеСтроки.Количество()&gt;0 Тогда
			ДопСписок = НайденныеСтроки[0].Значение;
			ДопСписокОбъект = ДопСписок.ПолучитьОбъект();
		Иначе
			ДопСписокОбъект = Документы.СписокДопУслуг.СоздатьДокумент();
			ДопСписокОбъект.Дата = ТекущаяДата();
			ДопСписокОбъект.Основание = Услуга.Ссылка;
			ДопСписокОбъект.Характеристика = ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Сегменты;
		КонецЕсли;	
			
		Для Каждого УслугаТЧ ИЗ ДопСписокОбъект.Услуги Цикл
			УслугаТЧ.Удален = Истина;
		КонецЦикла;
		
		Для Каждого Сегмент ИЗ СписокСегментов Цикл
			//
			ПЗ = Новый ПараметрыЗаписиJSON();
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку(ПЗ);
			ЗаписатьJSON(ЗаписьJSON, Сегмент);
			ЖСОН = ЗаписьJSON.Закрыть();
			
			МД5 = Строка(УправлениеБТВызовСервера.MD5ХешСтрока(ЖСОН));
			Сегмент.Вставить("МД5", МД5);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку(ПЗ);
			ЗаписатьJSON(ЗаписьJSON, Сегмент);
			ОбъектЖСОН = ЗаписьJSON.Закрыть();
			
			Если ТипЗнч(КодНастройки) = Тип("Строка") Тогда
				ОбъектЗагрузки = Справочники.НастройкиЗагрузокУслуг.НайтиПоКоду(КодНастройки);
			ИначеЕсли ТипЗнч(КодНастройки) = Тип("УникальныйИдентификатор") Тогда
				ОбъектЗагрузки = Справочники.НастройкиЗагрузокУслуг.ПолучитьСсылку(КодНастройки); 
			КонецЕсли;
			
			Результат = УправлениеБТСервер.ЗагрузитьДанныеВУслугу(ОбъектЖСОН, , ОбъектЗагрузки);
			
			Если Результат.Результат Тогда
				Услуги = Результат.Объекты;
				Для Каждого НоваяУслуга ИЗ Услуги Цикл 
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Услуга", НоваяУслуга.Ссылка);
					НайденныеСтроки = ДопСписокОбъект.Услуги.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество()&gt;0 Тогда						
						Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
							НайденнаяСтрока.Удален = Ложь;
							НайденнаяСтрока.КлючУслуги = МД5;
						КонецЦикла;
					Иначе
						НоваяСтрокаСУслугой = ДопСписокОбъект.Услуги.Добавить(); 
						НоваяСтрокаСУслугой.Услуга = НоваяУслуга.Ссылка;
						НоваяСтрокаСУслугой.Удален = Ложь;
						НоваяСтрокаСУслугой.КлючУслуги = МД5;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ДопСписокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Результат = ДопСписокОбъект.Ссылка;
		
	КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>31</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьМаршрутV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Сформировать маршрут v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	//0 - Маршрут
	//1 - Дата начала
	//2 - Дата окончания
	//3 - Место начала
	//4 - Место окончания
	//5 - Маршрут из Городов
	//6 - МВЛ или ВВЛ
	//7 - Маршрут из Городов ИАТА
	
	МаршрутСтрокой = "";
	
	Услуга = Параметры.Услуга.Ссылка;
	
	Характеристики = Новый Массив;
	Характеристики.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаОтправления);
	Характеристики.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаПрибытия);
	Характеристики.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоОтправления);
	Характеристики.Добавить(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоПрибытия);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Услуга.Ссылка);
	Запрос.УстановитьПараметр("Характеристика", ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.Сегменты);
	Запрос.УстановитьПараметр("Характеристики", Характеристики);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СписокДопУслугУслуги.Услуга КАК Услуга,
	               |	ИнформацияПоУслуге.Характеристика КАК Характеристика,
	               |	ИнформацияПоУслуге.ЗначениеХарактеристики КАК ЗначениеХарактеристики
	               |ПОМЕСТИТЬ ОбщаяТаблица
	               |ИЗ
	               |	Документ.СписокДопУслуг.Услуги КАК СписокДопУслугУслуги
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияПоУслуге КАК ИнформацияПоУслуге
	               |		ПО СписокДопУслугУслуги.Услуга = ИнформацияПоУслуге.Услуга
	               |ГДЕ
	               |	СписокДопУслугУслуги.Ссылка.Основание = &amp;Основание
	               |	И СписокДопУслугУслуги.Ссылка.Характеристика = &amp;Характеристика
	               |	И СписокДопУслугУслуги.Удален = ЛОЖЬ
	               |	И ИнформацияПоУслуге.Характеристика В(&amp;Характеристики)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщаяТаблица.Услуга КАК Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаОтправления)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК ДатаОтправления
	               |ПОМЕСТИТЬ ДатаОтправленияТЗ
	               |ИЗ
	               |	ОбщаяТаблица КАК ОбщаяТаблица
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаОтправления)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщаяТаблица.Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаОтправления)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщаяТаблица.Услуга КАК Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаПрибытия)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК ДатаПрибытия
	               |ПОМЕСТИТЬ ДатаПрибытияТЗ
	               |ИЗ
	               |	ОбщаяТаблица КАК ОбщаяТаблица
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаПрибытия)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщаяТаблица.Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.ДатаПрибытия)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщаяТаблица.Услуга КАК Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоОтправления)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК МестоОтправления
	               |ПОМЕСТИТЬ МестоОтправленияТЗ
	               |ИЗ
	               |	ОбщаяТаблица КАК ОбщаяТаблица
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоОтправления)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщаяТаблица.Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоОтправления)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбщаяТаблица.Услуга КАК Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоПрибытия)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ КАК МестоПрибытия
	               |ПОМЕСТИТЬ МестоПрибытияТЗ
	               |ИЗ
	               |	ОбщаяТаблица КАК ОбщаяТаблица
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоПрибытия)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОбщаяТаблица.Услуга,
	               |	ВЫБОР
	               |		КОГДА ОбщаяТаблица.Характеристика = ЗНАЧЕНИЕ(ПланВидовХарактеристик.НаборХарактеристикДляНоменклатуры.МестоПрибытия)
	               |			ТОГДА ОбщаяТаблица.ЗначениеХарактеристики
	               |		ИНАЧЕ NULL
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДатаОтправленияТЗ.Услуга КАК Услуга,
	               |	ДатаОтправленияТЗ.ДатаОтправления КАК ДатаОтправления,
	               |	МестоОтправленияТЗ.МестоОтправления КАК МестоОтправления,
	               |	МестоПрибытияТЗ.МестоПрибытия КАК МестоПрибытия,
	               |	ДатаПрибытияТЗ.ДатаПрибытия КАК ДатаПрибытия
	               |ИЗ
	               |	ДатаОтправленияТЗ КАК ДатаОтправленияТЗ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МестоОтправленияТЗ КАК МестоОтправленияТЗ
	               |		ПО ДатаОтправленияТЗ.Услуга = МестоОтправленияТЗ.Услуга
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МестоПрибытияТЗ КАК МестоПрибытияТЗ
	               |		ПО ДатаОтправленияТЗ.Услуга = МестоПрибытияТЗ.Услуга
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ДатаПрибытияТЗ КАК ДатаПрибытияТЗ
	               |		ПО ДатаОтправленияТЗ.Услуга = ДатаПрибытияТЗ.Услуга
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДатаОтправленияТЗ.Услуга,
	               |	ДатаОтправленияТЗ.ДатаОтправления,
	               |	МестоОтправленияТЗ.МестоОтправления,
	               |	МестоПрибытияТЗ.МестоПрибытия,
	               |	ДатаПрибытияТЗ.ДатаПрибытия
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОтправления";
	НайденныеСтроки = Запрос.Выполнить().Выгрузить();			   
	
	Если НайденныеСтроки.Количество()&gt;0 Тогда
		
		Если ТипЗапроса = 0 Тогда
			Маршрут = Новый Массив;
			ПредыдущееМесто = Справочники.Места.ПустаяСсылка();
			Для Каждого СтрокаМаршрута ИЗ НайденныеСтроки Цикл
				
				Если ПредыдущееМесто &lt;&gt; СтрокаМаршрута.МестоОтправления Тогда
					Маршрут.Добавить(СтрокаМаршрута.МестоОтправления);	
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", СтрокаМаршрута.МестоОтправления, " - "+СтрокаМаршрута.МестоОтправления);
					ПредыдущееМесто = СтрокаМаршрута.МестоОтправления;
				КонецЕсли;
				
				Если ПредыдущееМесто &lt;&gt; СтрокаМаршрута.МестоПрибытия Тогда
					Маршрут.Добавить(СтрокаМаршрута.МестоПрибытия);	
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", СтрокаМаршрута.МестоПрибытия, " - "+СтрокаМаршрута.МестоПрибытия);
					ПредыдущееМесто = СтрокаМаршрута.МестоПрибытия;
				КонецЕсли;
				
			КонецЦикла;
			//Маршрут.Добавить(СтрокаМаршрута.МестоПрибытия);
			//МаршрутСтрокой = МаршрутСтрокой +" - "+ СтрокаМаршрута.МестоПрибытия;
			
		ИначеЕсли ТипЗапроса = 1 Тогда			
			МаршрутСтрокой = НайденныеСтроки[0].ДатаОтправления;
			
		ИначеЕсли ТипЗапроса = 2 Тогда
			МаршрутСтрокой = НайденныеСтроки[НайденныеСтроки.Количество()-1].ДатаПрибытия;
			
		ИначеЕсли ТипЗапроса = 3 Тогда
			МаршрутСтрокой = НайденныеСтроки[0].МестоОтправления;
			
		ИначеЕсли ТипЗапроса = 4 Тогда
			МаршрутСтрокой = НайденныеСтроки[НайденныеСтроки.Количество()-1].МестоПрибытия;
			
		ИначеЕсли ТипЗапроса = 5 Тогда
			Маршрут = Новый Массив;
			ПредыдущееМесто = Справочники.Места.ПустаяСсылка();
			Для Каждого СтрокаМаршрута ИЗ НайденныеСтроки Цикл
				
				МестоОтправления = ГородВМесте(СтрокаМаршрута.МестоОтправления);
				Если ПредыдущееМесто &lt;&gt; МестоОтправления Тогда
					Маршрут.Добавить(МестоОтправления);	
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", МестоОтправления, " - "+МестоОтправления);
					ПредыдущееМесто = МестоОтправления;
				КонецЕсли;
				
				МестоПрибытия = ГородВМесте(СтрокаМаршрута.МестоПрибытия);
				Если ПредыдущееМесто &lt;&gt; МестоПрибытия Тогда
					Маршрут.Добавить(МестоПрибытия);	
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", МестоПрибытия, " - "+МестоПрибытия);
					ПредыдущееМесто = МестоПрибытия;
				КонецЕсли;
				
			КонецЦикла;
			//МестоПрибытия = ГородВМесте(СтрокаМаршрута.МестоПрибытия);
			//Маршрут.Добавить(МестоПрибытия);
			//МаршрутСтрокой = МаршрутСтрокой +" - "+ МестоПрибытия;
			
		ИначеЕсли ТипЗапроса = 6 Тогда
			Маршрут = Новый Массив;
			ПредыдущееМесто = Справочники.Места.ПустаяСсылка();
			Для Каждого СтрокаМаршрута ИЗ НайденныеСтроки Цикл
				Если ПредыдущееМесто &lt;&gt; СтрокаМаршрута.МестоОтправления Тогда
					МестоОтправления = СтранаВМесте(СтрокаМаршрута.МестоОтправления);
					Маршрут.Добавить(МестоОтправления);	
				КонецЕсли;
			КонецЦикла;
			МестоПрибытия = СтранаВМесте(СтрокаМаршрута.МестоПрибытия);
			Маршрут.Добавить(МестоПрибытия);
			
			МаршрутСтрокой = Маршрут;
			
		ИначеЕсли ТипЗапроса = 7 Тогда
			Маршрут = Новый Массив;
			ПредыдущееМесто = Справочники.Места.ПустаяСсылка();
			Для Каждого СтрокаМаршрута ИЗ НайденныеСтроки Цикл
				
				МестоОтправленияАэропортИАТА = ХарактеристикаМеста(СтрокаМаршрута.МестоОтправления, Справочники.ТипыОписания.IATA);
				МестоОтправления = ГородВМесте(СтрокаМаршрута.МестоОтправления);
				Если ПредыдущееМесто &lt;&gt; МестоОтправления Тогда
					Маршрут.Добавить(МестоОтправления);	
					МестоОтправленияИАТА = ХарактеристикаМеста(МестоОтправления, Справочники.ТипыОписания.CityIATA);
					
					Если МестоОтправленияИАТА = "" И МестоОтправленияАэропортИАТА = "" Тогда
						МестоОтправленияИАТА = Строка(МестоОтправления);
					ИначеЕсли МестоОтправленияИАТА = "" И МестоОтправленияАэропортИАТА &lt;&gt; "" Тогда 
						МестоОтправленияИАТА = МестоОтправленияАэропортИАТА;
					КонецЕсли;	
					
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", МестоОтправленияИАТА, " - "+МестоОтправленияИАТА);
					ПредыдущееМесто = МестоОтправления;
				КонецЕсли;
				
				МестоПрибытияАэропортИАТА = ХарактеристикаМеста(СтрокаМаршрута.МестоПрибытия, Справочники.ТипыОписания.IATA);
				МестоПрибытия = ГородВМесте(СтрокаМаршрута.МестоПрибытия);
				Если ПредыдущееМесто &lt;&gt; МестоПрибытия Тогда
					Маршрут.Добавить(МестоПрибытия);	
					МестоПрибытияИАТА = ХарактеристикаМеста(МестоПрибытия, Справочники.ТипыОписания.CityIATA);
					
					Если МестоПрибытияИАТА = "" И МестоПрибытияАэропортИАТА = "" Тогда
						МестоПрибытияИАТА = Строка(МестоПрибытия); 
					ИначеЕсли МестоПрибытияИАТА = "" И МестоПрибытияАэропортИАТА &lt;&gt; "" Тогда 
						МестоПрибытияИАТА = МестоПрибытияАэропортИАТА;
					КонецЕсли;	
					
					МаршрутСтрокой = МаршрутСтрокой + ?(МаршрутСтрокой = "", МестоПрибытияИАТА, " - "+МестоПрибытияИАТА);
					ПредыдущееМесто = МестоПрибытия;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
	КонецЕсли;
			
	Результат = МаршрутСтрокой;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>32</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ГородВМестеV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Город в месте v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Если Место = Неопределено Тогда
		Место = Справочники.Места.ПустаяСсылка();
	КонецЕсли;
	
	Город = Место; 
	
	ЗакончитьОбход = Ложь;
	Пока НЕ ЗакончитьОбход Цикл
		Если Город.ВидМеста = Справочники.ВидыМест.Город ИЛИ Город = Справочники.Места.ПустаяСсылка() Тогда
			ЗакончитьОбход = Истина;
		Иначе
			Город = Город.Родитель;
		КонецЕсли;
	КонецЦикла;	
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>33</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СтранаВМестеV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Страна в месте v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Если Место = Неопределено Тогда
		Место = Справочники.Места.ПустаяСсылка();
	КонецЕсли;
	Страна = Место; 
	
	ЗакончитьОбход = Ложь;
	Пока НЕ ЗакончитьОбход Цикл
		Если Страна.ВидМеста = Справочники.ВидыМест.Страна ИЛИ Страна = Справочники.Места.ПустаяСсылка() Тогда
			ЗакончитьОбход = Истина;
		Иначе
			Страна = Страна.Родитель;
		КонецЕсли;
	КонецЦикла;	
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>34</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СоздатьЗаказИзКорзиныИЗаказКомандируемогоV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Создать заказ из корзины и заказ командируемого v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	ЗнечениеJSON = Параметры.ЗначениеJSON;
	
	УслугаОбъект = Параметры.Услуга;
	Если ПроводитьДокумент Тогда
		Если УслугаОбъект.ПометкаУдаления Тогда
			УслугаОбъект.Записать(РежимЗаписиДокумента.Запись);	
		Иначе	
			УслугаОбъект.Записать(РежимЗаписиДокумента.Проведение);	
		КонецЕсли;
	КонецЕсли;
	УслугаСсылка = УслугаОбъект.Ссылка;
	
	Командируемый = Справочники.Командированные.ПустаяСсылка();
	Командируемые = Параметры.Услуга.Командируемые;
	Если Командируемые.Количество()&gt;0 Тогда
		Командируемый = Командируемые[0].Командируемый;
	КонецЕсли;
	
	СоздаемНовыйЗаказ = Ложь;
	Если ЗначениеЗаполнено(Командируемый) Тогда
	
		Если НЕ ЗначениеЗаполнено(УслугаСсылка.ЗаказИзКорзины) Тогда
			
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ЗаказИзКорзины.Ссылка КАК ЗаказИзКорзины,
				               |	ЗаказИзКорзины.Дата,
				               |	ЗаказИзКорзины.Командируемый
				               |ИЗ
				               |	Документ.ЗаказИзКорзины КАК ЗаказИзКорзины
				               |ГДЕ
				               |	НАЧАЛОПЕРИОДА(ЗаказИзКорзины.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&amp;Дата, ДЕНЬ)
				               |	И ЗаказИзКорзины.Командируемый = &amp;Командируемый";
				Запрос.УстановитьПараметр("Дата", УслугаСсылка.Дата);
				Запрос.УстановитьПараметр("Командируемый", Командируемый);
				Выборка = Запрос.Выполнить().Выбрать();	
				
				ИсточникЗаказа = Справочники.ИсточникиЗаказов.offline;
				
				
			Если Выборка.Следующий() Тогда
				СсылкаНаЗаказ = Выборка.ЗаказИзКорзины;
				ЗаказОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
				ЗаказОбъект.Командируемый = Командируемый;
				ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				
				Если НаименованиеИсточника &lt;&gt; "" Тогда 
					ИсточникЗаказа = Справочники.ИсточникиЗаказов.НайтиПоНаименованию(НаименованиеИсточника);
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	РеквизитыЗаказИзКорзины.ЗаказИзКорзины,
					               |	РеквизитыЗаказИзКорзины.ИсточникЗаказа,
					               |	РеквизитыЗаказИзКорзины.IDСинхранизации
					               |ИЗ
					               |	РегистрСведений.РеквизитыЗаказИзКорзины КАК РеквизитыЗаказИзКорзины
					               |ГДЕ
					               |	РеквизитыЗаказИзКорзины.ИсточникЗаказа = &amp;ИсточникЗаказа
					               |	И РеквизитыЗаказИзКорзины.IDСинхранизации = &amp;IDСинхранизации";
					Запрос.УстановитьПараметр("ИсточникЗаказа", ИсточникЗаказа);
					Запрос.УстановитьПараметр("IDСинхранизации", ЗнечениеJSON);
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						СсылкаНаЗаказ = Выборка.ЗаказИзКорзины;
						ЗаказОбъект = СсылкаНаЗаказ.ПолучитьОбъект();
						ЗаказОбъект.Командируемый = Командируемый;
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						СоздаемНовыйЗаказ = Истина;
						
					КонецЕсли;	
				Иначе
					СоздаемНовыйЗаказ = Истина;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если СоздаемНовыйЗаказ Тогда
				Заказ = Документы.ЗаказИзКорзины.СоздатьДокумент();
				Заказ.Дата = УслугаСсылка.Дата;
				Заказ.Командируемый = Командируемый;
				Заказ.Записать(РежимЗаписиДокумента.Проведение);
				СсылкаНаЗаказ = Заказ.Ссылка; 
				
				МЗ = РегистрыСведений.РеквизитыЗаказИзКорзины.СоздатьМенеджерЗаписи();
				МЗ.ЗаказИзКорзины = СсылкаНаЗаказ;
				МЗ.Прочитать();
				МЗ.ЗаказИзКорзины = СсылкаНаЗаказ;
				МЗ.ИсточникЗаказа = ИсточникЗаказа;
				МЗ.IDСинхранизации = ЗнечениеJSON;
				МЗ.Записать(Истина);
				
			КонецЕсли;
			
		Иначе
			СсылкаНаЗаказ = УслугаСсылка.ЗаказИзКорзины;
		КонецЕсли;	
		Результат = СсылкаНаЗаказ;
	
	КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>35</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СоздатьЗаказКомандируемогоV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Создать заказ командируемого v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	УслугаОбъект = Параметры.Услуга;
	УслугаСсылка =  УслугаОбъект.Ссылка;
	СсылкаНаЗаказ = УслугаОбъект.ЗаказИзКорзины;	
	
	
	ТаблицаКомандируемых = УслугаСсылка.Командируемые.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаКомандируемых.Командируемый
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	&amp;ТаблицаКомандируемых КАК ТаблицаКомандируемых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ.Командируемый,
	               |	ЗНАЧЕНИЕ(Документ.ЗаказКомандированногоБТ.ПустаяСсылка) КАК Командировка
	               |ИЗ
	               |	ВТ КАК ВТ";
	Запрос.УстановитьПараметр("ТаблицаКомандируемых", ТаблицаКомандируемых);
	ТаблицаКомандируемых = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	Для Каждого ТекКомандируемый Из ТаблицаКомандируемых Цикл
		ЗаказКомандированного = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
		Если ЗначениеЗаполнено(СсылкаНаЗаказ) Тогда 
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Услуга",УслугаСсылка);
			Запрос.УстановитьПараметр("Командируемый",ТекКомандируемый.Командируемый);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ИспользованыеУслуги.Регистратор
			               |ИЗ
			               |	РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
			               |ГДЕ
			               |	ИспользованыеУслуги.Услуга = &amp;Услуга
			               |	И ИспользованыеУслуги.Командируемый = &amp;Командируемый";
						   
			//ТаблицаЗаказКомандированного = Запрос.Выполнить().Выгрузить();

			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда  
				ЗаказКомандированного = Выборка.Регистратор.ПолучитьОбъект();
			Иначе
			
				//Если ТаблицаЗаказКомандированного.Количество() = 0 Тогда
				//Если нет этой услуги в каком-то заказе, надо поискать по заказу из корзины
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ЗаказИзКорзины",СсылкаНаЗаказ);
				Запрос.УстановитьПараметр("Командируемый",ТекКомандируемый.Командируемый);
				Запрос.Текст = "ВЫБРАТЬ
				               |	ИспользованыеУслуги.Регистратор КАК ЗаказКомандированного
				               |ИЗ
				               |	РегистрСведений.УслугиДляЗаказовИзКорзины КАК УслугиДляЗаказовИзКорзины
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
				               |		ПО УслугиДляЗаказовИзКорзины.Услуга = ИспользованыеУслуги.Услуга
				               |ГДЕ
				               |	УслугиДляЗаказовИзКорзины.ЗаказИзКорзины = &amp;ЗаказИзКорзины
				               |	И НЕ ИспользованыеУслуги.Регистратор ЕСТЬ NULL
				               |	И ИспользованыеУслуги.Командируемый = &amp;Командируемый
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ИспользованыеУслуги.Регистратор";
							   
				//ТаблицаЗаказКомандированного = Запрос.Выполнить().Выгрузить();
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда 
				    ЗаказКомандированного = Выборка.ЗаказКомандированного.ПолучитьОбъект();
				Иначе
					ЗаказКомандированного = Документы.ЗаказКомандированногоБТ.СоздатьДокумент();
					ЗаказКомандированного.Дата = УслугаСсылка.Дата;
					ЗаказКомандированного.ЗаказИзКорзины = СсылкаНаЗаказ;
				КонецЕсли;
				
			КонецЕсли;	
				
			ДанныеЗаполнения = Новый Массив;
			ДанныеЗаполнения.Добавить(УслугаСсылка);
			ЗаказКомандированного.Заполнить(ДанныеЗаполнения);
			
			//УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЗаказКомандированного);
			УправлениеБТСервер.ЗаполнитьОписаниеНаСервереПоУслуге(ЗаказКомандированного, ДанныеЗаполнения);
			ЗаказКомандированного.Командированный = ТекКомандируемый.Командируемый;
			
			ТаблицаМаршрута = УправлениеБТСервер.ПостроитьМаршрут(ЗаказКомандированного);
			ЗаказКомандированного.Маршрут.Загрузить(ТаблицаМаршрута);
			Если Не ТаблицаМаршрута.Количество() = 0 Тогда
				МинДатаНачала = '00010101'; МаксДатаОкончания = '00010101';
				Для Каждого ТекСтрокаМаршрута Из ТаблицаМаршрута Цикл 
					Если МинДатаНачала = '00010101' Тогда
						МинДатаНачала = ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута;
					ИначеЕсли МинДатаНачала &gt; ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута Тогда
						МинДатаНачала = ТекСтрокаМаршрута.ДатаВремяНачалаМаршрута;
					КонецЕсли;
					Если МаксДатаОкончания = '00010101' Тогда
						МаксДатаОкончания = ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута;
					ИначеЕсли МаксДатаОкончания &lt; ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута Тогда
						МаксДатаОкончания = ТекСтрокаМаршрута.ДатаВремяОкончанияМаршрута;
					КонецЕсли;
				КонецЦикла;
				ЗаказКомандированного.ДатаНачалаМаршрута = МинДатаНачала;
				ЗаказКомандированного.ДатаОкончанияМаршрута = МаксДатаОкончания;
			КонецЕсли;
			
			ЗаказКомандированного.Записать(РежимЗаписиДокумента.Проведение);
			
			ТекКомандируемый.Командировка = ЗаказКомандированного.Ссылка;
		
		КонецЕсли;
		
		//Если ЗаказКомандированного.ПроверитьЗаполнение() Тогда
		//	ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
		//	//УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЗаказКомандированного);
		//	ЗаказКомандированного.Записать(РежимЗаписиДокумента.Проведение);
		//Иначе	
		//	ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
		//	//УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЗаказКомандированного);
		//	ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
		//КонецЕсли;	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>36</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СоздатьЗаказКлиентаБТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Создать заказ клиента БТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	УслугаОбъект = Параметры.Услуга;
	УслугаСсылка =  УслугаОбъект.Ссылка;
	СсылкаНаЗаказ = УслугаОбъект.ЗаказИзКорзины;	
	ЗаказКомандированного = Документы.ЗаказКомандированногоБТ.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СсылкаНаЗаказ) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Услуга",УслугаСсылка);
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИспользованыеУслуги.Регистратор
		               |ИЗ
		               |	РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
		               |ГДЕ
		               |	ИспользованыеУслуги.Услуга = &amp;Услуга";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда  
			ЗаказКомандированного = Выборка.Регистратор.ПолучитьОбъект();
		Иначе
			//Если нет этой услуги в каком-то заказе, надо поискать по заказу из корзины
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗаказИзКорзины",СсылкаНаЗаказ);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ИспользованыеУслуги.Регистратор КАК ЗаказКомандированного
			               |ИЗ
			               |	РегистрСведений.УслугиДляЗаказовИзКорзины КАК УслугиДляЗаказовИзКорзины
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованыеУслуги КАК ИспользованыеУслуги
			               |		ПО УслугиДляЗаказовИзКорзины.Услуга = ИспользованыеУслуги.Услуга
			               |ГДЕ
			               |	УслугиДляЗаказовИзКорзины.ЗаказИзКорзины = &amp;ЗаказИзКорзины
			               |	И НЕ ИспользованыеУслуги.Регистратор ЕСТЬ NULL 
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ИспользованыеУслуги.Регистратор";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда 
			    ЗаказКомандированного = Выборка.ЗаказКомандированного.ПолучитьОбъект();
			Иначе
				ЗаказКомандированного = Документы.ЗаказКомандированногоБТ.СоздатьДокумент();
				ЗаказКомандированного.Дата = УслугаСсылка.Дата;
				ЗаказКомандированного.ЗаказИзКорзины = СсылкаНаЗаказ;
			КонецЕсли;
			
		КонецЕсли;	
		
		ДанныеЗаполнения = Новый Массив;
		ДанныеЗаполнения.Добавить(УслугаСсылка);
		ЗаказКомандированного.Заполнить(ДанныеЗаполнения);
		
		Если ЗаказКомандированного.ПроверитьЗаполнение() Тогда
			ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
			УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЗаказКомандированного);
			ЗаказКомандированного.Записать(РежимЗаписиДокумента.Проведение);
		Иначе	
			ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
			УправлениеБТСервер.ЗаполнитьОписаниеНаСервере(ЗаказКомандированного);
			ЗаказКомандированного.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;	
	КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>37</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиИлиСоздатьКонтрагентаV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти или создать контрагента v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	
	Наименование = Описание.Наименование;
	НаименованиеПартнера = Описание.НаименованиеПартнера;
	ИНН = Описание.ИНН;
	КПП = Описание.КПП;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.ИНН = &amp;ИНН
	               |	И Контрагенты.КПП = &amp;КПП";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КонтрагентСсылка = Выборка.Ссылка;	
	Иначе
		//Создаем Контрагента
		ПартнерСсылка = Справочники.Партнеры.ПустаяСсылка();
		Если ЗначениеЗаполнено(НаименованиеПартнера) Тогда
			 ПартнерСсылка = Справочники.Партнеры.НайтиПоНаименованию(НаименованиеПартнера);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Наименование) Тогда
			Наименование = ИНН+"/"+КПП;
		КонецЕсли;
		
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование = Наименование;
		КонтрагентОбъект.ИНН = ИНН;
		КонтрагентОбъект.КПП = КПП;
		КонтрагентОбъект.Партнер = ПартнерСсылка;
		КонтрагентОбъект.Записать();
		
		КонтрагентСсылка = КонтрагентОбъект.Ссылка;
	КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>38</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВыполнитьДозагрузкуV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Выполнить дозагрузку v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Если ТипЗнч(ВхТело) = Тип("Структура") ИЛИ ТипЗнч(ВхТело) = Тип("Массив") Тогда 	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ВхТело); // сериализует ОтветМассив в формат JSON
		Тело = ЗаписьJSON.Закрыть();
	Иначе
		Тело = ВхТело;	
	КонецЕсли;
	
	Настройка = Справочники.НастройкиЗагрузокУслуг.НайтиПоКоду(КодНастройкаЗагрузки);
	ЗагруженныеОбъекты = УправлениеБТСервер.ЗагрузитьДанныеВУслугу(Тело, Неопределено, Настройка);
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>39</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>УстановитьСтатусУслугиБТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Установить статус услуги БТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	СтатусУслуги = Перечисления.СтатусыУслуг[СтатусСтрокой];
	УправлениеБТСервер.УстановитьСтатусУслуги(Услуга, СтатусУслуги, Период);
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>40</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ВыполнитьВыгрузкуОбъектаV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Выполнить выгрузку объекта v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Результат = Новый Массив;
	
	Если ТипЗнч(ВхСсылкаНаНастройку) = Тип("СправочникСсылка.НастройкиВыгрузкиОбъектов") Тогда
		СсылкаНаНастройку = ВхСсылкаНаНастройку;	
	ИначеЕсли ТипЗнч(ВхСсылкаНаНастройку) = Тип("Строка") Тогда
		СсылкаНаНастройку = Справочники.НастройкиВыгрузкиОбъектов.НайтиПоКоду(ВхСсылкаНаНастройку);
		Если НЕ ЗначениеЗаполнено(СсылкаНаНастройку) Тогда
			СсылкаНаНастройку = Справочники.НастройкиВыгрузкиОбъектов.НайтиПоНаименованию(ВхСсылкаНаНастройку);
		КонецЕсли;
	КонецЕсли;
	
	Результат = УправлениеБТСервер.ВыполнитьВыгрузкуОбъектаСервер(СсылкаНаНастройку, ВхПараметры);
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>41</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>МассивСтрокВТекстV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Массив строк в текст v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Результат = "";
	
	Для Каждого СтрокаС ИЗ МассивСтрок Цикл
		Результат = Результат + СтрокаС + Символы.ПС; 
	КонецЦикла;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>42</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ОтправитьЗапросНаСерверБТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Отправить запрос на сервер БТV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Если ТипЗнч(ВхТело) = Тип("Структура") ИЛИ ТипЗнч(ВхТело) = Тип("Массив") Тогда 	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ВхТело); // сериализует ОтветМассив в формат JSON
		Тело = ЗаписьJSON.Закрыть();
	Иначе
		Тело = ВхТело;	
	КонецЕсли;
	
	Результат = Ложь;
	ВхОбъект = "";
	
	РЕСТ = Новый HTTPЗапрос(Адрес);
	РЕСТ.УстановитьТелоИзСтроки(Тело);
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	Результат = Соединение.ВызватьHTTPМетод(ТипЗапроса, РЕСТ);
	Если Результат.КодСостояния = 200 Тогда
		ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Результат = Истина;
	Иначе
		ВхОбъект = Результат.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Результат = Ложь;		
	КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>43</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ХарактеристикаМестаV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Характеристика места v2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузкиV2</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	Результат = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Место", Место);
	Запрос.УстановитьПараметр("ТипОписания", ТипОписания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеМест.Место,
	               |	ОписаниеМест.ТипОписания,
	               |	ОписаниеМест.Значение
	               |ИЗ
	               |	РегистрСведений.ОписаниеМест КАК ОписаниеМест
	               |ГДЕ
	               |	ОписаниеМест.Место = &amp;Место
	               |	И ОписаниеМест.ТипОписания = &amp;ТипОписания";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>44</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиКонтрагентаПоХарактеристике</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти контрагента по характеристике</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.Контрагенты.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОписаниеКонтрагентов.Контрагент КАК Контрагент,
	               |	ОписаниеКонтрагентов.ТипОписания КАК ТипОписания,
	               |	ОписаниеКонтрагентов.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ОписаниеКонтрагентов КАК ОписаниеКонтрагентов
	               |ГДЕ
	               |	ОписаниеКонтрагентов.ТипОписания = &amp;ТипОписания
	               |	И ОписаниеКонтрагентов.Значение ПОДОБНО &amp;Значение";
	Запрос.УстановитьПараметр("ТипОписания", Справочники.ТипыОписания.СтрокаПоиска);
	Запрос.УстановитьПараметр("Значение", "%"+ЗначениеJSON+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Контрагент;
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<i>5</i>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>45</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СформироватьСтрокуПоШаблону</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Сформировать строку по шаблону</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>3</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияОписания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>	РазобранныйШаблон = УправлениеБТСервер.ПолучитьМассивПеременныхВШаблоне(Шаблон);
	Для Каждого РеквизитДокумента ИЗ РазобранныйШаблон.Реквизиты Цикл
		РазобранныйШаблон.ШаблонТекста = СтрЗаменить(РазобранныйШаблон.ШаблонТекста, "["+РеквизитДокумента.Ключ+"]", ЗаказКлиентаБТ[РеквизитДокумента.Значение]);
	КонецЦикла;
	
	Для Каждого ФункцияДокумента ИЗ РазобранныйШаблон.Функции Цикл
		
		ПараметрыФункции = ФункцияДокумента.Значение.ПараметрыФункции;
		ПараметрыФункции.Добавить(ЗаказКлиентаБТ);
		ПараметрыФункции.Добавить(Услуга);
		СылкаНаФункцию = Справочники.ФункцииОписания.НайтиПоРеквизиту("КлючПоиска", ФункцияДокумента.Значение.ИмяФункции); 
		ЗначениеФункции = УправлениеБТСервер.ВыполнитьПростуюФункцию(СылкаНаФункцию, ПараметрыФункции);
		
		РазобранныйШаблон.ШаблонТекста = СтрЗаменить(РазобранныйШаблон.ШаблонТекста, "["+ФункцияДокумента.Ключ+"]", ЗначениеФункции);
	КонецЦикла;
	Результат = РазобранныйШаблон.ШаблонТекста;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<i>5</i>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>46</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиТипДочернейУслуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти тип дочерней услуги</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Перечисления.ТипДочернейУслуги.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Результат = Перечисления.ТипДочернейУслуги[ЗначениеJSON];
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<i>5</i>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>47</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиПартнера</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти партнера</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.Контрагенты.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.КПП = &amp;КПП
	               |	И Контрагенты.ИНН = &amp;ИНН";
	Запрос.УстановитьПараметр("КПП",ЗначениеJSON.KPP);
	Запрос.УстановитьПараметр("ИНН",ЗначениеJSON.INN);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка.Партнер;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Наименование = &amp;Наименование";
		Запрос.УстановитьПараметр("Наименование",ЗначениеJSON.Name);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка.Партнер;
		КонецЕсли;	
	КонецЕсли;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>48</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ОтменитьУслугиПродажиИОтмены</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Отменить услуги продажи и отмены</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>УслугаСсылка = РеальныйОбъект.Ссылка;
УправлениеБТСервер.УстановитьСтатусУслуги(УслугаСсылка, Перечисления.СтатусыУслуг.УслугаОтменена);

ТЧХарактеристики = РеальныйОбъект.ОписаниеУслуги;
СтрокаТЧБилетПродажи = ТЧХарактеристики.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.БилетПродажи, "Характеристика");
Статус = УправлениеБТСервер.ПолучитьСтатусУслуги(СтрокаТЧБилетПродажи.Значение);
Если Статус &lt;&gt; Перечисления.СтатусыУслуг.УслугаОтменена Тогда		
	УправлениеБТСервер.УстановитьСтатусУслуги(СтрокаТЧБилетПродажи.Значение, Перечисления.СтатусыУслуг.УслугаОтменена);
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>49</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>АвтозаполнениеДокументов</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Автозаполнение документов</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияРегламентногоЗадания</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДатаФормирования = ТекущаяДата();

Запрос = Новый Запрос;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодготовитьДляФормированияДокументов.Услуга.Организация КАК Организация,
	|	ПодготовитьДляФормированияДокументов.Услуга.Партнер КАК Партнер,
	|	ПодготовитьДляФормированияДокументов.Услуга.Контрагент КАК Контрагент,
	|	ПодготовитьДляФормированияДокументов.Услуга.Договор КАК Договор,
	|	ПодготовитьДляФормированияДокументов.Расписание КАК Расписание,
	|	ПодготовитьДляФормированияДокументов.УсловияФормирования КАК УсловияФормирования
	|ИЗ
	|	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
	|ГДЕ
	|	ПодготовитьДляФормированияДокументов.ДатаФормирования &lt;= &amp;ДатаФормирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ПодготовитьДляФормированияДокументов.Услуга.Организация,
	|	ПодготовитьДляФормированияДокументов.Услуга.Партнер,
	|	ПодготовитьДляФормированияДокументов.Услуга.Контрагент,
	|	ПодготовитьДляФормированияДокументов.Услуга.Договор,
	|	ПодготовитьДляФормированияДокументов.УсловияФормирования,
	|	ПодготовитьДляФормированияДокументов.Расписание";

Запрос.УстановитьПараметр("ДатаФормирования", ДатаФормирования);

РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

СпискиДокументов = Новый Массив;	
Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	// Гулять так гулять! Запрос в цикле
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаФормирования"		, ДатаФормирования);
	Запрос.УстановитьПараметр("Организация"				, ВыборкаДетальныеЗаписи.Организация);
	Запрос.УстановитьПараметр("Партнер"					, ВыборкаДетальныеЗаписи.Партнер);
	Запрос.УстановитьПараметр("Контрагент"				, ВыборкаДетальныеЗаписи.Контрагент);
	Запрос.УстановитьПараметр("Договор"					, ВыборкаДетальныеЗаписи.Договор);
	Запрос.УстановитьПараметр("Расписание"				, ВыборкаДетальныеЗаписи.Расписание);
	Запрос.УстановитьПараметр("УсловияФормирования"		, ВыборкаДетальныеЗаписи.УсловияФормирования);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодготовитьДляФормированияДокументов.Услуга.Организация КАК УслугаОрганизация,
		|	ПодготовитьДляФормированияДокументов.Услуга.Партнер КАК УслугаПартнер,
		|	ПодготовитьДляФормированияДокументов.Услуга.Контрагент КАК УслугаКонтрагент,
		|	ПодготовитьДляФормированияДокументов.Услуга.Договор КАК УслугаДоговор,
		|	ПодготовитьДляФормированияДокументов.Расписание КАК Расписание,
		|	ПодготовитьДляФормированияДокументов.УсловияФормирования КАК УсловияФормирования,
		|	ПодготовитьДляФормированияДокументов.Услуга КАК Услуга,
		|	СтатусУслугиПродажаСрезПоследних.Статус КАК Статус
		|ПОМЕСТИТЬ ВсеУслуги
		|ИЗ
		|	РегистрСведений.ПодготовитьДляФормированияДокументов КАК ПодготовитьДляФормированияДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусУслугиПродажа.СрезПоследних(&amp;ДатаФормирования, ) КАК СтатусУслугиПродажаСрезПоследних
		|		ПО ПодготовитьДляФормированияДокументов.Услуга = СтатусУслугиПродажаСрезПоследних.Услуга
		|ГДЕ
		|	ПодготовитьДляФормированияДокументов.ДатаФормирования &lt;= &amp;ДатаФормирования
		|	И ПодготовитьДляФормированияДокументов.Услуга.Организация = &amp;Организация
		|	И ПодготовитьДляФормированияДокументов.Услуга.Партнер = &amp;Партнер
		|	И ПодготовитьДляФормированияДокументов.Услуга.Контрагент = &amp;Контрагент
		|	И ПодготовитьДляФормированияДокументов.Услуга.Договор = &amp;Договор
		|	И ПодготовитьДляФормированияДокументов.Расписание = &amp;Расписание
		|	И ПодготовитьДляФормированияДокументов.УсловияФормирования = &amp;УсловияФормирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеУслуги.УслугаОрганизация КАК УслугаОрганизация,
		|	ВсеУслуги.УслугаПартнер КАК УслугаПартнер,
		|	ВсеУслуги.УслугаКонтрагент КАК УслугаКонтрагент,
		|	ВсеУслуги.УслугаДоговор КАК УслугаДоговор,
		|	ВсеУслуги.Расписание КАК Расписание,
		|	ВсеУслуги.УсловияФормирования КАК УсловияФормирования,
		|	ВсеУслуги.Услуга КАК Услуга,
		|	ВсеУслуги.Статус КАК Статус
		|ИЗ
		|	ВсеУслуги КАК ВсеУслуги
		|ГДЕ
		|	(ВсеУслуги.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУслуг.УслугаРеализована)
		|			ИЛИ ВсеУслуги.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУслуг.УслугаНеПродается))";
	
	РезультатЗапросаУслуг = Запрос.Выполнить();		
	ВыборкаДетальныеЗаписиУслуг = РезультатЗапросаУслуг.Выгрузить();
	
	СписокУслугПоКонтрагентам = ВыборкаДетальныеЗаписиУслуг.ВыгрузитьКолонку("Услуга");
	Если СписокУслугПоКонтрагентам.Количество() &gt; 0 Тогда
		СпискиДокументов.Добавить(СписокУслугПоКонтрагентам);
	КонецЕсли;	
КонецЦикла;

//Списки документов готовы
Для Каждого СписокУслуг ИЗ СпискиДокументов Цикл
	ЗаказКлиентаБТОбъект = Документы.ЗаказКлиентаБТ.СоздатьДокумент();
	ЗаказКлиентаБТОбъект.Заполнить(СписокУслуг);
	ЗаказКлиентаБТОбъект.Дата = ДатаФормирования;
	ЗаказКлиентаБТОбъект.Записать(РежимЗаписиДокумента.Проведение);
КонецЦикла;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>50</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>НайтиПользователя</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Найти Пользователя</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Результат = Справочники.Пользователи.ПустаяСсылка();
Если ЗначениеJSON &lt;&gt; "" Тогда
	ИдентификаторыВСистемах = "%"+ЗначениеJSON+"%";
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеквизитыПользователи.Пользователь КАК Пользователь,
		|	РеквизитыПользователи.ИдентификаторыВСистемах КАК ИдентификаторыВСистемах,
		|	РеквизитыПользователи.ДоверенностьПодпись КАК ДоверенностьПодпись,
		|	РеквизитыПользователи.Факсимиле КАК Факсимиле,
		|	РеквизитыПользователи.ФаксимилеПечать КАК ФаксимилеПечать,
		|	РеквизитыПользователи.ФаксимилеПодпись КАК ФаксимилеПодпись
		|ИЗ
		|	РегистрСведений.РеквизитыПользователи КАК РеквизитыПользователи
		|ГДЕ
		|	РеквизитыПользователи.ИдентификаторыВСистемах ПОДОБНО &amp;ИдентификаторыВСистемах";

	Запрос.УстановитьПараметр("ИдентификаторыВСистемах", ИдентификаторыВСистемах);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.Пользователь;		
	КонецЦикла;
КонецЕсли;</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>51</index>
		<row>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>СкопироватьБилетПродажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>0</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>Скопировать билет продажи</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>9</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ФункцияЗагрузки</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>4</f>
					<tl>
						<v8:item>
							<v8:lang>ru</v8:lang>
							<v8:content>ДокументПродажиСтрока = РеальныйОбъект.ОписаниеУслуги.Найти(ПланыВидовХарактеристик.НаборХарактеристикДляНоменклатуры.БилетПродажи, "Характеристика");
ДокументПродажи = ДокументПродажиСтрока.Значение;
Если ЗначениеЗаполнено(ДокументПродажи) И НЕ (ДокументПродажи = Документы.Услуга.ПустаяСсылка()) Тогда
	
	Для Каждого СтрокаОписания ИЗ РеальныйОбъект.ОписаниеУслуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОписания.Значение) Тогда
			ОписаниеУслугиПродажиСтрока = ДокументПродажи.ОписаниеУслуги.Найти(СтрокаОписания.Характеристика, "Характеристика");
			Если СтрНайти(НРег(ОписаниеУслугиПродажиСтрока.Характеристика.Наименование), "сумма") &gt;0 И 
				ОписаниеУслугиПродажиСтрока.Характеристика.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				СтрокаОписания.Значение = -1*ОписаниеУслугиПродажиСтрока.Значение;
			Иначе					
				СтрокаОписания.Значение = ОписаниеУслугиПродажиСтрока.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОписания ИЗ РеальныйОбъект.ЭкстраПоля Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОписания.Значение) Тогда
			ЭкстраПоляПродажиСтрока = ДокументПродажи.ЭкстраПоля.Найти(СтрокаОписания.Характеристика, "Характеристика");
			СтрокаОписания.Значение = ЭкстраПоляПродажиСтрока.Значение;
		КонецЕсли;
	КонецЦикла;
	
	РеальныйОбъект.СтавкаНДС = ДокументПродажи.СтавкаНДС;
	РеальныйОбъект.СтавкаНДСКлиента = ДокументПродажи.СтавкаНДСКлиента;
	
	МодульСумма = Макс(-1*РеальныйОбъект.Сумма, РеальныйОбъект.Сумма);
	МодульСуммаПродажи = Макс(-1*ДокументПродажи.Сумма, ДокументПродажи.Сумма);
	
	Коэффициент = МодульСумма/МодульСуммаПродажи; 
	РеальныйОбъект.СуммаНДС = -1*ДокументПродажи.СуммаНДС*Коэффициент;
	РеальныйОбъект.СуммаНДСКлиента = -1*ДокументПродажи.СуммаНДСКлиента*Коэффициент;
	
КонецЕсли;
</v8:content>
						</v8:item>
					</tl>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>52</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>53</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>54</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>55</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>56</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>57</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>58</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>59</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>60</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>61</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>62</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>63</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>64</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>65</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>66</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>67</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>68</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>69</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>70</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>71</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>72</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>73</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<rowsItem>
		<index>74</index>
		<row>
			<c>
				<i>3</i>
				<c>
					<f>4</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
			<c>
				<c>
					<f>10</f>
				</c>
			</c>
		</row>
	</rowsItem>
	<templateMode>true</templateMode>
	<defaultFormatIndex>10</defaultFormatIndex>
	<height>52</height>
	<vgRows>52</vgRows>
	<font ref="style:TextFont" height="8" kind="StyleItem" scale="100"/>
	<format>
		<width>312</width>
	</format>
	<format>
		<width>303</width>
	</format>
	<format>
		<width>162</width>
	</format>
	<format>
		<width>1106</width>
	</format>
	<format>
		<backColor>style:ButtonBackColor</backColor>
	</format>
	<format>
		<borderColor>#A0A0A0</borderColor>
		<width>576</width>
		<horizontalAlignment>Auto</horizontalAlignment>
		<verticalAlignment>Top</verticalAlignment>
		<textColor>#333333</textColor>
		<backColor>#FFFFFF</backColor>
		<autoIndent>2</autoIndent>
	</format>
	<format>
		<width>80</width>
	</format>
	<format>
		<font>0</font>
		<borderColor>style:BorderColor</borderColor>
		<width>192</width>
		<horizontalAlignment>Left</horizontalAlignment>
		<verticalAlignment>Top</verticalAlignment>
		<textColor>#000000</textColor>
		<backColor>#FFFFFF</backColor>
		<autoIndent>2</autoIndent>
	</format>
	<format>
		<width>122</width>
	</format>
	<format>
		<width>72</width>
	</format>
</document>